<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>24年技能大赛广东样题</title>
    <url>/2024/01/17/24%E5%B9%B4%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%B9%BF%E4%B8%9C%E6%A0%B7%E9%A2%98/</url>
    <content><![CDATA[<h1 id="24年样题1"><a href="#24年样题1" class="headerlink" title="24年样题1"></a>24年样题1</h1><h2 id="一、接线"><a href="#一、接线" class="headerlink" title="一、接线"></a>一、接线</h2><h2 id="二、维护"><a href="#二、维护" class="headerlink" title="二、维护"></a>二、维护</h2><h3 id="三、sql-server维护"><a href="#三、sql-server维护" class="headerlink" title="三、sql server维护"></a>三、sql server维护</h3><p><img src="/../assets/24%E5%B9%B4%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%B9%BF%E4%B8%9C%E6%A0%B7%E9%A2%98/1705654362719.png" alt="1705654362719"></p>
<p><img src="/../assets/24%E5%B9%B4%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%B9%BF%E4%B8%9C%E6%A0%B7%E9%A2%98/1705655155691.png" alt="1705655155691"></p>
<p><img src="/../assets/24%E5%B9%B4%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%B9%BF%E4%B8%9C%E6%A0%B7%E9%A2%98/1705654843318.png" alt="1705654843318"></p>
<p><img src="/../assets/24%E5%B9%B4%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%B9%BF%E4%B8%9C%E6%A0%B7%E9%A2%98/1705655131418.png" alt="1705655131418"></p>
<h1 id="24年样题2"><a href="#24年样题2" class="headerlink" title="24年样题2"></a>24年样题2</h1><h2 id="一、接线-1"><a href="#一、接线-1" class="headerlink" title="一、接线"></a>一、接线</h2><p><img src="/../assets/24%E5%B9%B4%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%B9%BF%E4%B8%9C%E6%A0%B7%E9%A2%98/1705468701401.png" alt="1705468701401"></p>
<h2 id="二、维护-1"><a href="#二、维护-1" class="headerlink" title="二、维护"></a>二、维护</h2><p><img src="/../assets/24%E5%B9%B4%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%B9%BF%E4%B8%9C%E6%A0%B7%E9%A2%98/1705472418742.png" alt="1705472418742"></p>
<p><img src="/../assets/24%E5%B9%B4%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%B9%BF%E4%B8%9C%E6%A0%B7%E9%A2%98/1705472834357.png" alt="1705472834357"></p>
<p><img src="/../assets/24%E5%B9%B4%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%B9%BF%E4%B8%9C%E6%A0%B7%E9%A2%98/1705472874215.png" alt="1705472874215"></p>
<p><img src="/../assets/24%E5%B9%B4%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%B9%BF%E4%B8%9C%E6%A0%B7%E9%A2%98/1705473256503.png" alt="1705473256503"></p>
<p><img src="/../assets/24%E5%B9%B4%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%B9%BF%E4%B8%9C%E6%A0%B7%E9%A2%98/1705473265323.png" alt="1705473265323"></p>
<p><img src="/../assets/24%E5%B9%B4%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%B9%BF%E4%B8%9C%E6%A0%B7%E9%A2%98/1705473783244.png" alt="1705473783244"></p>
<p><img src="/../assets/24%E5%B9%B4%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%B9%BF%E4%B8%9C%E6%A0%B7%E9%A2%98/1705473825000.png" alt="1705473825000"></p>
<h1 id="24年样题3"><a href="#24年样题3" class="headerlink" title="24年样题3"></a>24年样题3</h1><h2 id="一、接线-2"><a href="#一、接线-2" class="headerlink" title="一、接线"></a>一、接线</h2><h2 id="二、维护-2"><a href="#二、维护-2" class="headerlink" title="二、维护"></a>二、维护</h2><p><img src="/../assets/24%E5%B9%B4%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%B9%BF%E4%B8%9C%E6%A0%B7%E9%A2%98/1705473942700.png" alt="1705473942700"></p>
<p><img src="/../assets/24%E5%B9%B4%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%B9%BF%E4%B8%9C%E6%A0%B7%E9%A2%98/1705474322751.png" alt="1705474322751"></p>
<p><img src="/../assets/24%E5%B9%B4%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%B9%BF%E4%B8%9C%E6%A0%B7%E9%A2%98/1705474268550.png" alt="1705474268550"></p>
<h1 id="24年样题4"><a href="#24年样题4" class="headerlink" title="24年样题4"></a>24年样题4</h1><h2 id="一、接线-3"><a href="#一、接线-3" class="headerlink" title="一、接线"></a>一、接线</h2><h2 id="二、维护-3"><a href="#二、维护-3" class="headerlink" title="二、维护"></a>二、维护</h2><p><strong>重复的题省略</strong></p>
<p><img src="/../assets/24%E5%B9%B4%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%B9%BF%E4%B8%9C%E6%A0%B7%E9%A2%98/1705475300335.png" alt="1705475300335"></p>
<p><img src="/../assets/24%E5%B9%B4%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%B9%BF%E4%B8%9C%E6%A0%B7%E9%A2%98/1705474882469.png" alt="1705474882469"></p>
<p><img src="/../assets/24%E5%B9%B4%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%B9%BF%E4%B8%9C%E6%A0%B7%E9%A2%98/1705474910725.png" alt="1705474910725"></p>
<h1 id="24年样题5"><a href="#24年样题5" class="headerlink" title="24年样题5"></a>24年样题5</h1><h2 id="一、接线-4"><a href="#一、接线-4" class="headerlink" title="一、接线"></a>一、接线</h2><h2 id="二、维护-4"><a href="#二、维护-4" class="headerlink" title="二、维护"></a>二、维护</h2><p><img src="/../assets/24%E5%B9%B4%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%B9%BF%E4%B8%9C%E6%A0%B7%E9%A2%98/1705475461356.png" alt="1705475461356"></p>
<p><img src="/../assets/24%E5%B9%B4%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%B9%BF%E4%B8%9C%E6%A0%B7%E9%A2%98/1705475449777.png" alt="1705475449777"></p>
<p><img src="/../assets/24%E5%B9%B4%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%B9%BF%E4%B8%9C%E6%A0%B7%E9%A2%98/1705475668184.png" alt="1705475668184"></p>
<p><img src="/../assets/24%E5%B9%B4%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%B9%BF%E4%B8%9C%E6%A0%B7%E9%A2%98/1705475763975.png" alt="1705475763975"></p>
<p><img src="/../assets/24%E5%B9%B4%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%B9%BF%E4%B8%9C%E6%A0%B7%E9%A2%98/1705475906704.png" alt="1705475906704"></p>
<h1 id="24年样题6"><a href="#24年样题6" class="headerlink" title="24年样题6"></a>24年样题6</h1><h2 id="一、接线-5"><a href="#一、接线-5" class="headerlink" title="一、接线"></a>一、接线</h2><h2 id="二、维护-5"><a href="#二、维护-5" class="headerlink" title="二、维护"></a>二、维护</h2><p><img src="/../assets/24%E5%B9%B4%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%B9%BF%E4%B8%9C%E6%A0%B7%E9%A2%98/1705476564047.png" alt="1705476564047"></p>
<p><img src="/../assets/24%E5%B9%B4%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%B9%BF%E4%B8%9C%E6%A0%B7%E9%A2%98/1705476555115.png" alt="1705476555115"></p>
<p><img src="/../assets/24%E5%B9%B4%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%B9%BF%E4%B8%9C%E6%A0%B7%E9%A2%98/1705476641917.png" alt="1705476641917"></p>
<p><img src="/../assets/24%E5%B9%B4%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%B9%BF%E4%B8%9C%E6%A0%B7%E9%A2%98/1705476664813.png" alt="1705476664813"></p>
]]></content>
      <categories>
        <category>技能大赛</category>
      </categories>
      <tags>
        <tag>样题</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS第一天</title>
    <url>/2023/10/24/CSS%E7%AC%AC%E4%B8%80%E5%A4%A9/</url>
    <content><![CDATA[<h2 id="1-CSS-语法规范"><a href="#1-CSS-语法规范" class="headerlink" title="1.CSS 语法规范"></a>1.CSS 语法规范</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">h1&#123;color:red; font-size:25px;&#125;</span><br><span class="line">选择器 属性 值</span><br></pre></td></tr></table></figure>

<h2 id="2-类选择器"><a href="#2-类选择器" class="headerlink" title="2.类选择器"></a>2.类选择器</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;red font20&quot;&gt;亚瑟&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h2 id="3-id-选择器"><a href="#3-id-选择器" class="headerlink" title="3.id 选择器"></a>3.id 选择器</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#id名&#123;</span><br><span class="line">	属性1：属性值1；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-通配符选择器"><a href="#4-通配符选择器" class="headerlink" title="4.通配符选择器"></a>4.通配符选择器</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">	属性1：属性值1；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS第二天</title>
    <url>/2023/10/24/CSS%E7%AC%AC%E4%BA%8C%E5%A4%A9/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>HTML第一天</title>
    <url>/2023/10/11/HTML%E7%AC%AC%E4%B8%80%E5%A4%A9/</url>
    <content><![CDATA[<h2 id="HTML-语法规范"><a href="#HTML-语法规范" class="headerlink" title="HTML 语法规范"></a>HTML 语法规范</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line">//html标签 <span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span> //文档的头部 <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span> //文档的标签</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">//文档的主体</span><br></pre></td></tr></table></figure>

<h3 id="1-包含关系"><a href="#1-包含关系" class="headerlink" title="1.包含关系"></a>1.包含关系</h3><head>
    <title></title>
</head>

<h3 id="2-并列关系"><a href="#2-并列关系" class="headerlink" title="2.并列关系"></a>2.并列关系</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-文档类型声明标签"><a href="#3-文档类型声明标签" class="headerlink" title="3.文档类型声明标签"></a>3.文档类型声明标签</h3><p>采取的是 html5 版本的显示网页</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-标题标签"><a href="#4-标题标签" class="headerlink" title="4.标题标签"></a>4.标题标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">  --</span><br><span class="line">  <span class="tag">&lt;<span class="name">h6</span>&gt;</span><span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="5-段落和换行标签"><a href="#5-段落和换行标签" class="headerlink" title="5.段落和换行标签"></a>5.段落和换行标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">//根据浏览器窗口的大小自行换行 <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">//换行标签</span><br></pre></td></tr></table></figure>

<h3 id="6-文本格式化标签"><a href="#6-文本格式化标签" class="headerlink" title="6.文本格式化标签"></a>6.文本格式化标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">strong</span>&gt;</span> <span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span> //加粗 <span class="tag">&lt;<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">em</span>&gt;</span> <span class="tag">&lt;<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> //倾斜 <span class="tag">&lt;<span class="name">del</span>&gt;</span><span class="tag">&lt;/<span class="name">del</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">s</span>&gt;</span><span class="tag">&lt;/<span class="name">s</span>&gt;</span> //删除线 <span class="tag">&lt;<span class="name">ins</span>&gt;</span><span class="tag">&lt;/<span class="name">ins</span>&gt;</span> <span class="tag">&lt;<span class="name">u</span>&gt;</span><span class="tag">&lt;/<span class="name">u</span>&gt;</span> //下划线</span><br></pre></td></tr></table></figure>

<h3 id="7-div-和-span-标签"><a href="#7-div-和-span-标签" class="headerlink" title="7.div 和 span 标签"></a>7.div 和 span 标签</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;这是盒子&lt;/div&gt;  //分割</span><br><span class="line">&lt;span&gt;这也是盒子&lt;/span&gt; //跨度</span><br></pre></td></tr></table></figure>

<h3 id="8-图像标签和路径"><a href="#8-图像标签和路径" class="headerlink" title="8.图像标签和路径"></a>8.图像标签和路径</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=&quot;图像url&quot; /&gt;</span><br><span class="line"></span><br><span class="line">key=&quot;value&quot;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>src</th>
<th>必须属性</th>
</tr>
</thead>
<tbody><tr>
<td>alt</td>
<td>替换文本。图像不能显示文字</td>
</tr>
<tr>
<td>title</td>
<td>提示文本。在图像上显示文字</td>
</tr>
<tr>
<td>width</td>
<td>图像的宽度</td>
</tr>
<tr>
<td>height</td>
<td>图像的盖度</td>
</tr>
<tr>
<td>border</td>
<td>边框粗细</td>
</tr>
</tbody></table>
<h3 id="9-超链接标签"><a href="#9-超链接标签" class="headerlink" title="9.超链接标签"></a>9.超链接标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;跳转目标&quot;</span> <span class="attr">target</span>=<span class="string">&quot;目标窗口的弹出方式&quot;</span>&gt;</span>文本或者图像<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="10-特殊字符"><a href="#10-特殊字符" class="headerlink" title="10.特殊字符"></a>10.特殊字符</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&amp;nbsp; //空格</span><br><span class="line">&amp;ly;  //小于号</span><br><span class="line">&amp;gt;  //大于号</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML第三天</title>
    <url>/2023/10/13/HTML%E7%AC%AC%E4%B8%89%E5%A4%A9/</url>
    <content><![CDATA[<h3 id="1-font-family"><a href="#1-font-family" class="headerlink" title="1.font-family"></a>1.font-family</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">font-family //定义文本系列</span><br></pre></td></tr></table></figure>

<h3 id="2-font-size"><a href="#2-font-size" class="headerlink" title="2. font-size"></a>2. font-size</h3><p>属性定义字体大小。</p>
<h3 id="3-font-weight"><a href="#3-font-weight" class="headerlink" title="3.font-weight"></a>3.font-weight</h3><p>文本字体的粗细</p>
<table>
<thead>
<tr>
<th>notmal</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>bold</td>
<td>加粗</td>
</tr>
<tr>
<td>100-900</td>
<td>400&#x3D;normal,700&#x3D;bold</td>
</tr>
</tbody></table>
<h3 id="4-font-style"><a href="#4-font-style" class="headerlink" title="4.font-style"></a>4.font-style</h3><p>文本风格</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">normal //默认值 italic//斜体</span><br></pre></td></tr></table></figure>

<p><img src="/../assets/HTML%E7%AC%AC%E4%B8%89%E5%A4%A9/1697178989345.png" alt="1697178989345"></p>
<h3 id="5-text-align"><a href="#5-text-align" class="headerlink" title="5.text-align"></a>5.text-align</h3><p>文本内容水平对齐方式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">left //左对齐 right //右对齐 center //居中对齐</span><br></pre></td></tr></table></figure>

<h3 id="6-text-decoration"><a href="#6-text-decoration" class="headerlink" title="6.text-decoration"></a>6.text-decoration</h3><p>给文本添加下划线、删除线、上划线等</p>
<table>
<thead>
<tr>
<th>none</th>
<th>默认</th>
</tr>
</thead>
<tbody><tr>
<td>underline</td>
<td>下划线</td>
</tr>
<tr>
<td>overline</td>
<td>上划线</td>
</tr>
<tr>
<td>line-through</td>
<td>删除线</td>
</tr>
</tbody></table>
<h3 id="7-text-indent"><a href="#7-text-indent" class="headerlink" title="7.text-indent"></a>7.text-indent</h3><p>段落首行缩进</p>
<h3 id="8-line-height"><a href="#8-line-height" class="headerlink" title="8.line-height"></a>8.line-height</h3><p>设置行间的距离（行高）</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML第二天</title>
    <url>/2023/10/12/HTML%E7%AC%AC%E4%BA%8C%E5%A4%A9/</url>
    <content><![CDATA[<h3 id="1-表格的基本语法"><a href="#1-表格的基本语法" class="headerlink" title="1.表格的基本语法"></a>1.表格的基本语法</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span> //表格标签</span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span> //行</span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元文字<span class="tag">&lt;/<span class="name">td</span>&gt;</span>//单元格</span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span>//表格头部份</span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>align</th>
<th>left\center\right</th>
<th>对齐方式</th>
</tr>
</thead>
<tbody><tr>
<td>border</td>
<td>1&#x2F;“”</td>
<td>有没有边框</td>
</tr>
<tr>
<td>cellpadding</td>
<td>像素</td>
<td>内容与单元格的空白</td>
</tr>
<tr>
<td>cellspacing</td>
<td>像素</td>
<td>单元格之间的空白</td>
</tr>
<tr>
<td>wdith</td>
<td>像素</td>
<td>宽度</td>
</tr>
</tbody></table>
<h3 id="2-表格结构标签"><a href="#2-表格结构标签" class="headerlink" title="2.表格结构标签"></a>2.表格结构标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">thead</span>&gt;</span><span class="tag">&lt;/<span class="name">thead</span>&gt;</span> //表格的头部区域</span><br><span class="line"><span class="tag">&lt;<span class="name">tbody</span>&gt;</span><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span> //表格的主题区域</span><br></pre></td></tr></table></figure>

<h3 id="3-合并单元格"><a href="#3-合并单元格" class="headerlink" title="3.合并单元格"></a>3.合并单元格</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">rowspan=&quot;合并单元格个数&quot; //跨行</span><br><span class="line">colspan=&quot;个数&quot; //跨列</span><br></pre></td></tr></table></figure>

<h3 id="4-无序列表"><a href="#4-无序列表" class="headerlink" title="4.无序列表"></a>4.无序列表</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="5-有序列表"><a href="#5-有序列表" class="headerlink" title="5.有序列表"></a>5.有序列表</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="6-自定义列表"><a href="#6-自定义列表" class="headerlink" title="6.自定义列表"></a>6.自定义列表</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dt</span>&gt;</span><span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="7-表单域"><a href="#7-表单域" class="headerlink" title="7.表单域"></a>7.表单域</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form action=&quot;地址&quot; method=&quot;提交方式&quot; name=&quot;表单域名称&quot;&gt;</span><br><span class="line">各种表单元素控件</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<h3 id="8-表单元素"><a href="#8-表单元素" class="headerlink" title="8.表单元素"></a>8.表单元素</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;属性值&quot; /&gt;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>button</th>
<th>点击按钮</th>
</tr>
</thead>
<tbody><tr>
<td>checkbox</td>
<td>复选框</td>
</tr>
<tr>
<td>file</td>
<td>输入字段和浏览按钮，文件上传</td>
</tr>
<tr>
<td>hidden</td>
<td>隐藏输入字段</td>
</tr>
<tr>
<td>password</td>
<td>密码字段</td>
</tr>
<tr>
<td>radio</td>
<td>单选按钮</td>
</tr>
<tr>
<td>reset</td>
<td>重置按钮</td>
</tr>
<tr>
<td>submit</td>
<td>提交按钮</td>
</tr>
<tr>
<td>text</td>
<td>输入文本</td>
</tr>
<tr>
<td>image</td>
<td>图像形式的提交按钮</td>
</tr>
</tbody></table>
<p>checked:规定此input元素怒首次加载时应当呗选中</p>
<p>maxlength：输入字段中字符的最大长度</p>
<p>placeholder:占位符</p>
<h3 id="8-label标签"><a href="#8-label标签" class="headerlink" title="8.label标签"></a>8.label标签</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;label for=&quot;sex&quot;&gt;男&lt;/label&gt;</span><br><span class="line">&lt;input type=&quot;radio&quot; name=&quot;sex&quot; id=&quot;sex&quot; /&gt;</span><br><span class="line">//一个和id属性相同</span><br></pre></td></tr></table></figure>

<h3 id="9-select表单元素"><a href="#9-select表单元素" class="headerlink" title="9.select表单元素"></a>9.select表单元素</h3><p><img src="/../assets/HTML%E7%AC%AC%E4%BA%8C%E5%A4%A9/1697079442675.png" alt="1697079442675"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;select&gt;</span><br><span class="line">&lt;option&gt;选项1&lt;/option&gt;</span><br><span class="line">&lt;option&gt;选项2&lt;/option&gt;</span><br><span class="line">&lt;option&gt;选项3&lt;/option&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">//在&lt;option&gt; 中定义 selected =“ selected &quot; 时，当前项即为默认选中项。</span><br></pre></td></tr></table></figure>

<h3 id="10-texttarea表单元素"><a href="#10-texttarea表单元素" class="headerlink" title="10.texttarea表单元素"></a>10.texttarea表单元素</h3><p>用于定义多行文本输入控件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span>=<span class="string">&quot;3&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;20&quot;</span>&gt;</span></span><br><span class="line">文本内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">//cols=&quot;每行中的字符&quot;</span><br><span class="line">//rows=&quot;显示的行数&quot;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">“text</span> &quot; <span class="attr">name</span>=<span class="string">“username”</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">“jiguan”</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>= <span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>SCREEPS</title>
    <url>/2023/11/27/SCREEPS/</url>
    <content><![CDATA[<h2 id="创建机器人"><a href="#创建机器人" class="headerlink" title="创建机器人"></a>创建机器人</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> crepp = <span class="title class_">Game</span>.<span class="property">creeps</span>[<span class="string">&#x27;MiningRobot&#x27;</span>];</span><br><span class="line"><span class="title class_">Game</span>.<span class="property">spawns</span>[<span class="string">&quot;Spawn1&quot;</span>].<span class="title function_">spawnCreep</span>([<span class="variable constant_">WORK</span>, <span class="variable constant_">CARRY</span>, <span class="variable constant_">MOVE</span>], <span class="string">&quot;Harvester1&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="采集能量"><a href="#采集能量" class="headerlink" title="采集能量"></a>采集能量</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">loop</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> creep = <span class="title class_">Game</span>.<span class="property">creeps</span>[<span class="string">&#x27;Harvester1&#x27;</span>];</span><br><span class="line">    <span class="keyword">var</span> sources = creep.<span class="property">room</span>.<span class="title function_">find</span>(<span class="variable constant_">FIND_SOURCES</span>);</span><br><span class="line">    <span class="keyword">if</span>(creep.<span class="title function_">harvest</span>(sources[<span class="number">0</span>]) == <span class="variable constant_">ERR_NOT_IN_RANGE</span>) &#123;</span><br><span class="line">        creep.<span class="title function_">moveTo</span>(sources[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="采集能量返回"><a href="#采集能量返回" class="headerlink" title="采集能量返回"></a>采集能量返回</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">loop</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> creep = <span class="title class_">Game</span>.<span class="property">creeps</span>[<span class="string">&#x27;Harvester1&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(creep.<span class="property">store</span>.<span class="title function_">getFreeCapacity</span>() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> sources = creep.<span class="property">room</span>.<span class="title function_">find</span>(<span class="variable constant_">FIND_SOURCES</span>);</span><br><span class="line">        <span class="keyword">if</span>(creep.<span class="title function_">harvest</span>(sources[<span class="number">0</span>]) == <span class="variable constant_">ERR_NOT_IN_RANGE</span>) &#123;</span><br><span class="line">            creep.<span class="title function_">moveTo</span>(sources[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>( creep.<span class="title function_">transfer</span>(<span class="title class_">Game</span>.<span class="property">spawns</span>[<span class="string">&#x27;Spawn1&#x27;</span>], <span class="variable constant_">RESOURCE_ENERGY</span>) == <span class="variable constant_">ERR_NOT_IN_RANGE</span> ) &#123;</span><br><span class="line">            creep.<span class="title function_">moveTo</span>(<span class="title class_">Game</span>.<span class="property">spawns</span>[<span class="string">&#x27;Spawn1&#x27;</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">loop</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> name <span class="keyword">in</span> <span class="title class_">Game</span>.<span class="property">creeps</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> creep = <span class="title class_">Game</span>.<span class="property">creeps</span>[name];</span><br><span class="line">        <span class="keyword">if</span>(creep.<span class="property">store</span>.<span class="title function_">getFreeCapacity</span>() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//检查是否又剩余的容量</span></span><br><span class="line">            <span class="keyword">var</span> sources = creep.<span class="property">room</span>.<span class="title function_">find</span>(<span class="variable constant_">FIND_SOURCES</span>);</span><br><span class="line">            <span class="comment">//创建能量的变量，指的是找到这所房间的全部能量</span></span><br><span class="line">            <span class="keyword">if</span>(creep.<span class="title function_">harvest</span>(sources[<span class="number">0</span>]) == <span class="variable constant_">ERR_NOT_IN_RANGE</span>) &#123;</span><br><span class="line">                 <span class="comment">//让creep从列表的第一个能源点采集能源</span></span><br><span class="line">                creep.<span class="title function_">moveTo</span>(sources[<span class="number">0</span>]);</span><br><span class="line">                <span class="comment">//如果不在能源采集范围，能会走向第一个能源点移动</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;<span class="comment">//当容量已满时，返回Spawn1</span></span><br><span class="line">            <span class="keyword">if</span>(creep.<span class="title function_">transfer</span>(<span class="title class_">Game</span>.<span class="property">spawns</span>[<span class="string">&#x27;Spawn1&#x27;</span>], <span class="variable constant_">RESOURCE_ENERGY</span>) == <span class="variable constant_">ERR_NOT_IN_RANGE</span>) &#123;</span><br><span class="line">                creep.<span class="title function_">moveTo</span>(<span class="title class_">Game</span>.<span class="property">spawns</span>[<span class="string">&#x27;Spawn1&#x27;</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="代码优化"><a href="#代码优化" class="headerlink" title="代码优化"></a>代码优化</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> roleHarvester = <span class="built_in">require</span>(<span class="string">&#x27;role.harvester&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">loop</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> name <span class="keyword">in</span> <span class="title class_">Game</span>.<span class="property">creeps</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> creep = <span class="title class_">Game</span>.<span class="property">creeps</span>[name];</span><br><span class="line">        roleHarvester.<span class="title function_">run</span>(creep);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> roleHarvester = &#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@param</span> &#123;<span class="type">Creep</span>&#125; creep **/</span></span><br><span class="line">    <span class="attr">run</span>: <span class="keyword">function</span>(<span class="params">creep</span>) &#123;</span><br><span class="line">	    <span class="keyword">if</span>(creep.<span class="property">store</span>.<span class="title function_">getFreeCapacity</span>() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> sources = creep.<span class="property">room</span>.<span class="title function_">find</span>(<span class="variable constant_">FIND_SOURCES</span>);</span><br><span class="line">            <span class="keyword">if</span>(creep.<span class="title function_">harvest</span>(sources[<span class="number">0</span>]) == <span class="variable constant_">ERR_NOT_IN_RANGE</span>) &#123;</span><br><span class="line">                creep.<span class="title function_">moveTo</span>(sources[<span class="number">0</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(creep.<span class="title function_">transfer</span>(<span class="title class_">Game</span>.<span class="property">spawns</span>[<span class="string">&#x27;Spawn1&#x27;</span>], <span class="variable constant_">RESOURCE_ENERGY</span>) == <span class="variable constant_">ERR_NOT_IN_RANGE</span>) &#123;</span><br><span class="line">                creep.<span class="title function_">moveTo</span>(<span class="title class_">Game</span>.<span class="property">spawns</span>[<span class="string">&#x27;Spawn1&#x27;</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = roleHarvester;</span><br></pre></td></tr></table></figure>

<h2 id="升级建筑"><a href="#升级建筑" class="headerlink" title="升级建筑"></a>升级建筑</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//生成机器人</span></span><br><span class="line"><span class="title class_">Game</span>.<span class="property">spawns</span>[<span class="string">&#x27;Spawn1&#x27;</span>].<span class="title function_">spawnCreep</span>( [<span class="variable constant_">WORK</span>, <span class="variable constant_">CARRY</span>, <span class="variable constant_">MOVE</span>], <span class="string">&#x27;Upgrader1&#x27;</span> );</span><br><span class="line"><span class="keyword">var</span> roleHarvester = <span class="built_in">require</span>(<span class="string">&#x27;role.harvester&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> roleUpgrader = <span class="built_in">require</span>(<span class="string">&#x27;role.upgrader&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">loop</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> name <span class="keyword">in</span> <span class="title class_">Game</span>.<span class="property">creeps</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> creep = <span class="title class_">Game</span>.<span class="property">creeps</span>[name];</span><br><span class="line">        <span class="keyword">if</span>(creep.<span class="property">memory</span>.<span class="property">role</span> == <span class="string">&#x27;harvester&#x27;</span>) &#123;</span><br><span class="line">            roleHarvester.<span class="title function_">run</span>(creep);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(creep.<span class="property">memory</span>.<span class="property">role</span> == <span class="string">&#x27;upgrader&#x27;</span>) &#123;</span><br><span class="line">            roleUpgrader.<span class="title function_">run</span>(creep);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> roleUpgrader = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@param</span> &#123;<span class="type">Creep</span>&#125; creep **/</span></span><br><span class="line">    <span class="attr">run</span>: <span class="keyword">function</span>(<span class="params">creep</span>) &#123;</span><br><span class="line">	    <span class="keyword">if</span>(creep.<span class="property">store</span>[<span class="variable constant_">RESOURCE_ENERGY</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> sources = creep.<span class="property">room</span>.<span class="title function_">find</span>(<span class="variable constant_">FIND_SOURCES</span>);</span><br><span class="line">            <span class="keyword">if</span>(creep.<span class="title function_">harvest</span>(sources[<span class="number">0</span>]) == <span class="variable constant_">ERR_NOT_IN_RANGE</span>) &#123;</span><br><span class="line">                creep.<span class="title function_">moveTo</span>(sources[<span class="number">0</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(creep.<span class="title function_">upgradeController</span>(creep.<span class="property">room</span>.<span class="property">controller</span>) == <span class="variable constant_">ERR_NOT_IN_RANGE</span>) &#123;</span><br><span class="line">                creep.<span class="title function_">moveTo</span>(creep.<span class="property">room</span>.<span class="property">controller</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = roleUpgrader;</span><br><span class="line"></span><br><span class="line"><span class="comment">//每个 creep 都有的 memory 属性，该属性允许在 creep 的“内存”中写入自定义信息。</span></span><br><span class="line"><span class="title class_">Game</span>.<span class="property">creeps</span>[<span class="string">&#x27;Harvester1&#x27;</span>].<span class="property">memory</span>.<span class="property">role</span> = <span class="string">&#x27;harvester&#x27;</span>;</span><br><span class="line"><span class="title class_">Game</span>.<span class="property">creeps</span>[<span class="string">&#x27;Upgrader1&#x27;</span>].<span class="property">memory</span>.<span class="property">role</span> = <span class="string">&#x27;upgrader&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//main</span></span><br><span class="line"><span class="keyword">var</span> roleHarvester = <span class="built_in">require</span>(<span class="string">&#x27;role.harvester&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> roleUpgrader = <span class="built_in">require</span>(<span class="string">&#x27;role.upgrader&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">loop</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> name <span class="keyword">in</span> <span class="title class_">Game</span>.<span class="property">creeps</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> creep = <span class="title class_">Game</span>.<span class="property">creeps</span>[name];</span><br><span class="line">        <span class="keyword">if</span>(creep.<span class="property">memory</span>.<span class="property">role</span> == <span class="string">&#x27;harvester&#x27;</span>) &#123;</span><br><span class="line">            roleHarvester.<span class="title function_">run</span>(creep);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(creep.<span class="property">memory</span>.<span class="property">role</span> == <span class="string">&#x27;upgrader&#x27;</span>) &#123;</span><br><span class="line">            roleUpgrader.<span class="title function_">run</span>(creep);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>eps32连接华为云iot，并且实现arkts控制点灯</title>
    <url>/2024/04/02/eps32%E8%BF%9E%E6%8E%A5%E5%8D%8E%E4%B8%BA%E4%BA%91iot%EF%BC%8C%E5%B9%B6%E4%B8%94%E5%AE%9E%E7%8E%B0arkts%E6%8E%A7%E5%88%B6%E7%82%B9%E7%81%AF/</url>
    <content><![CDATA[<h1 id="ESP32连接华为云"><a href="#ESP32连接华为云" class="headerlink" title="ESP32连接华为云"></a>ESP32连接华为云</h1><p>我使用的是arduinoied所写的代码，要注意，在mqtt请求华为云中，需要写心跳间隔，不然上云不了（client.setKeepAlive(60);  &#x2F;&#x2F;心跳间隔，很重要！！！）。代码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ArduinoJson.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WiFi.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;PubSubClient.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义 LED 和按键引脚</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> led_pin = <span class="number">48</span>; <span class="comment">// 根据你的实际硬件更改</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> button_pin = <span class="number">0</span>; <span class="comment">// 通常用于ESP32的引脚</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义 LED 状态变量，默认为假即低电平，通过它判断 LED 的状态是否改变过</span></span><br><span class="line"><span class="type">bool</span> led_status = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// WiFi 连接参数</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* ssid = <span class="string">&quot;LMJZ&quot;</span>;     <span class="comment">// 修改为你的WiFi名称</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* password = <span class="string">&quot;12345678&quot;</span>; <span class="comment">// 修改为你的WiFi密码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// MQTT 连接参数</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* mqttServer = <span class="string">&quot;f31531a1fe.iot-mqtts.cn-north-4.myhuaweicloud.com&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mqttPort = <span class="number">1883</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* clientId =<span class="string">&quot;65f5bd99fb8177243a4f32c3_wenshidu_0_0_2024033011&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* mqttUser =<span class="string">&quot;65f5bd99fb8177243a4f32c3_wenshidu&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* mqttPassword = <span class="string">&quot;def7f41de80e802a96a29f04eec1561c6a63057d2d0a0ed0aba966041ee6a5f1&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MQTT 客户端</span></span><br><span class="line">WiFiClient espClient;</span><br><span class="line">PubSubClient <span class="title function_">client</span><span class="params">(espClient)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MQTT 主题</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> device_id <span class="string">&quot;65f5bd99fb8177243a4f32c3_wenshidu&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> secret <span class="string">&quot;630aa442fa0fa9956ea95016189a5186&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Iot_link_Body_Format <span class="string">&quot;&#123;\&quot;services\&quot;:[&#123;\&quot;service_id\&quot;:\&quot;BasicData\&quot;,\&quot;properties\&quot;:&#123;%s&quot;</span></span></span><br><span class="line"><span class="comment">// 设备属性上报</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Iot_link_MQTT_Topic_Report <span class="string">&quot;$oc/devices/&quot;</span> device_id <span class="string">&quot;/sys/properties/report&quot;</span></span></span><br><span class="line"><span class="comment">// 接收平台下发的命令</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Iot_link_MQTT_Topic_Commands <span class="string">&quot;$oc/devices/&quot;</span> device_id <span class="string">&quot;/sys/commands/#&quot;</span> </span></span><br><span class="line"><span class="comment">// 设备响应平台的命令</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Iot_link_MQTT_Topic_CommandsRes <span class="string">&quot;$oc/devices/&quot;</span> device_id <span class="string">&quot;/sys/commands/response/request_id=&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 其他变量和函数声明</span></span><br><span class="line"><span class="type">int</span> data_temp = <span class="number">20</span>; <span class="comment">// 模拟上报的温度值</span></span><br><span class="line"><span class="type">long</span> lastMsg = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="comment">// 设置 LED 和按键引脚模式</span></span><br><span class="line">  pinMode(led_pin, OUTPUT);</span><br><span class="line">  pinMode(button_pin, INPUT_PULLUP);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// WiFi 初始化</span></span><br><span class="line">  Serial.begin(<span class="number">115200</span>);</span><br><span class="line">  WiFi.begin(ssid, password);</span><br><span class="line">  <span class="keyword">while</span> (WiFi.status() != WL_CONNECTED) &#123;</span><br><span class="line">    delay(<span class="number">500</span>);</span><br><span class="line">    Serial.println(<span class="string">&quot;Connecting to WiFi..&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  Serial.println(<span class="string">&quot;Connected to the WiFi network&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// MQTT 初始化</span></span><br><span class="line">  MQTT_Init();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="comment">// 检测按键状态并控制 LED</span></span><br><span class="line">  <span class="keyword">if</span> (digitalRead(button_pin) == LOW) &#123;</span><br><span class="line">    delay(<span class="number">100</span>); <span class="comment">// 去抖动</span></span><br><span class="line">    <span class="keyword">if</span> (digitalRead(button_pin) == LOW) &#123;</span><br><span class="line">      <span class="keyword">while</span>(digitalRead(button_pin) == LOW); <span class="comment">// 等待按钮释放</span></span><br><span class="line">      led_status = !led_status;</span><br><span class="line">      digitalWrite(led_pin, led_status ? HIGH : LOW);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// MQTT 连接和数据上报</span></span><br><span class="line">  <span class="keyword">if</span> (!client.connected()) &#123;</span><br><span class="line">    MQTT_Init();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    client.loop();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">long</span> now = millis();</span><br><span class="line">  <span class="keyword">if</span> (now - lastMsg &gt; <span class="number">5000</span>) &#123;</span><br><span class="line">    lastMsg = now;</span><br><span class="line">    MQTT_POST();</span><br><span class="line">    data_temp++; <span class="comment">// 递增温度值以模拟温度变化</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">MQTT_Init</span><span class="params">()</span> &#123;</span><br><span class="line">  client.setKeepAlive(<span class="number">60</span>);  <span class="comment">//心跳间隔，很重要！！！</span></span><br><span class="line">  client.setServer(mqttServer, mqttPort);</span><br><span class="line">  client.setCallback(callback);</span><br><span class="line">  <span class="keyword">while</span> (!client.connected()) &#123;</span><br><span class="line">    Serial.println(<span class="string">&quot;Attempting to connect to MQTT server...&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (client.connect(clientId, mqttUser, mqttPassword)) &#123;</span><br><span class="line">      Serial.println(<span class="string">&quot;Connected to MQTT server&quot;</span>);</span><br><span class="line">      <span class="comment">// 订阅命令主题</span></span><br><span class="line">      client.subscribe(Iot_link_MQTT_Topic_Commands);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      Serial.print(<span class="string">&quot;Failed to connect to MQTT server, state: &quot;</span>);</span><br><span class="line">      Serial.println(client.state());</span><br><span class="line">      delay(<span class="number">5000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">MQTT_POST</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">char</span> properties[<span class="number">50</span>];</span><br><span class="line">  <span class="type">char</span> jsonBuf[<span class="number">200</span>];</span><br><span class="line">  <span class="built_in">sprintf</span>(properties, <span class="string">&quot;\&quot;temperature\&quot;:%d&#125;&#125;]&#125;&quot;</span>, data_temp);</span><br><span class="line">  <span class="built_in">sprintf</span>(jsonBuf, Iot_link_Body_Format, properties);</span><br><span class="line">  client.publish(Iot_link_MQTT_Topic_Report, jsonBuf);</span><br><span class="line">  Serial.println(<span class="string">&quot;MQTT Publish OK!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">callback</span><span class="params">(<span class="type">char</span>* topic, byte* payload, <span class="type">unsigned</span> <span class="type">int</span> length)</span> &#123;</span><br><span class="line">  String recdata = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  Serial.<span class="built_in">printf</span>(<span class="string">&quot;接收到订阅的消息:主题为：%s\n&quot;</span>, topic); </span><br><span class="line">  Serial.print(<span class="string">&quot;数据内容：&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">    recdata += (<span class="type">char</span>)payload[i];</span><br><span class="line">  &#125;</span><br><span class="line">  Serial.println(recdata);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 解析JSON数据</span></span><br><span class="line">  DynamicJsonDocument <span class="title function_">jsonBuffer</span><span class="params">(<span class="number">1024</span>)</span>;</span><br><span class="line">  deserializeJson(jsonBuffer, recdata);</span><br><span class="line">  JsonObject obj = jsonBuffer.as&lt;JsonObject&gt;();</span><br><span class="line">  JsonObject paras = obj[<span class="string">&quot;paras&quot;</span>].as&lt;JsonObject&gt;();</span><br><span class="line">  String ledcom = paras[<span class="string">&quot;value&quot;</span>];</span><br><span class="line">  Serial.<span class="built_in">printf</span>(<span class="string">&quot;解析命令：%s\n&quot;</span>, ledcom.c_str());</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 解析request id，设备响应时的topic需要包含命令的request id，且会动态变化</span></span><br><span class="line">  String request_id = topic;</span><br><span class="line">  request_id.remove(<span class="number">0</span>, request_id.lastIndexOf(<span class="string">&#x27;=&#x27;</span>) + <span class="number">1</span>);</span><br><span class="line">  Serial.<span class="built_in">printf</span>(<span class="string">&quot;request_id：%s\n&quot;</span>, request_id.c_str());</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 命令设备响应</span></span><br><span class="line">  String response = <span class="string">&quot;&#123;&#125;&quot;</span>;</span><br><span class="line">  client.publish((Iot_link_MQTT_Topic_CommandsRes + request_id).c_str(), response.c_str());</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (ledcom == <span class="string">&quot;ON&quot;</span>) &#123;</span><br><span class="line">    digitalWrite(led_pin, LOW); <span class="comment">// 关闭LED</span></span><br><span class="line">    Serial.println(<span class="string">&quot;关灯&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ledcom == <span class="string">&quot;OFF&quot;</span>) &#123;</span><br><span class="line">    digitalWrite(led_pin, HIGH); <span class="comment">// 打开LED</span></span><br><span class="line">    Serial.println(<span class="string">&quot;开灯&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在鸿蒙开发中，要进行http请求，arkts代码</p>
<p>下面是ui代码：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Button</span>(<span class="string">&#x27;点击&#x27;</span>).<span class="title function_">onClick</span>(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">led</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">await</span> greenHousesHttpRequest.<span class="title function_">sendDeviceCommand</span>(<span class="string">&#x27;BasicData&#x27;</span>, <span class="string">&#x27;Switch&#x27;</span>, <span class="string">&#x27;OFF&#x27;</span>);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;LED已关闭&#x27;</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">led</span> = <span class="literal">false</span>; <span class="comment">// 更新LED状态为关闭</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">leddevice</span> = <span class="string">&#x27;离线&#x27;</span>; <span class="comment">// 更新设备状态显示为不在线</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;关闭LED失败&#x27;</span>, error);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">await</span> greenHousesHttpRequest.<span class="title function_">sendDeviceCommand</span>(<span class="string">&#x27;BasicData&#x27;</span>, <span class="string">&#x27;Switch&#x27;</span>, <span class="string">&#x27;ON&#x27;</span>);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;LED已点亮&#x27;</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">led</span> = <span class="literal">true</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">leddevice</span> = <span class="string">&#x27;在线&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;点亮LED失败&#x27;</span>, error);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).<span class="title function_">margin</span>(&#123;<span class="attr">top</span>:<span class="number">10</span>&#125;);</span><br></pre></td></tr></table></figure>

<p>http请求代码：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设备下发命令</span></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">sendDeviceCommand</span>(<span class="params">serviceId, commandName, commandValue</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">token</span>) &#123;</span><br><span class="line">      <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">getAuthToken</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> httpRequest = http.<span class="title function_">createHttp</span>();</span><br><span class="line">      <span class="keyword">const</span> url = <span class="string">&quot;https://f31531a1fe.iotda.cn-north-4.myhuaweicloud.com:443/v5/iot/34dd0bcb3a0b46fab400809bca1b6e3e/devices/65f5bd99fb8177243a4f32c3_wenshidu/commands&quot;</span></span><br><span class="line">      httpRequest.<span class="title function_">request</span>(url,&#123;</span><br><span class="line">        <span class="attr">method</span>: http.<span class="property">RequestMethod</span>.<span class="property">POST</span>,</span><br><span class="line">        <span class="attr">header</span>: &#123;</span><br><span class="line">          <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;X-Auth-Token&#x27;</span>: <span class="variable language_">this</span>.<span class="property">token</span> <span class="comment">// 确保已经获取了token</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">extraData</span>: &#123;</span><br><span class="line">          <span class="string">&quot;service_id&quot;</span>: serviceId,</span><br><span class="line">          <span class="string">&quot;command_name&quot;</span>: commandName,</span><br><span class="line">          <span class="string">&quot;paras&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;value&quot;</span>: commandValue</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">resp</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (resp.<span class="property">responseCode</span> == <span class="number">200</span>) &#123;</span><br><span class="line">          <span class="title function_">resolve</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(resp.<span class="property">result</span>.<span class="title function_">toString</span>()));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="title function_">reject</span>(<span class="string">&#x27;Failed to send command, response code: &#x27;</span> + resp.<span class="property">responseCode</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error sending command:&#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(error));</span><br><span class="line">        <span class="title function_">reject</span>(error);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>华为云IOT连接</category>
      </categories>
      <tags>
        <tag>华为云IOT</tag>
      </tags>
  </entry>
  <entry>
    <title>一、harmonyOS开发</title>
    <url>/2024/03/09/%E4%B8%80%E3%80%81HarmonyOS4%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h1 id="一、TS基础语法"><a href="#一、TS基础语法" class="headerlink" title="一、TS基础语法"></a>一、TS基础语法</h1><h2 id="二、声明变量"><a href="#二、声明变量" class="headerlink" title="二、声明变量"></a>二、声明变量</h2><p><img src="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/3/image_4497af838a16322eb31c1c79fe851949.png" alt="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/3/image_4497af838a16322eb31c1c79fe851949.png"></p>
<h2 id="二、条件控制"><a href="#二、条件控制" class="headerlink" title="二、条件控制"></a>二、条件控制</h2><p><img src="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/3/image_609945756c4e82937d021ea54447486a.png" alt="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/3/image_609945756c4e82937d021ea54447486a.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/3/image_46fffd1b2a4a75affe9ed2ccc9e59659.png" alt="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/3/image_46fffd1b2a4a75affe9ed2ccc9e59659.png"></p>
<h2 id="三、循环迭代"><a href="#三、循环迭代" class="headerlink" title="三、循环迭代"></a>三、循环迭代</h2><p><img src="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/3/image_9a5d00ad4674553a79dabd0fe52bbfc1.png" alt="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/3/image_9a5d00ad4674553a79dabd0fe52bbfc1.png"></p>
<h2 id="四、函数"><a href="#四、函数" class="headerlink" title="四、函数"></a>四、函数</h2><p><img src="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/3/image_5f9ef0934899a071ab9b7e909848d1b7.png" alt="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/3/image_5f9ef0934899a071ab9b7e909848d1b7.png"></p>
<h2 id="五、类和接口"><a href="#五、类和接口" class="headerlink" title="五、类和接口"></a>五、类和接口</h2><p><img src="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/3/image_d1fb365339ecda693696e196ceeaffdc.png" alt="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/3/image_d1fb365339ecda693696e196ceeaffdc.png"></p>
<h2 id="六、模块"><a href="#六、模块" class="headerlink" title="六、模块"></a>六、模块</h2><p><img src="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/3/image_3eed512d644baa5ffb71ba3c55d4fc44.png" alt="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/3/image_3eed512d644baa5ffb71ba3c55d4fc44.png"></p>
<h2 id="七、UI布局分析"><a href="#七、UI布局分析" class="headerlink" title="七、UI布局分析"></a>七、UI布局分析</h2><p><img src="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/3/image_35f78e7774daaad2fe2b693f119a05be.png" alt="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/3/image_35f78e7774daaad2fe2b693f119a05be.png"></p>
<h1 id="八、image组件"><a href="#八、image组件" class="headerlink" title="八、image组件"></a>八、image组件</h1><p><img src="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/3/image_89c4675342542ff569532ec4078fed68.png" alt="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/3/image_89c4675342542ff569532ec4078fed68.png"></p>
<h1 id="一些代码示例"><a href="#一些代码示例" class="headerlink" title="一些代码示例"></a>一些代码示例</h1><p><img src="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/3/image_5a89b9978754b4e47e8174d9932ba65b.png" alt="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/3/image_5a89b9978754b4e47e8174d9932ba65b.png"></p>
]]></content>
      <categories>
        <category>鸿蒙开发</category>
      </categories>
      <tags>
        <tag>APP开发</tag>
      </tags>
  </entry>
  <entry>
    <title> 一篇牢骚</title>
    <url>/2024/03/30/%E4%B8%80%E7%AF%87%E7%89%A2%E9%AA%9A/</url>
    <content><![CDATA[<h1 id="愿我此生脚步不停，览尽世间美景。即使路途遥远且艰难，至少，至少，我经历过。以巽为名，行遍千山万水，看尽人间青山。青山不言，我自知晓其壮美。"><a href="#愿我此生脚步不停，览尽世间美景。即使路途遥远且艰难，至少，至少，我经历过。以巽为名，行遍千山万水，看尽人间青山。青山不言，我自知晓其壮美。" class="headerlink" title="愿我此生脚步不停，览尽世间美景。即使路途遥远且艰难，至少，至少，我经历过。以巽为名，行遍千山万水，看尽人间青山。青山不言，我自知晓其壮美。"></a>愿我此生脚步不停，览尽世间美景。即使路途遥远且艰难，至少，至少，我经历过。以巽为名，行遍千山万水，看尽人间青山。青山不言，我自知晓其壮美。</h1><h1 id="来自抖音博主hx888888000"><a href="#来自抖音博主hx888888000" class="headerlink" title="来自抖音博主hx888888000"></a>来自抖音博主<strong>hx888888000</strong></h1><h2 id="长穿毕"><a href="#长穿毕" class="headerlink" title="长穿毕"></a><strong>长穿毕</strong></h2><p><img src="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/3/1d0eb9af83664b212338faae7d440df_779743451a157de28e8c8829ae4fe605.jpg" alt="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/3/1d0eb9af83664b212338faae7d440df_779743451a157de28e8c8829ae4fe605.jpg"></p>
<p><img src="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/3/d111f90f43e69bd4d1ea5806caa44f7_1d6a4e76841ff9d93f24f865ab4fa3d9.jpg" alt="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/3/d111f90f43e69bd4d1ea5806caa44f7_1d6a4e76841ff9d93f24f865ab4fa3d9.jpg"></p>
<p><img src="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/3/5f8bdcb82439a8f5b73a67fff41cb4e_5434663cb0eee6c014428b2bedbf70e7.jpg" alt="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/3/5f8bdcb82439a8f5b73a67fff41cb4e_5434663cb0eee6c014428b2bedbf70e7.jpg"></p>
<p><img src="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/3/8a8e81c8ca5fbeb9ac2ffe066e46a07_6a781df38e8873e0ad1488fc3151b71e.jpg" alt="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/3/8a8e81c8ca5fbeb9ac2ffe066e46a07_6a781df38e8873e0ad1488fc3151b71e.jpg"></p>
<h1 id="来自抖音博主zkai6999"><a href="#来自抖音博主zkai6999" class="headerlink" title="来自抖音博主zkai6999"></a>来自抖音博主zkai6999</h1><h2 id="那拉提"><a href="#那拉提" class="headerlink" title="那拉提"></a>那拉提</h2><p><img src="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/3/6b06a76b99a4f86869845bd01d057d8_e1d5262643ad7aa79e7a2cd1b8f69525.jpg" alt="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/3/6b06a76b99a4f86869845bd01d057d8_e1d5262643ad7aa79e7a2cd1b8f69525.jpg"></p>
<p><img src="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/3/d2492dba415b90088096ad8e3c5e4a1_4967f91082ce5adfcd8c159b28b723b3.jpg" alt="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/3/d2492dba415b90088096ad8e3c5e4a1_4967f91082ce5adfcd8c159b28b723b3.jpg"></p>
<p><img src="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/3/c84cd6552b0bc71f923f11c06e15733_32f923434cc1bb7d7d5cac4b5fed3d51.jpg" alt="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/3/c84cd6552b0bc71f923f11c06e15733_32f923434cc1bb7d7d5cac4b5fed3d51.jpg"></p>
<h1 id="来自抖音博主zkai6999-1"><a href="#来自抖音博主zkai6999-1" class="headerlink" title="来自抖音博主zkai6999"></a>来自抖音博主zkai6999</h1><h2 id="阿勒泰"><a href="#阿勒泰" class="headerlink" title="阿勒泰"></a>阿勒泰</h2><p><img src="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/3/3b921a2a751f23b2e4618a53af9ff15_8380ac733a7acc2caa084b12cec2eaa6.jpg" alt="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/3/3b921a2a751f23b2e4618a53af9ff15_8380ac733a7acc2caa084b12cec2eaa6.jpg"></p>
<p><img src="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/3/86a718a9601a2ccea307145ef4e2d65_588dafa448a4d062c41649fc2e4f47c4.jpg" alt="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/3/86a718a9601a2ccea307145ef4e2d65_588dafa448a4d062c41649fc2e4f47c4.jpg"></p>
<p><img src="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/3/acbdb3a8d851258b290e1754c5c8890_f20bd19c22c344db52714613ba982157.jpg" alt="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/3/acbdb3a8d851258b290e1754c5c8890_f20bd19c22c344db52714613ba982157.jpg"></p>
]]></content>
  </entry>
  <entry>
    <title>关于使用wsl使用idf提供编译速度遇到的问题</title>
    <url>/2024/04/20/%E5%85%B3%E4%BA%8E%E4%BD%BF%E7%94%A8wsl%E4%BD%BF%E7%94%A8idf%E6%8F%90%E4%BE%9B%E7%BC%96%E8%AF%91%E9%80%9F%E5%BA%A6%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/4/image_5cd7c19bd7b2e43bbe49644b5f332987.png" alt="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/4/image_5cd7c19bd7b2e43bbe49644b5f332987.png"></p>
<p>在wsl的ubuntu安装idf遇到没有串口的报错，是因为wsl不自带usb的驱动，需要手动安装</p>
<p>教程使用他人的：<a href="https://blog.csdn.net/qq_40695642/article/details/127270039">https://blog.csdn.net/qq_40695642/article/details/127270039</a></p>
]]></content>
  </entry>
  <entry>
    <title>许久没有发文章了</title>
    <url>/2024/09/04/%E5%85%B3%E4%BA%8E%E5%9C%A8%E7%89%A9%E8%81%94%E7%BD%91%E7%AB%9E%E8%B5%9B%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%83%B3/</url>
    <content><![CDATA[<p>从四月份到八月份的比赛结束，取得了华东赛区一等奖和全国总决赛二等奖。说起来，也是跟在梦中似的~没有想过真的可以进去国赛，也算是吃到了赛道的福利了。在华东赛区和总决赛的作品演示室看到他们的作品，看的我都自卑了，很高级，我们的作品很简陋，太简陋了，搞得我都想跑了 ~</p>
<p><img src="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/9/bc593d6f5bda4e44204e5044a99a5b7_37609e80403560c5c5f3bd8b9a7ee3d1.jpg" alt="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/9/bc593d6f5bda4e44204e5044a99a5b7_37609e80403560c5c5f3bd8b9a7ee3d1.jpg"></p>
<p>我负责的是写APP和数据大屏，但是连整合单片机的部分都是我来写的，一个字“累”！写鸿蒙APP，也是只学习了三天ArkTs就直接开始写了，ArkTs也是基于TS来的，与JS相对，TS确实简单很多，我主要是有基础啦。总结就是，UI很烦很烦！！！没有艺术细胞的我，画UI简直是酷刑！！！</p>
<p><img src="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/9/image_8070321a721cd749fb34e912d4627942.png" alt="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/9/image_8070321a721cd749fb34e912d4627942.png"></p>
<p>整合单片机的也是一个折磨，两个队友的代码习惯不一样，不能直接调用函数，而且出现的bug最多的就是单片机……语音，WIFI，LoRa这部分都是我来的，有时候LoRa很奇怪，节点能发数据，但是网关收不到，在华东赛区的时候出现这个问题，吓得我手都在抖哈哈哈。</p>
<p>数据大屏这部分没啥好说的，用的是低代码，会搞Http请求就没有任何问题了，挺简单的。</p>
<p>在总决赛的之前，临时买了一个ESP32Cam，缺点就是卡(供电需要5V2A的，他的烧录板没有！！！)，清晰度倒还好，加入了一个火焰检测，本来是加入烟雾的，摄像头模糊，老是识别到模糊的地方是烟雾，可恶。ESP32Cam视频流转成一个服务器地址，Python再用OpenCV获取，再加入YOLOV8训练的模型就可以了，不过这些部分不是熟悉，实现效果有就行啦。不过在比赛的时候，没有演示出来。</p>
<p><img src="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/9/6e93328e4b1f132fcd13d6c4069aab0_93404f4b35ef661ccdc28e12069e98c8.jpg" alt="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/9/6e93328e4b1f132fcd13d6c4069aab0_93404f4b35ef661ccdc28e12069e98c8.jpg"></p>
]]></content>
  </entry>
  <entry>
    <title>利用MQTT连接华为IOT平台，进行数据上报与下发</title>
    <url>/2024/03/09/%E5%88%A9%E7%94%A8MQTT%E8%BF%9E%E6%8E%A5%E5%8D%8E%E4%B8%BAIOT%E5%B9%B3%E5%8F%B0%EF%BC%8C%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E4%B8%8A%E6%8A%A5%E4%B8%8E%E4%B8%8B%E5%8F%91/</url>
    <content><![CDATA[<h1 id="一、查看接入信息"><a href="#一、查看接入信息" class="headerlink" title="一、查看接入信息"></a>一、查看接入信息</h1><p><img src="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/3/image_6721540a5fccd555db65a98741e70716.png" alt="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/3/image_6721540a5fccd555db65a98741e70716.png"></p>
<h1 id="二、创建产品"><a href="#二、创建产品" class="headerlink" title="二、创建产品"></a>二、创建产品</h1><p><img src="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/3/image_ba9eab465891adb5fd677dcccd8394f2.png" alt="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/3/image_ba9eab465891adb5fd677dcccd8394f2.png"></p>
<h1 id="三、注册设备"><a href="#三、注册设备" class="headerlink" title="三、注册设备"></a>三、注册设备</h1><p><img src="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/3/image_c6b568b4ff35a2d66719c5489aeb8418.png" alt="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/3/image_c6b568b4ff35a2d66719c5489aeb8418.png"></p>
]]></content>
      <categories>
        <category>华为IOT平台连接</category>
      </categories>
      <tags>
        <tag>HarmonyOS</tag>
      </tags>
  </entry>
  <entry>
    <title>大学生活</title>
    <url>/2024/02/17/%E5%A4%A7%E5%AD%A6%E7%94%9F%E6%B4%BB/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>阅读</category>
      </categories>
  </entry>
  <entry>
    <title>技能大赛之Ubuntu维护</title>
    <url>/2023/10/30/%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E4%B9%8BUbuntu%E7%BB%B4%E6%8A%A4/</url>
    <content><![CDATA[<p><strong>如果是首次进入需要 sudo passwd root 启用 root 用户</strong></p>
<h2 id="一、修改网络-IP-地址"><a href="#一、修改网络-IP-地址" class="headerlink" title="一、修改网络 IP 地址"></a>一、修改网络 IP 地址</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1、lm@lm-virtual-machine:~/桌面$ su root</span><br><span class="line">密码：</span><br><span class="line">2、root@lm-virtual-machine:/home/lm/桌面<span class="comment"># cd /etc/netplan/</span></span><br><span class="line">3、root@lm-virtual-machine:/etc/netplan<span class="comment"># ls</span></span><br><span class="line">01-network-manager-all.yaml</span><br><span class="line">4、root@lm-virtual-machine:/etc/netplan<span class="comment"># vim 01-network-manager-all.yaml</span></span><br><span class="line"><span class="comment">#键盘点击i，进行修改，&quot;esc&quot;退出编辑，输入&quot;:wq&quot;退出回车保存。输入&quot;netplan apply&quot;,ifconfig可以查看是否修改成功</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">network:</span><br><span class="line">　version: 2</span><br><span class="line">　ethernets:</span><br><span class="line">　　ens5:</span><br><span class="line">　　dhcp4: no</span><br><span class="line">　　addresses: [192.168.1.230/24]</span><br><span class="line">　　gateway4: 192.168.1.254</span><br><span class="line">　　nameservers:</span><br><span class="line">　　　addresses: [8.8.4.4,8.8.8.8]</span><br></pre></td></tr></table></figure>

<h2 id="二、使用命令查询磁盘空间使用情况-【df】"><a href="#二、使用命令查询磁盘空间使用情况-【df】" class="headerlink" title="二、使用命令查询磁盘空间使用情况 【df】"></a>二、使用命令查询磁盘空间使用情况 【df】</h2><p><img src="/../assets/%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E4%B9%8BUbuntu%E7%BB%B4%E6%8A%A4/1698852278392.png" alt="1698852278392"></p>
<h2 id="三、命令执行的历史记录【history】"><a href="#三、命令执行的历史记录【history】" class="headerlink" title="三、命令执行的历史记录【history】"></a>三、命令执行的历史记录【history】</h2><p><img src="/../assets/%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E4%B9%8BUbuntu%E7%BB%B4%E6%8A%A4/1698852341664.png" alt="1698852341664"></p>
<h2 id="四、配置允许-tcp-协议通过-eth0-网卡的-80-端口进入服务器"><a href="#四、配置允许-tcp-协议通过-eth0-网卡的-80-端口进入服务器" class="headerlink" title="四、配置允许 tcp 协议通过 eth0 网卡的 80 端口进入服务器"></a>四、配置允许 tcp 协议通过 eth0 网卡的 80 端口进入服务器</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iptables -A INPUT -p tcp --dport 80 -i th0 -j ACCEPT</span><br><span class="line">iptables -L -n</span><br></pre></td></tr></table></figure>

<p><img src="/../assets/%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E4%B9%8BUbuntu%E7%BB%B4%E6%8A%A4/1698852524750.png" alt="1698852524750"></p>
<h2 id="五、开启系统简单防火墙功能"><a href="#五、开启系统简单防火墙功能" class="headerlink" title="五、开启系统简单防火墙功能"></a>五、开启系统简单防火墙功能</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ufw <span class="built_in">enable</span></span><br><span class="line">ufw status</span><br></pre></td></tr></table></figure>

<p><img src="/../assets/%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E4%B9%8BUbuntu%E7%BB%B4%E6%8A%A4/1698852634735.png" alt="1698852634735"></p>
<h2 id="六、修改时区为中国"><a href="#六、修改时区为中国" class="headerlink" title="六、修改时区为中国"></a>六、修改时区为中国</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tzselect</span><br></pre></td></tr></table></figure>

<p><img src="/../assets/%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E4%B9%8BUbuntu%E7%BB%B4%E6%8A%A4/1698852764405.png" alt="1698852764405"></p>
<h2 id="七、查看当前系统的内核版本"><a href="#七、查看当前系统的内核版本" class="headerlink" title="七、查看当前系统的内核版本"></a>七、查看当前系统的内核版本</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">uname -a</span><br></pre></td></tr></table></figure>

<p><img src="/../assets/%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E4%B9%8BUbuntu%E7%BB%B4%E6%8A%A4/1698852836682.png" alt="1698852836682"></p>
<h2 id="八、查看系统安装包的统计信息"><a href="#八、查看系统安装包的统计信息" class="headerlink" title="八、查看系统安装包的统计信息"></a>八、查看系统安装包的统计信息</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-cache stats</span><br></pre></td></tr></table></figure>

<p><img src="/../assets/%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E4%B9%8BUbuntu%E7%BB%B4%E6%8A%A4/1698853016548.png" alt="1698853016548"></p>
<h2 id="九、查看-home-目录占用空间"><a href="#九、查看-home-目录占用空间" class="headerlink" title="九、查看&#x2F;home 目录占用空间"></a>九、查看&#x2F;home 目录占用空间</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">du</span> -sh</span><br></pre></td></tr></table></figure>

<p><img src="/../assets/%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E4%B9%8BUbuntu%E7%BB%B4%E6%8A%A4/1698853060624.png" alt="1698853060624"></p>
<h2 id="十、系统内存的使用情况"><a href="#十、系统内存的使用情况" class="headerlink" title="十、系统内存的使用情况"></a>十、系统内存的使用情况</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">free</span><br></pre></td></tr></table></figure>

<p><img src="/../assets/%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E4%B9%8BUbuntu%E7%BB%B4%E6%8A%A4/1698853106741.png" alt="1698853106741"></p>
<h2 id="十一、修改-test-文件夹权限为-755"><a href="#十一、修改-test-文件夹权限为-755" class="headerlink" title="十一、修改 test 文件夹权限为 755"></a>十一、修改 test 文件夹权限为 755</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir xxx</span><br><span class="line">      创建文件夹</span><br><span class="line">chmod xxx xxx</span><br><span class="line">    修改后文件夹名字  修改前</span><br></pre></td></tr></table></figure>

<p><img src="/../assets/%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E4%B9%8BUbuntu%E7%BB%B4%E6%8A%A4/1698853202599.png" alt="1698853202599"></p>
<h2 id="十二、配置用户锁策略，用户尝试登录错误-5-次后锁定用户-5-分钟"><a href="#十二、配置用户锁策略，用户尝试登录错误-5-次后锁定用户-5-分钟" class="headerlink" title="十二、配置用户锁策略，用户尝试登录错误 5 次后锁定用户 5 分钟"></a>十二、配置用户锁策略，用户尝试登录错误 5 次后锁定用户 5 分钟</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">auth required pam_tallu.so deny=5 unlock_time=300 even_deny_root root_unlock_time=300</span><br><span class="line"><span class="comment">#文件夹在etc/pam.d/login</span></span><br><span class="line"><span class="comment">#deny=尝试次数 unlock_time=被锁定，多少秒自动解锁</span></span><br><span class="line"><span class="comment">#even_deny_root=对root用户生效 root_unlock_time=被锁后多少秒解锁</span></span><br></pre></td></tr></table></figure>

<p><img src="/../assets/%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E4%B9%8BUbuntu%E7%BB%B4%E6%8A%A4/1698853824171.png" alt="1698853824171"></p>
<h2 id="十三、配置账户密码最短使用期限为-10-天，最长使用期限为-90-天"><a href="#十三、配置账户密码最短使用期限为-10-天，最长使用期限为-90-天" class="headerlink" title="十三、配置账户密码最短使用期限为 10 天，最长使用期限为 90 天"></a>十三、配置账户密码最短使用期限为 10 天，最长使用期限为 90 天</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo chage -M 90 -m 10 liu</span><br><span class="line"><span class="comment">#修改</span></span><br><span class="line"><span class="comment">#查看</span></span><br><span class="line">sudo chage -l liu</span><br></pre></td></tr></table></figure>

<h2 id="十四、配置用户使用-ssh-登录边缘服务器有“For-authorized-users-only”"><a href="#十四、配置用户使用-ssh-登录边缘服务器有“For-authorized-users-only”" class="headerlink" title="十四、配置用户使用 ssh 登录边缘服务器有“For authorized users only”"></a>十四、配置用户使用 ssh 登录边缘服务器有“For authorized users only”</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /ect/motd</span><br></pre></td></tr></table></figure>

<p><img src="/../assets/%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E4%B9%8BUbuntu%E7%BB%B4%E6%8A%A4/1698884808296.png" alt="1698884808296"></p>
<h2 id="十五、查询系统运行时间及负载的状态"><a href="#十五、查询系统运行时间及负载的状态" class="headerlink" title="十五、查询系统运行时间及负载的状态"></a>十五、查询系统运行时间及负载的状态</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">uptime</span><br></pre></td></tr></table></figure>

<p><img src="/../assets/%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E4%B9%8BUbuntu%E7%BB%B4%E6%8A%A4/1698884864394.png" alt="1698884864394"></p>
<h2 id="十六、统计系统-IO-信息（系统资源）"><a href="#十六、统计系统-IO-信息（系统资源）" class="headerlink" title="十六、统计系统 IO 信息（系统资源）"></a>十六、统计系统 IO 信息（系统资源）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">top</span><br></pre></td></tr></table></figure>

<p><img src="/../assets/%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E4%B9%8BUbuntu%E7%BB%B4%E6%8A%A4/1698884920652.png" alt="1698884920652"></p>
<h2 id="十七、查看当前登录系统的用户信息"><a href="#十七、查看当前登录系统的用户信息" class="headerlink" title="十七、查看当前登录系统的用户信息"></a>十七、查看当前登录系统的用户信息</h2><p><img src="/../assets/%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E4%B9%8BUbuntu%E7%BB%B4%E6%8A%A4/1698885625168.png" alt="1698885625168"></p>
<h2 id="十八、ubuntu-登录开通-ssh-server-和-root-用户登录权限"><a href="#十八、ubuntu-登录开通-ssh-server-和-root-用户登录权限" class="headerlink" title="十八、ubuntu 登录开通 ssh-server 和 root 用户登录权限"></a>十八、ubuntu 登录开通 ssh-server 和 root 用户登录权限</h2><p><img src="/../assets/%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E4%B9%8BUbuntu%E7%BB%B4%E6%8A%A4/1705237320499.png" alt="1705237320499"></p>
<p><img src="/../assets/%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E4%B9%8BUbuntu%E7%BB%B4%E6%8A%A4/1698886136723.png" alt="1698886136723"></p>
<p><img src="/../assets/%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E4%B9%8BUbuntu%E7%BB%B4%E6%8A%A4/1698886175641.png" alt="1698886175641"></p>
<p><strong>sudo systemctl start ssh</strong> 启动 ssh 服务</p>
<h2 id="十九、修改-root-用户密码"><a href="#十九、修改-root-用户密码" class="headerlink" title="十九、修改 root 用户密码"></a>十九、修改 root 用户密码</h2><p><img src="/../assets/%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E4%B9%8BUbuntu%E7%BB%B4%E6%8A%A4/1698886297484.png" alt="1698886297484"></p>
<h2 id="二十、切换当前用户为-root-用户"><a href="#二十、切换当前用户为-root-用户" class="headerlink" title="二十、切换当前用户为 root 用户"></a>二十、切换当前用户为 root 用户</h2><p><img src="/../assets/%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E4%B9%8BUbuntu%E7%BB%B4%E6%8A%A4/1698886334325.png" alt="1698886334325"></p>
<h2 id="二十一、查看当前所有已连接端口"><a href="#二十一、查看当前所有已连接端口" class="headerlink" title="二十一、查看当前所有已连接端口"></a>二十一、查看当前所有已连接端口</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netstar -ntlp</span><br></pre></td></tr></table></figure>

<p><img src="/../assets/%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E4%B9%8BUbuntu%E7%BB%B4%E6%8A%A4/1698886374037.png" alt="1698886374037"></p>
<h2 id="二十二、查看指定端口状态"><a href="#二十二、查看指定端口状态" class="headerlink" title="二十二、查看指定端口状态"></a>二十二、查看指定端口状态</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netstat -ntlplgrep 3306</span><br></pre></td></tr></table></figure>

<p><img src="/../assets/%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E4%B9%8BUbuntu%E7%BB%B4%E6%8A%A4/1698888006633.png" alt="1698888006633"></p>
<h2 id="二十三、查看所有进程信息"><a href="#二十三、查看所有进程信息" class="headerlink" title="二十三、查看所有进程信息"></a>二十三、查看所有进程信息</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps -aux</span><br></pre></td></tr></table></figure>

<p><img src="/../assets/%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E4%B9%8BUbuntu%E7%BB%B4%E6%8A%A4/1698888087310.png" alt="1698888087310"></p>
<h2 id="二十四、查看指定进程信息"><a href="#二十四、查看指定进程信息" class="headerlink" title="二十四、查看指定进程信息"></a>二十四、查看指定进程信息</h2><p><img src="/../assets/%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E4%B9%8BUbuntu%E7%BB%B4%E6%8A%A4/1698888389492.png" alt="1698888389492"></p>
<h2 id="二十五、终端查找文件"><a href="#二十五、终端查找文件" class="headerlink" title="二十五、终端查找文件"></a>二十五、终端查找文件</h2><p><strong>在当前目录中搜索</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find -name &quot;文件名&quot;</span><br></pre></td></tr></table></figure>

<p><strong>在不切换任何文件夹搜索，必须在命令中声明文件所在目录路劲</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find /路径/ -name &quot;文件名&quot;</span><br></pre></td></tr></table></figure>

<p><strong>如果在终端搜索文件</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find -name &quot;文件名&quot;</span><br></pre></td></tr></table></figure>

<p><strong>如果在终端搜索带某字符的文件</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find / -type f -name &quot;*DB*&quot;</span><br></pre></td></tr></table></figure>

<p><img src="/../assets/%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E4%B9%8BUbuntu%E7%BB%B4%E6%8A%A4/1700143228913.png" alt="1700143228913"></p>
<h2 id="二十六、在终端查看-sql-文件的记录"><a href="#二十六、在终端查看-sql-文件的记录" class="headerlink" title="二十六、在终端查看 sql 文件的记录"></a>二十六、在终端查看 sql 文件的记录</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">head -n 文件名.sql</span><br></pre></td></tr></table></figure>

<p><img src="/../assets/%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E4%B9%8BUbuntu%E7%BB%B4%E6%8A%A4/1700144597727.png" alt="1700144597727"></p>
<h2 id="二十七、-使用命令查看要求上传-sql-文件的内容中-包含“xxx”信息的记录行。"><a href="#二十七、-使用命令查看要求上传-sql-文件的内容中-包含“xxx”信息的记录行。" class="headerlink" title="二十七、 使用命令查看要求上传 sql 文件的内容中 包含“xxx”信息的记录行。"></a>二十七、 使用命令查看要求上传 sql 文件的内容中 包含“xxx”信息的记录行。</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grep &quot;xxx&quot; xxx.sql</span><br></pre></td></tr></table></figure>

<p><img src="/../assets/%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E4%B9%8BUbuntu%E7%BB%B4%E6%8A%A4/1700145383555.png" alt="1700145383555"></p>
<h2 id="二十八、在-Ubuntu-的终端中使用命令查看要求上传-sql-文件内容并显示行号。"><a href="#二十八、在-Ubuntu-的终端中使用命令查看要求上传-sql-文件内容并显示行号。" class="headerlink" title="二十八、在 Ubuntu 的终端中使用命令查看要求上传 sql 文件内容并显示行号。"></a>二十八、在 Ubuntu 的终端中使用命令查看要求上传 sql 文件内容并显示行号。</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat -n xx.sql</span><br></pre></td></tr></table></figure>

<p><img src="/../assets/%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E4%B9%8BUbuntu%E7%BB%B4%E6%8A%A4/1700145504953.png" alt="1700145504953"></p>
<h2 id="二十九、在-Ubuntu-的终端中通过-iptables-配置规则链：允许本机开放-TCP-端口-5000-6000"><a href="#二十九、在-Ubuntu-的终端中通过-iptables-配置规则链：允许本机开放-TCP-端口-5000-6000" class="headerlink" title="二十九、在 Ubuntu 的终端中通过 iptables 配置规则链：允许本机开放 TCP 端口 5000-6000"></a>二十九、在 Ubuntu 的终端中通过 iptables 配置规则链：允许本机开放 TCP 端口 5000-6000</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iptables -A INPUT -p tcp --match multiport --sports 5000:6000 -j ACCEPT</span><br><span class="line"><span class="comment"># 如果需要重启后重新起效  iptables-save &gt; /etc/iptables/rules.v4</span></span><br></pre></td></tr></table></figure>

<h2 id="三十、设置账号密码的最小长度"><a href="#三十、设置账号密码的最小长度" class="headerlink" title="三十、设置账号密码的最小长度"></a>三十、设置账号密码的最小长度</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/pam.d/common-password</span><br></pre></td></tr></table></figure>

<p><img src="/../assets/%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E4%B9%8BUbuntu%E7%BB%B4%E6%8A%A4/1701329835846.png" alt="1701329835846"></p>
<h2 id="三十一、为-MySQL-配置远程访问功能，以便任何-IP-的客户端都能访问数据库"><a href="#三十一、为-MySQL-配置远程访问功能，以便任何-IP-的客户端都能访问数据库" class="headerlink" title="三十一、为 MySQL 配置远程访问功能，以便任何 IP 的客户端都能访问数据库"></a>三十一、为 MySQL 配置远程访问功能，以便任何 IP 的客户端都能访问数据库</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置用户信息</span></span><br><span class="line">mysql -u root -p</span><br><span class="line">ALTER USER <span class="string">&#x27;username&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED WITH <span class="string">&#x27;mysql_native_password&#x27;</span> BY <span class="string">&#x27;new_password&#x27;</span>;</span><br><span class="line"><span class="comment">#先配置mysql文件</span></span><br><span class="line">sudo nano /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class="line"><span class="comment">#添加</span></span><br><span class="line">bind-address = 0.0.0.0</span><br><span class="line"><span class="comment">#更改用户权限</span></span><br><span class="line">CREATE USER <span class="string">&#x27;username&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;password&#x27;</span>;</span><br><span class="line">            <span class="comment">#用户名字 #允许任何ip连接         #密码</span></span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO <span class="string">&#x27;username&#x27;</span>@<span class="string">&#x27;%&#x27;</span> WITH GRANT OPTION;</span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line"><span class="comment">#重启数据库</span></span><br><span class="line">sudo systemctl restart mysql</span><br><span class="line"><span class="comment">#查询是否生效</span></span><br><span class="line">SELECT user,authentication_string,host FROM mysql.user;</span><br></pre></td></tr></table></figure>

<p><img src="/../assets/%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E4%B9%8BUbuntu%E7%BB%B4%E6%8A%A4/1701523808071.png" alt="1701523808071"></p>
<p><strong>开启成功</strong></p>
<p><img src="/../assets/%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E4%B9%8BUbuntu%E7%BB%B4%E6%8A%A4/1701524538009.png" alt="1701524538009"></p>
<h2 id="三十二、命令行查询网卡-eth0-的工作状态"><a href="#三十二、命令行查询网卡-eth0-的工作状态" class="headerlink" title="三十二、命令行查询网卡 eth0 的工作状态"></a>三十二、命令行查询网卡 eth0 的工作状态</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ifconfig eth0</span><br></pre></td></tr></table></figure>

<h2 id="三十三、Xshell-登录-Ubuntu"><a href="#三十三、Xshell-登录-Ubuntu" class="headerlink" title="三十三、Xshell 登录 Ubuntu"></a>三十三、Xshell 登录 Ubuntu</h2><p><img src="/../assets/%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E4%B9%8BUbuntu%E7%BB%B4%E6%8A%A4/1705415011698.png" alt="1705415011698"></p>
<p><img src="/../assets/%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E4%B9%8BUbuntu%E7%BB%B4%E6%8A%A4/1705415023009.png" alt="1705415023009"></p>
<h2 id="三十四、删除指令"><a href="#三十四、删除指令" class="headerlink" title="三十四、删除指令"></a>三十四、删除指令</h2><p><img src="/../assets/%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E4%B9%8BUbuntu%E7%BB%B4%E6%8A%A4/1705416981495.png" alt="1705416981495"></p>
<h2 id="三十五、在-home-iotuser-目录下创建-aaa-bbb-两个目录，在-aaa-目录下添加-a-txt-文件，在-bbb-目录下添加-ccc-目录和-b-txt-文件-在-ccc-目录下添加-c-txt-文件。-命令行将-bbb-文件夹权限设置为：每个人都有读和写以及执行的权限（包含子目录）。-合并压缩-aaa-和-bbb-目录为-xxx-tar-gz。"><a href="#三十五、在-home-iotuser-目录下创建-aaa-bbb-两个目录，在-aaa-目录下添加-a-txt-文件，在-bbb-目录下添加-ccc-目录和-b-txt-文件-在-ccc-目录下添加-c-txt-文件。-命令行将-bbb-文件夹权限设置为：每个人都有读和写以及执行的权限（包含子目录）。-合并压缩-aaa-和-bbb-目录为-xxx-tar-gz。" class="headerlink" title="三十五、在&#x2F;home&#x2F;iotuser 目录下创建 aaa,bbb 两个目录，在 aaa 目录下添加 a.txt 文件，在 bbb 目录下添加 ccc 目录和 b.txt 文件,在 ccc 目录下添加 c.txt 文件。 命令行将 bbb 文件夹权限设置为：每个人都有读和写以及执行的权限（包含子目录）。 合并压缩 aaa 和 bbb 目录为 xxx.tar.gz。"></a>三十五、在&#x2F;home&#x2F;iotuser 目录下创建 aaa,bbb 两个目录，在 aaa 目录下添加 a.txt 文件，在 bbb 目录下添加 ccc 目录和 b.txt 文件,在 ccc 目录下添加 c.txt 文件。 命令行将 bbb 文件夹权限设置为：每个人都有读和写以及执行的权限（包含子目录）。 合并压缩 aaa 和 bbb 目录为 xxx.tar.gz。</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /home/iotuser/aaa /home/iotuser/bbb/ccc</span><br><span class="line"><span class="built_in">touch</span> /home/iotuser/aaa/a.txt</span><br><span class="line"><span class="built_in">touch</span> /home/iotuser/bbb/b.txt</span><br><span class="line"><span class="built_in">touch</span> /home/iotuser/bbb/ccc/c.txt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">chmod</span> -R 777 /home/iotuser/bbb</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /home/iotuser</span><br><span class="line">tar -czvf xxx.tar.gz aaa bbb</span><br></pre></td></tr></table></figure>

<h2 id="三十六、在终端配置-ufw，要求设置允许-TCP-的-5505-端口可以访问本机。"><a href="#三十六、在终端配置-ufw，要求设置允许-TCP-的-5505-端口可以访问本机。" class="headerlink" title="三十六、在终端配置 ufw，要求设置允许 TCP 的 5505 端口可以访问本机。"></a>三十六、在终端配置 ufw，要求设置允许 TCP 的 5505 端口可以访问本机。</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ufw allow 5505/tcp</span><br><span class="line"><span class="comment">#保存</span></span><br><span class="line">sudo ufw status</span><br></pre></td></tr></table></figure>

<h2 id="三十七、在终端使用-ufw，要求允许-192-168-0-200-这台计算机访问本机。"><a href="#三十七、在终端使用-ufw，要求允许-192-168-0-200-这台计算机访问本机。" class="headerlink" title="三十七、在终端使用 ufw，要求允许 192.168.0.200 这台计算机访问本机。"></a>三十七、在终端使用 ufw，要求允许 192.168.0.200 这台计算机访问本机。</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo ufw allow from 192.168.0.200</span><br></pre></td></tr></table></figure>

<h2 id="三十八、修改配置将-ssh-服务远程连接的默认端口修改成-8888。"><a href="#三十八、修改配置将-ssh-服务远程连接的默认端口修改成-8888。" class="headerlink" title="三十八、修改配置将 ssh 服务远程连接的默认端口修改成 8888。"></a>三十八、修改配置将 ssh 服务远程连接的默认端口修改成 8888。</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/ssh/sshd_config</span><br><span class="line">#修改</span><br><span class="line">Port 8888</span><br></pre></td></tr></table></figure>

<h2 id="三十九、离线安装-mysql、python，vim"><a href="#三十九、离线安装-mysql、python，vim" class="headerlink" title="三十九、离线安装 mysql、python，vim"></a>三十九、离线安装 mysql、python，vim</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#解压mysql</span></span><br><span class="line">unzip name.file</span><br><span class="line"><span class="comment">#给权限</span></span><br><span class="line">sudo <span class="built_in">chmod</span> 775 install.sh</span><br><span class="line"><span class="comment">#开启服务</span></span><br><span class="line">sudo service mysql start</span><br><span class="line"><span class="comment">#设置密码</span></span><br><span class="line">sudo mysql_secure_installation</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装python</span></span><br><span class="line">sudo dpkg -i python.deb python-libraries.deb</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装vim</span></span><br><span class="line">sudo dpkg -i vim.deb</span><br></pre></td></tr></table></figure>

<h2 id="四十、查看当前操作系统版本信息"><a href="#四十、查看当前操作系统版本信息" class="headerlink" title="四十、查看当前操作系统版本信息"></a>四十、查看当前操作系统版本信息</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/lsb-release</span><br></pre></td></tr></table></figure>

<p><img src="/../assets/%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E4%B9%8BUbuntu%E7%BB%B4%E6%8A%A4/1705475005240.png" alt="1705475005240"></p>
<h2 id="四十一、查看系统内核限制"><a href="#四十一、查看系统内核限制" class="headerlink" title="四十一、查看系统内核限制"></a>四十一、查看系统内核限制</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ipcs -l</span><br></pre></td></tr></table></figure>

<p><img src="/../assets/%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E4%B9%8BUbuntu%E7%BB%B4%E6%8A%A4/1705474996383.png" alt="1705474996383"></p>
<h2 id="四十二、使用-scp-传输"><a href="#四十二、使用-scp-传输" class="headerlink" title="四十二、使用 scp 传输"></a>四十二、使用 scp 传输</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scp /path/file root@172.20.1.1:/path/file</span><br></pre></td></tr></table></figure>

<h2 id="四十三、在终端中使用命令添加一个名为-lily-的用户名，要求在-home-目录下同步创建该用户目录。将该用户添加到名为-school-Admin-的用户组"><a href="#四十三、在终端中使用命令添加一个名为-lily-的用户名，要求在-home-目录下同步创建该用户目录。将该用户添加到名为-school-Admin-的用户组" class="headerlink" title="四十三、在终端中使用命令添加一个名为 lily 的用户名，要求在 home 目录下同步创建该用户目录。将该用户添加到名为 school Admin 的用户组"></a>四十三、在终端中使用命令添加一个名为 lily 的用户名，要求在 home 目录下同步创建该用户目录。将该用户添加到名为 school Admin 的用户组</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建schoolAdmin用户组</span></span><br><span class="line">sudo groupadd schoolAdmin</span><br><span class="line"><span class="comment">#创建lily的用户名</span></span><br><span class="line">sudo useradd -m lily</span><br><span class="line"><span class="comment">#将将该用户添加到名为school Admin的用户组</span></span><br><span class="line">sudo usermod -a -G schoolAdmin lily</span><br></pre></td></tr></table></figure>

<h2 id="四十五、查看-root-用户进程信息"><a href="#四十五、查看-root-用户进程信息" class="headerlink" title="四十五、查看 root 用户进程信息"></a>四十五、查看 root 用户进程信息</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps -u root</span><br></pre></td></tr></table></figure>

<h2 id="四十六、命令查询-Ubuntu-系统有几块物理硬盘"><a href="#四十六、命令查询-Ubuntu-系统有几块物理硬盘" class="headerlink" title="四十六、命令查询 Ubuntu 系统有几块物理硬盘"></a>四十六、命令查询 Ubuntu 系统有几块物理硬盘</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#只显示几块硬盘</span></span><br><span class="line">lsblk -d | grep disk | <span class="built_in">wc</span> -l</span><br></pre></td></tr></table></figure>

<h2 id="四十七、mysql-命令查询主程序所在路径的参数"><a href="#四十七、mysql-命令查询主程序所在路径的参数" class="headerlink" title="四十七、mysql 命令查询主程序所在路径的参数"></a>四十七、mysql 命令查询主程序所在路径的参数</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#which mysqld</span><br><span class="line">#SHOW VARIABLES LIKE &#x27;basedir&#x27;;</span><br></pre></td></tr></table></figure>

<p><img src="/../assets/%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E4%B9%8BUbuntu%E7%BB%B4%E6%8A%A4/1705765441912.png" alt="1705765441912"></p>
<p><img src="/../assets/%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E4%B9%8BUbuntu%E7%BB%B4%E6%8A%A4/1705765448044.png" alt="1705765448044"></p>
<h2 id="四十八、查看数据库大小"><a href="#四十八、查看数据库大小" class="headerlink" title="四十八、查看数据库大小"></a>四十八、查看数据库大小</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT CONCAT(ROUND(SUM(data_length / 1024 / 1024), 2), <span class="string">&#x27; MB&#x27;</span>) AS data</span><br><span class="line">FROM information_schema.TABLES</span><br><span class="line">WHERE table_schema = <span class="string">&#x27;testdatabase&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="四十九、mysql-创建数据库然后导入-sql"><a href="#四十九、mysql-创建数据库然后导入-sql" class="headerlink" title="四十九、mysql 创建数据库然后导入 sql"></a>四十九、mysql 创建数据库然后导入 sql</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source 文件路径;</span><br></pre></td></tr></table></figure>

<h2 id="五十、查看指定用户进程"><a href="#五十、查看指定用户进程" class="headerlink" title="五十、查看指定用户进程"></a>五十、查看指定用户进程</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps -u root</span><br></pre></td></tr></table></figure>

<h2 id="五十一、ubuntu-安装-mysql"><a href="#五十一、ubuntu-安装-mysql" class="headerlink" title="五十一、ubuntu 安装 mysql"></a>五十一、ubuntu 安装 mysql</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#解压mysql</span><br><span class="line">unzip name.file</span><br><span class="line">#775权限</span><br><span class="line">sudo chmod 775 name.file</span><br><span class="line">#执行安装</span><br><span class="line">sudo ./install.sh</span><br><span class="line">#开启服务</span><br><span class="line">sudo server mysql start</span><br><span class="line">#输入密码</span><br><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技能大赛</category>
      </categories>
      <tags>
        <tag>Ubuntu维护</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库常用命令</title>
    <url>/2023/08/29/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="修订："><a href="#修订：" class="headerlink" title="修订："></a>修订：</h1><p>查看表中的字段</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">show columns from 商品库存;xxxxxxxxxx columnshow columns from 商品库存;</span><br></pre></td></tr></table></figure>

<p><img src="/../assets/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/1694239120400.png" alt="1694239120400"></p>
<p><img src="/../assets/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/1694240340953.png" alt="1694240340953"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select 所在区域 from 商品库存 limit 5;  检索此语句使用SELECT语句检索单个列。LIMIT 5指示MySQL返回</span><br><span class="line">不多于5行。</span><br></pre></td></tr></table></figure>

<p><img src="/../assets/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/1694240532823.png" alt="1694240532823"></p>
<p><strong>统计四张表的记录数,要求 SQL 语句禁用联合查询（Union、JOIN、多表</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">	(<span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> d_3_1) <span class="keyword">AS</span> dcount,</span><br><span class="line">	(<span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> 商品库存) <span class="keyword">AS</span> scount</span><br></pre></td></tr></table></figure>

<p><img src="/../assets/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/1701681099499.png" alt="1701681099499"></p>
<h2 id="一、连接数据库"><a href="#一、连接数据库" class="headerlink" title="一、连接数据库"></a>一、连接数据库</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -h 主机IP -P 端口号 -u 用户名 -p 密码</span><br></pre></td></tr></table></figure>

<h3 id="在-Ubuntu"><a href="#在-Ubuntu" class="headerlink" title="在 Ubuntu"></a>在 Ubuntu</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MySQL -u root -p</span><br></pre></td></tr></table></figure>

<p><strong>连接远程主机</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -h110.110.110.110 -u root -p 123;</span><br></pre></td></tr></table></figure>

<h2 id="二、修改用户密码"><a href="#二、修改用户密码" class="headerlink" title="二、修改用户密码"></a>二、修改用户密码</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqladmin -u root -password ab12</span><br></pre></td></tr></table></figure>

<p>再次修改</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqladmin -u root -password djg345</span><br></pre></td></tr></table></figure>

<h2 id="三、新增用户"><a href="#三、新增用户" class="headerlink" title="三、新增用户"></a>三、新增用户</h2><p>（1）增加一个用户 test1，密码为 abc</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grant select,insert,delete on *.*to [email]=test@&quot;%]test1@&quot;[/email]&quot;Indentified by&quot;abc&quot;;</span><br><span class="line"># grant on 命令格式：grant select on 数据库.* to 用户名@登录主机 identified by “密码”;</span><br></pre></td></tr></table></figure>

<p>（2）新增一个 test2 密码为 abc，只能 localhost 登录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grant select,insert,update,delete on mydb.* to [email=test2@localhost]test2@localhsot[/email] identified by &quot;abc&quot;;</span><br><span class="line"># 如果不想test有密码可以在用一次打消密码</span><br><span class="line">grant select,insert,update,delete on mydb.* to [email=test2@localhost]test2@localhost[/email] identified by “”;=</span><br></pre></td></tr></table></figure>

<h2 id="四、创建数据库"><a href="#四、创建数据库" class="headerlink" title="四、创建数据库"></a>四、创建数据库</h2><p>（1）create database 命名;</p>
<p><img src="/../assets/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/1693301573827.png" alt="1693301573827"></p>
<p>（2）创建数据库并分配用户</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#1</span><br><span class="line">create database 数据库名;</span><br><span class="line">#2</span><br><span class="line">create select,insert,update,delete,create,drop,alter on 数据库名.* to 数据库名@loclhost identified by &#x27;密码&#x27;;</span><br><span class="line">#3</span><br><span class="line">select password por &#x27;数据名&#x27;@&#x27;localhost&#x27; =old_password(&#x27;密码&#x27;);</span><br></pre></td></tr></table></figure>

<h2 id="五、显示数据库"><a href="#五、显示数据库" class="headerlink" title="五、显示数据库"></a>五、显示数据库</h2><p><strong>show databases 显示所有数据库</strong></p>
<p><img src="/../assets/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/1693311907411.png" alt="1693311907411"></p>
<h2 id="六、删除数据库"><a href="#六、删除数据库" class="headerlink" title="六、删除数据库"></a>六、删除数据库</h2><p><strong>drop database xhkdb;</strong></p>
<p><img src="/../assets/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/1693311993666.png" alt="1693311993666"></p>
<h2 id="七、使用数据库"><a href="#七、使用数据库" class="headerlink" title="七、使用数据库"></a>七、使用数据库</h2><p><strong>use xhkdb;</strong></p>
<p>（1）use 语句可以通告 mysql 把数据库当作默认使用。知道下一个不同的 use 语句。</p>
<p><img src="/../assets/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/1693314402433.png" alt="1693314402433"></p>
<p>（2）use 语句不会阻碍访问其他数据库中的表。ab1 数据库访问 author 表，并从 db2 数据库访问 editor 表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use db1;</span><br><span class="line">select author_name,editor_name from author,ab2,editor;</span><br><span class="line">where author.editor_id = ab2.editor.editor_id;</span><br></pre></td></tr></table></figure>

<h2 id="八、当前连接的数据库"><a href="#八、当前连接的数据库" class="headerlink" title="八、当前连接的数据库"></a>八、当前连接的数据库</h2><p><strong>select database();</strong></p>
<p>（1）显示 mysql 版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select version();</span><br></pre></td></tr></table></figure>

<p><img src="/../assets/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/1693314931707.png" alt="1693314931707"></p>
<p>（2）显示当前时间</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select now();</span><br></pre></td></tr></table></figure>

<p><img src="/../assets/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/1693314952201.png" alt="1693314952201"></p>
<p>（3）显示年月日</p>
<p><img src="/../assets/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/1693315145115.png" alt="1693315145115"></p>
<p><img src="/../assets/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/1693315128832.png" alt="1693315128832"></p>
<p><img src="/../assets/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/1693315054667.png" alt="1693315054667"></p>
<p>（4）显示字符串</p>
<p><img src="/../assets/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/1693315209186.png" alt="1693315209186"></p>
<p>（5）当计算器</p>
<p><img src="/../assets/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/1693315238981.png" alt="1693315238981"></p>
<p>（5）串接字符串</p>
<p><img src="/../assets/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/1693315322414.png" alt="1693315322414"></p>
<p><strong>&#x2F;&#x2F;这里用到 CONCAT()函数，用来把字符串串接起来。</strong></p>
<h2 id="九、创建数据库表"><a href="#九、创建数据库表" class="headerlink" title="九、创建数据库表"></a>九、创建数据库表</h2><p>注意：要先使用 use 数据库名；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table 表名</span><br><span class="line">(</span><br><span class="line">	字段名1，数据类型 [列级别约束条件][默认值]，</span><br><span class="line">	字段名2，数据类型 [列级别约束条件][默认值],</span><br><span class="line">	……</span><br><span class="line">	[表级别约束条件]</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><img src="/../assets/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/1693315552760.png" alt="1693315552760"></p>
<p>例如:创建 tb_emp1 表结构</p>
<p><img src="/../assets/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/1693317121082.png" alt="1693317121082"></p>
<p><img src="/../assets/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/1693317243938.png" alt="1693317243938"></p>
<h2 id="十、获取表结构"><a href="#十、获取表结构" class="headerlink" title="十、获取表结构"></a>十、获取表结构</h2><p><strong>查看表结构可以使用 describe 和 show create table；</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">describe 表名;</span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">desc 表名；</span><br></pre></td></tr></table></figure>

<p>show create table 可以查看显示创建表时的 create table 语句。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show create table 表名\G;</span><br></pre></td></tr></table></figure>

<p><img src="/../assets/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/1693317695853.png" alt="1693317695853"></p>
<h2 id="十一、删除数据表"><a href="#十一、删除数据表" class="headerlink" title="十一、删除数据表"></a>十一、删除数据表</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop table if exists 表1，表2,表n</span><br></pre></td></tr></table></figure>

<p><img src="/../assets/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/1693355675932.png" alt="1693355675932"></p>
<h2 id="十二、向表中插入数据"><a href="#十二、向表中插入数据" class="headerlink" title="十二、向表中插入数据"></a>十二、向表中插入数据</h2><p><strong>insert into 插入新行</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into 表名称 values(值1，值2);</span><br><span class="line"># 也可以指定要插入数据的列</span><br><span class="line">insert into table_name(列1，列2)values(值1，值2)</span><br></pre></td></tr></table></figure>

<h2 id="十三、查询表中数据"><a href="#十三、查询表中数据" class="headerlink" title="十三、查询表中数据"></a>十三、查询表中数据</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line"> &#123;* | &lt;字段列表&gt;&#125;</span><br><span class="line"> [</span><br><span class="line">	 FROM &lt;表 1&gt;,&lt;表 2&gt;...</span><br><span class="line">	 [WHERE &lt;表达式&gt;</span><br><span class="line">	 [GROUP BY &lt;group by definition&gt;]</span><br><span class="line">	 [HAVING &lt;expression&gt; [&#123;&lt;operator&gt;&lt;expression&gt;&#125;...]]</span><br><span class="line"> 	[ORDER BY &lt;order by definition&gt;]</span><br><span class="line"> 	[LIMIT [&lt;offset&gt;,] &lt;row count&gt;]</span><br><span class="line"> ]</span><br><span class="line">SELECT [字段 1,字段 2,…,字段 n]</span><br><span class="line">FROM [表或视图]</span><br><span class="line">WHERE [查询条件];</span><br></pre></td></tr></table></figure>

<p><img src="/../assets/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/1696756935287.png" alt="1696756935287"></p>
<h2 id="十四、删除记录"><a href="#十四、删除记录" class="headerlink" title="十四、删除记录"></a>十四、删除记录</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">delete from table_name[where &lt;condition&gt;];</span><br><span class="line">#						指定删除条件</span><br><span class="line">delete from person where id=11;</span><br></pre></td></tr></table></figure>

<h2 id="十五、修改表中的数据"><a href="#十五、修改表中的数据" class="headerlink" title="十五、修改表中的数据"></a>十五、修改表中的数据</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update table_name</span><br><span class="line">set column_nmael=value1,column_name2=value2</span><br><span class="line">where(condition)</span><br></pre></td></tr></table></figure>

<p>column_name1，为指定更新的字段名称。value 为相对应指定字段的更新值。condition 更新记录需要满足的条件</p>
<p>【例】在 person 表中，更新 id 值为 11 的记录，将 age 字段值改为 15，将 name 字段值改为 LiMing，SQL 语句如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update person set age=15,name=&#x27;liming&#x27;where id=11;</span><br></pre></td></tr></table></figure>

<h2 id="十六、增加字段"><a href="#十六、增加字段" class="headerlink" title="十六、增加字段"></a>十六、增加字段</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter add 表名 add 新字段 数据类型</span><br><span class="line">	约束条件 first|after 已存在字段名</span><br><span class="line">	        first将新添加的字段设置为表的第一个字段</span><br><span class="line">	        after新添加的字段指定在‘已存在字段名’的后面</span><br></pre></td></tr></table></figure>

<p>【例】在数据表 tb_dept1 中添加一个没有完整性约束的 INT 类型的字段 managerId（部门经理编号），SQL 语句如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE tb_dept1 ADD managerId INT(10);</span><br></pre></td></tr></table></figure>

<h2 id="十七、修改表名"><a href="#十七、修改表名" class="headerlink" title="十七、修改表名"></a>十七、修改表名</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter table 旧表名 rename to新表名</span><br></pre></td></tr></table></figure>

<p>【例】将数据表 tb_dept3 改名为 tb_deptment3，SQL 语句如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE tb_dept3 RENAME tb_deptment3;</span><br></pre></td></tr></table></figure>

<h2 id="十八、备份数据库"><a href="#十八、备份数据库" class="headerlink" title="十八、备份数据库"></a>十八、备份数据库</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqldump -u user -h host -p password dbname[tbname,[tbname]]&gt;filename.sql</span><br></pre></td></tr></table></figure>

<h2 id="十九、还原数据库"><a href="#十九、还原数据库" class="headerlink" title="十九、还原数据库"></a>十九、还原数据库</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -u user -p [dbname]&lt;filename.sql</span><br></pre></td></tr></table></figure>

<p>【例 1】使用 mysql 命令将 C:\backup\booksdb_20130301.sql 文件中的备份导入到数据库中，输入语句如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql –u root –p booksDB &lt; C:/backup/booksdb_20130301.sql</span><br></pre></td></tr></table></figure>

<p>如果已经登录 MySQL 服务器，还可以使用 source 命令导入 sql 文件。source 语句语法如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source filename</span><br></pre></td></tr></table></figure>

<p>【 例 2 】 使 用 root 用 户 登 录 到 服 务 器 ， 然 后 使 用 source 导 入 本 地 的 备 份 文 件 booksdb_20110101.sql，输入语句如下：</p>
<p>–选择要恢复到的数据库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; use booksDB;</span><br><span class="line"></span><br><span class="line">Database changed</span><br></pre></td></tr></table></figure>

<p>–使用 source 命令导入备份文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; source C:\backup\booksDB_20130301.sql</span><br></pre></td></tr></table></figure>

<h2 id="二十、快速恢复数据库"><a href="#二十、快速恢复数据库" class="headerlink" title="二十、快速恢复数据库"></a>二十、快速恢复数据库</h2><p>在 MySQL 服务器停止运行时，将备份的数据库文件复制到 MySQL 存放数据的位置（MySQL 的 data 文件夹）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chown -R mysql.mysql /var/lib/mysql/dbname</span><br></pre></td></tr></table></figure>

<p>【例】从 mysqlhotcopy 复制的备份恢复数据库，输入语句如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp -R /usr/backup/test usr/local/mysql/data</span><br></pre></td></tr></table></figure>

<h2 id="二十一、在-Ubuntu-下安装-mysql"><a href="#二十一、在-Ubuntu-下安装-mysql" class="headerlink" title="二十一、在 Ubuntu 下安装 mysql"></a>二十一、在 Ubuntu 下安装 mysql</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get update #更新软件包</span><br><span class="line">sudo apt-get install mysql-server #安装数据库服务器</span><br><span class="line"></span><br><span class="line">启动：sudo /etc/init.d/mysql start</span><br><span class="line">停止：sudo /etc/init.d/mysql stop</span><br><span class="line">重启：sudo /etc/init.d/mysql restart</span><br><span class="line">登录：mysql -u root -p&lt;pwd&gt;</span><br></pre></td></tr></table></figure>

<h2 id="二十二、关闭防火墙"><a href="#二十二、关闭防火墙" class="headerlink" title="二十二、关闭防火墙"></a>二十二、关闭防火墙</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- sudo apt-get install ufw 安装防火墙</span><br><span class="line">- sudo ufw enable 打开防火墙</span><br><span class="line">- sudo ufw status 查看防火墙状态</span><br><span class="line">- sudo ufw disable 关闭防火墙</span><br></pre></td></tr></table></figure>

<h1 id="MySQL-在-Ubuntu-使用"><a href="#MySQL-在-Ubuntu-使用" class="headerlink" title="MySQL 在 Ubuntu 使用"></a>MySQL 在 Ubuntu 使用</h1><h2 id="二十三、在服务器-SQLSERVER-上，利用-U-盘“U-盘资料-test-sql”还原三张数据"><a href="#二十三、在服务器-SQLSERVER-上，利用-U-盘“U-盘资料-test-sql”还原三张数据" class="headerlink" title="二十三、在服务器 SQLSERVER 上，利用 U 盘“U 盘资料&#x2F;test.sql”还原三张数据"></a>二十三、在服务器 SQLSERVER 上，利用 U 盘“U 盘资料&#x2F;test.sql”还原三张数据</h2><p>表。</p>
<p><img src="/../assets/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/1705417667865.png" alt="1705417667865"></p>
<h2 id="二十四、统计三张表的记录数，查询结果要求如图。"><a href="#二十四、统计三张表的记录数，查询结果要求如图。" class="headerlink" title="二十四、统计三张表的记录数，查询结果要求如图。"></a>二十四、统计三张表的记录数，查询结果要求如图。</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT &#x27;table1&#x27; AS TableName, COUNT(*) AS RecordCount FROM table1</span><br><span class="line">UNION ALL</span><br><span class="line">SELECT &#x27;table2&#x27; AS TableName, COUNT(*) AS RecordCount FROM table2</span><br><span class="line">UNION ALL</span><br><span class="line">SELECT &#x27;table3&#x27; AS TableName, COUNT(*) AS RecordCount FROM table3;</span><br></pre></td></tr></table></figure>

<h2 id="二十五、删除-AD-AccountsRole-表中不属于-AD-Accounts-用户的关系数据。重新查询三张表的记录数。"><a href="#二十五、删除-AD-AccountsRole-表中不属于-AD-Accounts-用户的关系数据。重新查询三张表的记录数。" class="headerlink" title="二十五、删除 AD_AccountsRole 表中不属于 AD_Accounts 用户的关系数据。重新查询三张表的记录数。"></a>二十五、删除 AD_AccountsRole 表中不属于 AD_Accounts 用户的关系数据。重新查询三张表的记录数。</h2><p><img src="/../assets/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/1705417785368.png" alt="1705417785368"></p>
<h2 id="二十六、新建查询窗口，写出查询-nleedge-数据库中所有数据表和每个表的记录"><a href="#二十六、新建查询窗口，写出查询-nleedge-数据库中所有数据表和每个表的记录" class="headerlink" title="二十六、新建查询窗口，写出查询 nleedge 数据库中所有数据表和每个表的记录"></a>二十六、新建查询窗口，写出查询 nleedge 数据库中所有数据表和每个表的记录</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">  (SELECT COUNT(*) FROM d_3_1) AS 表一,</span><br><span class="line">  (SELECT COUNT(*) FROM `商品库存`) AS 表二;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>物联网比赛之Windows维护</title>
    <url>/2023/08/29/%E7%89%A9%E8%81%94%E7%BD%91%E6%AF%94%E8%B5%9B%E4%B9%8BWindows%E7%BB%B4%E6%8A%A4/</url>
    <content><![CDATA[<h2 id="模块-B：物联网故障维修与运行维护"><a href="#模块-B：物联网故障维修与运行维护" class="headerlink" title="模块 B：物联网故障维修与运行维护"></a>模块 B：物联网故障维修与运行维护</h2><h2 id="1、Windows-系统维护"><a href="#1、Windows-系统维护" class="headerlink" title="1、Windows 系统维护"></a>1、Windows 系统维护</h2><p><img src="/../assets/%E7%89%A9%E8%81%94%E7%BD%91%E6%AF%94%E8%B5%9B%E4%B9%8BWindows%E7%BB%B4%E6%8A%A4/1693279392763.png" alt="1693279392763"></p>
<p><img src="/../assets/%E7%89%A9%E8%81%94%E7%BD%91%E6%AF%94%E8%B5%9B%E4%B9%8BWindows%E7%BB%B4%E6%8A%A4/1693281108935.png" alt="1693281108935"></p>
<h3 id="一、出于安全考虑，需要对服务器计算机配置规则：“禁止工作站计算机访问本机任何程序或者端口，暂不启用此规则”。"><a href="#一、出于安全考虑，需要对服务器计算机配置规则：“禁止工作站计算机访问本机任何程序或者端口，暂不启用此规则”。" class="headerlink" title="一、出于安全考虑，需要对服务器计算机配置规则：“禁止工作站计算机访问本机任何程序或者端口，暂不启用此规则”。"></a>一、出于安全考虑，需要对服务器计算机配置规则：“禁止工作站计算机访问本机任何程序或者端口，暂不启用此规则”。</h3><p><img src="/../assets/%E7%89%A9%E8%81%94%E7%BD%91%E6%AF%94%E8%B5%9B%E4%B9%8BWindows%E7%BB%B4%E6%8A%A4/1693279825531.png" alt="1693279825531"></p>
<p>点击<strong>自定义</strong></p>
<p><img src="/../assets/%E7%89%A9%E8%81%94%E7%BD%91%E6%AF%94%E8%B5%9B%E4%B9%8BWindows%E7%BB%B4%E6%8A%A4/1693279967063.png" alt="1693279967063"></p>
<p><img src="/../assets/%E7%89%A9%E8%81%94%E7%BD%91%E6%AF%94%E8%B5%9B%E4%B9%8BWindows%E7%BB%B4%E6%8A%A4/1693281331676.png" alt="1693281331676"></p>
<p><img src="/../assets/%E7%89%A9%E8%81%94%E7%BD%91%E6%AF%94%E8%B5%9B%E4%B9%8BWindows%E7%BB%B4%E6%8A%A4/1693281411142.png" alt="1693281411142"></p>
<p><img src="/../assets/%E7%89%A9%E8%81%94%E7%BD%91%E6%AF%94%E8%B5%9B%E4%B9%8BWindows%E7%BB%B4%E6%8A%A4/1693281443360.png" alt="1693281443360"></p>
<p><img src="/../assets/%E7%89%A9%E8%81%94%E7%BD%91%E6%AF%94%E8%B5%9B%E4%B9%8BWindows%E7%BB%B4%E6%8A%A4/1693281455441.png" alt="1693281455441"></p>
<p><img src="/../assets/%E7%89%A9%E8%81%94%E7%BD%91%E6%AF%94%E8%B5%9B%E4%B9%8BWindows%E7%BB%B4%E6%8A%A4/1693281662496.png" alt="1693281662496"></p>
<p><strong>记得露出本地地址</strong></p>
<h3 id="二、在工作站电脑的命令行窗口中，使用命令查看网络连接以及每一个网络接口设备状态。"><a href="#二、在工作站电脑的命令行窗口中，使用命令查看网络连接以及每一个网络接口设备状态。" class="headerlink" title="二、在工作站电脑的命令行窗口中，使用命令查看网络连接以及每一个网络接口设备状态。"></a>二、在工作站电脑的命令行窗口中，使用命令查看网络连接以及每一个网络接口设备状态。</h3><p><strong>netstat -an</strong></p>
<p><img src="/../assets/%E7%89%A9%E8%81%94%E7%BD%91%E6%AF%94%E8%B5%9B%E4%B9%8BWindows%E7%BB%B4%E6%8A%A4/1693281802478.png" alt="1693281802478"></p>
<h2 id="扩展："><a href="#扩展：" class="headerlink" title="扩展："></a>扩展：</h2><h3 id="（1）netstat-b-可以显示在创建网络连接和侦听端口时所涉及的可执行程序"><a href="#（1）netstat-b-可以显示在创建网络连接和侦听端口时所涉及的可执行程序" class="headerlink" title="（1）netstat -b 可以显示在创建网络连接和侦听端口时所涉及的可执行程序"></a><strong>（1）netstat -b 可以显示在创建网络连接和侦听端口时所涉及的可执行程序</strong></h3><p><img src="/../assets/%E7%89%A9%E8%81%94%E7%BD%91%E6%AF%94%E8%B5%9B%E4%B9%8BWindows%E7%BB%B4%E6%8A%A4/1693282575271.png" alt="1693282575271"></p>
<h3 id="（2）netstat-a-显示所有的有效连接信息列表，包括建立的连接（ESTABLISHED），也包括监听连接请求（LISTENLING）的那些连接"><a href="#（2）netstat-a-显示所有的有效连接信息列表，包括建立的连接（ESTABLISHED），也包括监听连接请求（LISTENLING）的那些连接" class="headerlink" title="（2）netstat -a 显示所有的有效连接信息列表，包括建立的连接（ESTABLISHED），也包括监听连接请求（LISTENLING）的那些连接"></a>（2）netstat -a 显示所有的有效连接信息列表，包括建立的连接（ESTABLISHED），也包括监听连接请求（LISTENLING）的那些连接</h3><p><img src="/../assets/%E7%89%A9%E8%81%94%E7%BD%91%E6%AF%94%E8%B5%9B%E4%B9%8BWindows%E7%BB%B4%E6%8A%A4/1693282697970.png" alt="1693282697970"></p>
<h3 id="（3）netstat-e-可以显示关于以太网的统计数据，传送字节数、数据包、错误等信息，还可以和-s-结合使用"><a href="#（3）netstat-e-可以显示关于以太网的统计数据，传送字节数、数据包、错误等信息，还可以和-s-结合使用" class="headerlink" title="（3）netstat -e 可以显示关于以太网的统计数据，传送字节数、数据包、错误等信息，还可以和-s 结合使用"></a>（3）netstat -e 可以显示关于以太网的统计数据，传送字节数、数据包、错误等信息，还可以和-s 结合使用</h3><p><img src="/../assets/%E7%89%A9%E8%81%94%E7%BD%91%E6%AF%94%E8%B5%9B%E4%B9%8BWindows%E7%BB%B4%E6%8A%A4/1693282829345.png" alt="1693282829345"></p>
<h3 id="（4）netstat-f-显示外部地址的完全限定域名"><a href="#（4）netstat-f-显示外部地址的完全限定域名" class="headerlink" title="（4）netstat -f 显示外部地址的完全限定域名"></a>（4）netstat -f 显示外部地址的完全限定域名<FQDN></h3><p><img src="/../assets/%E7%89%A9%E8%81%94%E7%BD%91%E6%AF%94%E8%B5%9B%E4%B9%8BWindows%E7%BB%B4%E6%8A%A4/1693282908580.png" alt="1693282908580"></p>
<h3 id="（5）netstat-p-可以显示-proto-指定的协议连接情况"><a href="#（5）netstat-p-可以显示-proto-指定的协议连接情况" class="headerlink" title="（5）netstat -p 可以显示 proto 指定的协议连接情况"></a>（5）netstat -p 可以显示 proto 指定的协议连接情况</h3><p><img src="/../assets/%E7%89%A9%E8%81%94%E7%BD%91%E6%AF%94%E8%B5%9B%E4%B9%8BWindows%E7%BB%B4%E6%8A%A4/1693282978761.png" alt="1693282978761"></p>
<h3 id="（6）netstat-r-显示路由表"><a href="#（6）netstat-r-显示路由表" class="headerlink" title="（6）netstat -r 显示路由表"></a>（6）netstat -r 显示路由表</h3><p><img src="/../assets/%E7%89%A9%E8%81%94%E7%BD%91%E6%AF%94%E8%B5%9B%E4%B9%8BWindows%E7%BB%B4%E6%8A%A4/1693283058738.png" alt="1693283058738"></p>
]]></content>
      <categories>
        <category>技能大赛</category>
      </categories>
      <tags>
        <tag>windows维护</tag>
      </tags>
  </entry>
  <entry>
    <title>电子工程师入门篇-入门基础</title>
    <url>/2024/02/08/%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%85%A5%E9%97%A8%E7%AF%87-%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="1-1-1-电路与电路图"><a href="#1-1-1-电路与电路图" class="headerlink" title="1.1.1 电路与电路图"></a>1.1.1 电路与电路图</h2><p>电源的作用是提供电能；开关、导线的作用是控制和传递电能，称为中间环节；灯泡是消耗电能的用电器，它能将电能转变为光能，称为负载。</p>
<p><img src="/../assets/%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%85%A5%E9%97%A8%E7%AF%87-%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/1707403891986.png" alt="1707403891986"></p>
<h2 id="1-1-2-电流与电阻"><a href="#1-1-2-电流与电阻" class="headerlink" title="1.1.2 电流与电阻"></a>1.1.2 电流与电阻</h2><h3 id="1．电流"><a href="#1．电流" class="headerlink" title="1．电流"></a>1．电流</h3><p>​ 我们把电子运动的反方向作为电流方向，即把正电荷在电路中的移动方向规定为电流的方向。</p>
<p>​ 电流通常用字母“I”表示，单位为安培（简称安），用“A”表示，比安培小的单位有毫安（mA）、微安（μA），它们之间的换算关系为</p>
<p><img src="/../assets/%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%85%A5%E9%97%A8%E7%AF%87-%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/1707404033488.png" alt="1707404033488"></p>
<h3 id="2．电阻"><a href="#2．电阻" class="headerlink" title="2．电阻"></a>2．电阻</h3><p>​ 导体对电流的阻碍称为该导体的电阻。</p>
<p>​ 电阻通常用字母“R”表示，电阻的单位为欧姆（简称欧），用“Ω”表示，比欧姆大的单位 有千欧（kΩ）、兆欧（MΩ），它们之间的换算关系为</p>
<p><img src="/../assets/%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%85%A5%E9%97%A8%E7%AF%87-%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/1707404090124.png" alt="1707404090124"></p>
<p>​ 导体的电阻计算公式为</p>
<p><img src="/../assets/%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%85%A5%E9%97%A8%E7%AF%87-%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/1707404106625.png" alt="1707404106625"></p>
<p>​ L 为导体的长度（单位：m），S 为导体的横截面积（单位：m2），ρ 为导体的电阻率（单位：Ω·m）</p>
<p>​ <strong>在长度 L 和横截面积 S 相同的情况下，电阻率越大的导体其电阻越大</strong></p>
<h2 id="1-1-3-电位、电压和电动势"><a href="#1-1-3-电位、电压和电动势" class="headerlink" title="1.1.3 电位、电压和电动势"></a>1.1.3 电位、电压和电动势</h2><h3 id="1．电位"><a href="#1．电位" class="headerlink" title="1．电位"></a>1．电位</h3><p>​ 电源的正极输出电流，流到 A 点，再经 R1 流到 B 点，然后通过 R2 流到 C 点，最后流到电源的负极。</p>
<p>​ 为了表明某点为零基准点，通常在该点处画一个“⊥”符号，该符号称为接地符号，接 地符号处的电位规定为 0V</p>
<h3 id="2．电压"><a href="#2．电压" class="headerlink" title="2．电压"></a>2．电压</h3><p>​ 电路中的 A 点和 B 点的电位是不同的，有一定的差距，这种电位之间的差距称为电位差，又称电压</p>
<p>​ <strong>因为 A 点和 B 点电位差实际上就是电阻器 R1 两端的电位差（即电压）， R1 两端的电压用 UR1 表示，所以 UAB&#x3D;UR1。</strong></p>
<h3 id="3．电动势"><a href="#3．电动势" class="headerlink" title="3．电动势"></a>3．电动势</h3><p>​ 电源消耗能量在两极建立的电位差称为电动势，电动势的单位也为伏特</p>
<p>​ 由于电源内部的电流是由负极流向正极，故电源的电动势方向规定为从电源负极指向正极。</p>
<p><img src="/../assets/%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%85%A5%E9%97%A8%E7%AF%87-%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/1707404233131.png" alt="1707404233131"></p>
<h2 id="1-1-4-电路的-3-种状态"><a href="#1-1-4-电路的-3-种状态" class="headerlink" title="1.1.4 电路的 3 种状态"></a>1.1.4 电路的 3 种状态</h2><p><img src="/../assets/%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%85%A5%E9%97%A8%E7%AF%87-%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/1707404376520.png" alt="1707404376520"></p>
<h3 id="1．通路"><a href="#1．通路" class="headerlink" title="1．通路"></a>1．通路</h3><p>​ 电路处于通路状态的特点有：电路畅通，有正常的电流流过负载，负载正常工作。</p>
<h3 id="2．开路"><a href="#2．开路" class="headerlink" title="2．开路"></a>2．开路</h3><p>​ 电路处于开路状态的特点有：电路断开，无电流流过负载，负载不工作。</p>
<h3 id="3．短路"><a href="#3．短路" class="headerlink" title="3．短路"></a>3．短路</h3><p>​ 电路处于短路状态的特点有：电路中有很大电流流过，但电流不流过负载，负载不工作。</p>
<h2 id="1-1-5-接地与屏蔽"><a href="#1-1-5-接地与屏蔽" class="headerlink" title="1.1.5 接地与屏蔽"></a>1.1.5 接地与屏蔽</h2><h3 id="1．接地"><a href="#1．接地" class="headerlink" title="1．接地"></a>1．接地</h3><p>（1）在电路中，接地符号处的电位规定为 0V。</p>
<p>（2）在电路中，标有接地符号的地方都是相通的。</p>
<p><img src="/../assets/%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%85%A5%E9%97%A8%E7%AF%87-%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/1707404504012.png" alt="1707404504012"></p>
<h3 id="2．屏蔽"><a href="#2．屏蔽" class="headerlink" title="2．屏蔽"></a>2．屏蔽</h3><p>​ 屏蔽的具体做法是用金属材料（称为屏蔽罩）将元器件或电路封闭起来，再将屏蔽罩接地。</p>
<h2 id="1-1-6-欧姆定律"><a href="#1-1-6-欧姆定律" class="headerlink" title="1.1.6 欧姆定律"></a>1.1.6 欧姆定律</h2><p>​ 在电路中，流过电阻的电流 I 的大小与电阻两端的电压 U 成正比，与电阻 R 的大小成反比，即</p>
<p><img src="/../assets/%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%85%A5%E9%97%A8%E7%AF%87-%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/1707404560995.png" alt="1707404560995"></p>
<p>​ 也可以是<strong>U&#x3D;IR 或者 R&#x3D;U&#x2F;I 注意：在电路中，某点电压指的是该点与地之间的电压</strong></p>
<h2 id="1-1-7-电功、电功率和焦耳定律"><a href="#1-1-7-电功、电功率和焦耳定律" class="headerlink" title="1.1.7 电功、电功率和焦耳定律"></a>1.1.7 电功、电功率和焦耳定律</h2><h3 id="1．电功"><a href="#1．电功" class="headerlink" title="1．电功"></a>1．电功</h3><p>​ 可见电流流过一些用电设备时是会做功的，电流做的功称为电功。</p>
<p><img src="/../assets/%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%85%A5%E9%97%A8%E7%AF%87-%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/1707404684171.png" alt="1707404684171"></p>
<p>​ W 表示电功，单位为焦（J）；U 表示电压，单位为伏（V）；I 表示电流，单位为安（A）；t 表示时间，单位为秒（s）</p>
<h3 id="2．电功率"><a href="#2．电功率" class="headerlink" title="2．电功率"></a>2．电功率</h3><p>​ 电功率是指单位时间里电流通过用电设备所做的功。</p>
<p>​ 电功率常用 P 表示，单位为瓦（W），此外还有千瓦（kW）和毫瓦（mW），它们之间的换算关系是</p>
<p><img src="/../assets/%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%85%A5%E9%97%A8%E7%AF%87-%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/1707404752953.png" alt="1707404752953"></p>
<p>​ 电功率的计算公式是</p>
<p><img src="/../assets/%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%85%A5%E9%97%A8%E7%AF%87-%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/1707404766965.png" alt="1707404766965"></p>
<p><img src="/../assets/%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%85%A5%E9%97%A8%E7%AF%87-%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/1707404773605.png" alt="1707404773605"></p>
<p>​ <strong>1kW·h 可以这样理解：一个电功率为 100W 的灯泡连续使用 10h 消耗的电功为 1kW·h，即消耗 1 度电。</strong></p>
<p><img src="/../assets/%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%85%A5%E9%97%A8%E7%AF%87-%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/1707404801341.png" alt="1707404801341"></p>
<h3 id="3．焦耳定律"><a href="#3．焦耳定律" class="headerlink" title="3．焦耳定律"></a>3．焦耳定律</h3><p>​ 电流流过导体，导体发出的热量与导体流过的电流、导体的电阻和通电的时间有关。</p>
<p><img src="/../assets/%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%85%A5%E9%97%A8%E7%AF%87-%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/1707404824314.png" alt="1707404824314"></p>
<p>​ Q 表示热量，单位为焦耳（J）；R 表示电阻，单位为欧姆（Ω）；t 表示时间，单位为秒（s）。</p>
<p>该定律说明：电流流过导体产生的热量，与电流的平方、导体的电阻及通电时间成正比。</p>
<h2 id="1-2-电阻的连接方式"><a href="#1-2-电阻的连接方式" class="headerlink" title="1.2 电阻的连接方式"></a>1.2 电阻的连接方式</h2><h3 id="1-2-1-电阻的串联"><a href="#1-2-1-电阻的串联" class="headerlink" title="1.2.1 电阻的串联"></a>1.2.1 电阻的串联</h3><p><img src="/../assets/%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%85%A5%E9%97%A8%E7%AF%87-%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/1707404874218.png" alt="1707404874218"></p>
<p>​ 电阻串联电路的特点有以下几个。:</p>
<p>​ ① 流过各串联电阻的电流相等，都为<strong>I</strong>。</p>
<p>​ ② 电阻串联后的总电阻增大，总电阻等于各串联电阻之和，即<strong>R&#x3D;R1+R2</strong></p>
<p>​ ③ 总电压等于各串联电阻上电压之和，即<strong>U&#x3D;U1+U2</strong></p>
<p>​ ④ 电阻越大，两端电压越高，因为<strong>R1&lt;R2</strong>，所以<strong>UR1&lt;UR2</strong>。</p>
<h3 id="1-2-2-电阻的并联"><a href="#1-2-2-电阻的并联" class="headerlink" title="1.2.2 电阻的并联"></a>1.2.2 电阻的并联</h3><p><img src="/../assets/%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%85%A5%E9%97%A8%E7%AF%87-%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/1707404927903.png" alt="1707404927903"></p>
<p>​ 电阻并联电路的特点有以下几个。</p>
<p>​ ① 并联电阻两端的电压相等，即总电流等于流过各个并联电阻的电流之和，即<strong>I&#x3D;I1+I2</strong></p>
<p>​ ③ 电阻并联总电阻减小，总电阻的倒数等于各并联电阻的倒数之 <strong>1&#x2F;R&#x3D;1&#x2F;R1+1&#x2F;R2</strong>和，即该式子可变形为 <strong>R&#x3D;R1R2&#x2F;R1+R2</strong></p>
<p>​ ④ 在并联电路中，电阻越小，流过电阻的电流越大，因为 R1&lt;R2，所以 I1&gt;I2。</p>
<h3 id="1-2-3-电阻的混联"><a href="#1-2-3-电阻的混联" class="headerlink" title="1.2.3 电阻的混联"></a>1.2.3 电阻的混联</h3><p><img src="/../assets/%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%85%A5%E9%97%A8%E7%AF%87-%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/1707405005870.png" alt="1707405005870"></p>
<h2 id="1-3-直流电与交流电"><a href="#1-3-直流电与交流电" class="headerlink" title="1.3 直流电与交流电"></a>1.3 直流电与交流电</h2><h3 id="1-3-1-直流电"><a href="#1-3-1-直流电" class="headerlink" title="1.3.1 直流电"></a>1.3.1 直流电</h3><p>​ 直流电是指方向始终固定不变的电压或电流。</p>
<h4 id="1．稳定直流电"><a href="#1．稳定直流电" class="headerlink" title="1．稳定直流电"></a>1．稳定直流电</h4><p>​ 稳定直流电是指方向固定不变并且大小也不变的直流电。</p>
<h4 id="2．脉动直流电"><a href="#2．脉动直流电" class="headerlink" title="2．脉动直流电"></a>2．脉动直流电</h4><p>​ 脉动直流电是指方向固定不变，但大小随时间变化的直流电。</p>
<p><img src="/../assets/%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%85%A5%E9%97%A8%E7%AF%87-%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/1707406123556.png" alt="1707406123556"></p>
<h3 id="1-3-2-交流电"><a href="#1-3-2-交流电" class="headerlink" title="1.3.2 交流电"></a>1.3.2 交流电</h3><p>​ 交流电是指方向和大小都随时间作周期性变化的电压或电流</p>
<h4 id="1．正弦交流电"><a href="#1．正弦交流电" class="headerlink" title="1．正弦交流电"></a>1．正弦交流电</h4><p><img src="/../assets/%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%85%A5%E9%97%A8%E7%AF%87-%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/1707406160307.png" alt="1707406160307"></p>
<p><img src="/../assets/%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%85%A5%E9%97%A8%E7%AF%87-%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/1707406191267.png" alt="1707406191267"></p>
<h4 id="2．周期和频率"><a href="#2．周期和频率" class="headerlink" title="2．周期和频率"></a>2．周期和频率</h4><p><img src="/../assets/%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%85%A5%E9%97%A8%E7%AF%87-%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/1707406215283.png" alt="1707406215283"></p>
<h5 id="（1）周期"><a href="#（1）周期" class="headerlink" title="（1）周期"></a>（1）周期</h5><p>​ 交流电变化过程是不断重复的，交流电重复 变化一次所需的时间称为周期，周期用 T 表示，单位是秒（s）。</p>
<h5 id="（2）频率"><a href="#（2）频率" class="headerlink" title="（2）频率"></a>（2）频率</h5><p>​ 交流电在每秒钟内重复变化的次数称为频率，频率用 f 表示，它是 周期的倒数，即</p>
<p><img src="/../assets/%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%85%A5%E9%97%A8%E7%AF%87-%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/1707406263380.png" alt="1707406263380"></p>
<p>该交流电的频率 f&#x3D;50Hz，说明在 1s 内交流电能重复 0 ～ t4 这个过程 50 次。交流电变化越快，变化一次所</p>
<p>需要的时间越短，周期就越短，频率就越高。</p>
<h5 id="（3）高频、中频和低频"><a href="#（3）高频、中频和低频" class="headerlink" title="（3）高频、中频和低频"></a>（3）高频、中频和低频</h5><p>​ 频率在 3MHz 以上的信号称为高频信号，频率在 300kHz ～ 3MHz 范围内的信 号称为中频信号，频率低于 300kHz 的信号称为低频信号。</p>
<h4 id="3．瞬时值和有效值"><a href="#3．瞬时值和有效值" class="headerlink" title="3．瞬时值和有效值"></a>3．瞬时值和有效值</h4><h5 id="（1）瞬时值"><a href="#（1）瞬时值" class="headerlink" title="（1）瞬时值"></a>（1）瞬时值</h5><p>​ 交流电的大小和方向是不断变化的，交流电在某一时刻的值称为 交流电在该时刻的瞬时值。</p>
<h5 id="（2）有效值"><a href="#（2）有效值" class="headerlink" title="（2）有效值"></a>（2）有效值</h5><p><img src="/../assets/%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%85%A5%E9%97%A8%E7%AF%87-%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/1707406384977.png" alt="1707406384977"></p>
<p>所示两个电路中的电热丝完全一样，现分别给电热丝通交流电和直流电，如果两电路通电时间相同，并且电热丝发出热量也相同，对电热丝来说，这里的交流电和直流电是等效的，那么就将图 1-21（b）中直流电的电压值或电流值称为图 1-21（a）中交流电的有效电压值或有效电流值。正弦交流电的有效值与最大瞬时值的关系是</p>
<p><img src="/../assets/%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%85%A5%E9%97%A8%E7%AF%87-%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/1707406435105.png" alt="1707406435105"></p>
<h4 id="4．相位与相位差"><a href="#4．相位与相位差" class="headerlink" title="4．相位与相位差"></a>4．相位与相位差</h4><h5 id="（1）相位"><a href="#（1）相位" class="headerlink" title="（1）相位"></a>（1）相位</h5><p><img src="/../assets/%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%85%A5%E9%97%A8%E7%AF%87-%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/1707406464006.png" alt="1707406464006"></p>
<p>​ 交流电在某时刻的角度称为交流电在该时刻的相位。</p>
<h5 id="（2）相位差"><a href="#（2）相位差" class="headerlink" title="（2）相位差"></a>（2）相位差</h5><p>​ 相位差是指两个同频率交流电的相位之差。</p>
<p><img src="/../assets/%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%85%A5%E9%97%A8%E7%AF%87-%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/1707406487924.png" alt="1707406487924"></p>
<p>​ 两个交流电存在相位差实际上就是两个交流电变化存在着时间差。</p>
]]></content>
      <categories>
        <category>电子技术</category>
      </categories>
      <tags>
        <tag>电子技术</tag>
      </tags>
  </entry>
  <entry>
    <title>电路基础</title>
    <url>/2023/08/10/%E7%94%B5%E8%B7%AF%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="一、电流、电压、电功率和能量"><a href="#一、电流、电压、电功率和能量" class="headerlink" title="一、电流、电压、电功率和能量"></a>一、电流、电压、电功率和能量</h2><h2 id="电流："><a href="#电流：" class="headerlink" title="电流："></a>电流：</h2><p><img src="/../assets/%E7%94%B5%E8%B7%AF%E5%9F%BA%E7%A1%80/1694242554424.png" alt="1694242554424"></p>
<p><strong>i 电流   q 电荷量  t时间</strong></p>
<h2 id="电压："><a href="#电压：" class="headerlink" title="电压："></a>电压：</h2><p><img src="/../assets/%E7%94%B5%E8%B7%AF%E5%9F%BA%E7%A1%80/1694242617918.png" alt="1694242617918"></p>
<p><strong>u 电压 w 功 q电荷量</strong></p>
<h2 id="功率："><a href="#功率：" class="headerlink" title="功率："></a>功率：</h2><p><img src="/../assets/%E7%94%B5%E8%B7%AF%E5%9F%BA%E7%A1%80/1694242654855.png" alt="1694242654855"></p>
<h2 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h2><p><img src="/../assets/%E7%94%B5%E8%B7%AF%E5%9F%BA%E7%A1%80/1694242683878.png" alt="1694242683878"></p>
<h2 id="二、电流和电压的参考方向"><a href="#二、电流和电压的参考方向" class="headerlink" title="二、电流和电压的参考方向"></a>二、电流和电压的参考方向</h2><p><img src="/../assets/%E7%94%B5%E8%B7%AF%E5%9F%BA%E7%A1%80/1694242819757.png" alt="1694242819757"></p>
<p><img src="/../assets/%E7%94%B5%E8%B7%AF%E5%9F%BA%E7%A1%80/1694242852600.png" alt="1694242852600"></p>
<p><img src="/../assets/%E7%94%B5%E8%B7%AF%E5%9F%BA%E7%A1%80/1694242876285.png" alt="1694242876285"></p>
<p><img src="/../assets/%E7%94%B5%E8%B7%AF%E5%9F%BA%E7%A1%80/1694242905012.png" alt="1694242905012"></p>
<p><img src="/../assets/%E7%94%B5%E8%B7%AF%E5%9F%BA%E7%A1%80/1694242939314.png" alt="1694242939314"></p>
<p><img src="/../assets/%E7%94%B5%E8%B7%AF%E5%9F%BA%E7%A1%80/1694242973674.png" alt="1694242973674"></p>
<p><img src="/../assets/%E7%94%B5%E8%B7%AF%E5%9F%BA%E7%A1%80/1694242986138.png" alt="1694242986138"></p>
<p><img src="/../assets/%E7%94%B5%E8%B7%AF%E5%9F%BA%E7%A1%80/1694243025513.png" alt="1694243025513"></p>
]]></content>
      <categories>
        <category>罗教授电路</category>
      </categories>
      <tags>
        <tag>电路基础</tag>
      </tags>
  </entry>
  <entry>
    <title>疑难杂症</title>
    <url>/2024/02/18/%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>报错</category>
      </categories>
  </entry>
  <entry>
    <title>第一章 数据结构绪论</title>
    <url>/2024/02/28/%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%BB%AA%E8%AE%BA/</url>
    <content><![CDATA[<h1 id="1-基本术语"><a href="#1-基本术语" class="headerlink" title="1.基本术语"></a>1.基本术语</h1><h3 id="1-1-数据"><a href="#1-1-数据" class="headerlink" title="1.1 数据"></a>1.1 数据</h3><p>数据：<strong>描述客观事物的符号，计算机中可以操作的对象，能被计算机识别并输入计算机处理的符号集合。</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/2/image_6a4306bd1b7da2784e2b1a0700b5ccf8.png" alt="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/2/image_6a4306bd1b7da2784e2b1a0700b5ccf8.png"></p>
<h3 id="1-2数据元素"><a href="#1-2数据元素" class="headerlink" title="1.2数据元素"></a>1.2数据元素</h3><p>数据元素：<strong>组成数据、有一定意义的单位，计算机中通常作为整体处理，也被称为记录。</strong></p>
<h3 id="1-3数据项"><a href="#1-3数据项" class="headerlink" title="1.3数据项"></a>1.3数据项</h3><p>数据项：一个数据元素可以由若干个数据项组成。</p>
<p>数据项是<strong>数据不可分割的最小单位</strong>。</p>
<h3 id="1-4-数据对象"><a href="#1-4-数据对象" class="headerlink" title="1.4 数据对象"></a>1.4 数据对象</h3><p>数据对象：<strong>性质相同的数据元素的集合，数据的子集。</strong></p>
<p>性质相同的意思是指数据<strong>元素具有相同数量的类型的数据项</strong>。如，人都有姓名、生日等数据项。</p>
<h3 id="1-5-数据结构"><a href="#1-5-数据结构" class="headerlink" title="1.5 数据结构"></a>1.5 数据结构</h3><p>简单来说就是关系，比如分子结构，组成分子的原子之间的排列方式。</p>
<p>严格来说，结构是指各个组成部分相互搭配和排序的方式。</p>
<p>在现实中，不同数据元素之间不是独立的，而是存在特定的关系，称为结构。</p>
<p><strong>数据结构：相互之间存在一种或多种特定关系的数据元素的集合。</strong></p>
<h2 id="1-2-逻辑机构与物理结构"><a href="#1-2-逻辑机构与物理结构" class="headerlink" title="1.2 逻辑机构与物理结构"></a>1.2 逻辑机构与物理结构</h2><p>逻辑结构是指<strong>数据对象中数据元素之间的相互关系</strong>。</p>
<h4 id="1-2-1-集合结构"><a href="#1-2-1-集合结构" class="headerlink" title="1.2.1 集合结构"></a>1.2.1 集合结构</h4><h5 id="（1）集合结构"><a href="#（1）集合结构" class="headerlink" title="（1）集合结构"></a>（1）集合结构</h5><p>集合结构中数据元素除了同属于一个集合外，它们之间没有其他关系。<br><img src="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/2/image_c95dbd6adf3c3d0b14d35067f1f19269.png" alt="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/2/image_c95dbd6adf3c3d0b14d35067f1f19269.png"></p>
<h5 id="（2）线性结构"><a href="#（2）线性结构" class="headerlink" title="（2）线性结构"></a>（2）线性结构</h5><p>数据元素之间是一对的关系。</p>
<p><img src="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/2/image_b31368fcfd0d6a0a13d89186230e7d82.png" alt="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/2/image_b31368fcfd0d6a0a13d89186230e7d82.png"></p>
<h5 id="（3）树形结构"><a href="#（3）树形结构" class="headerlink" title="（3）树形结构"></a>（3）树形结构</h5><p>数据元素之间存储一种一对多的层次关系。</p>
<p><img src="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/2/image_a84ebebbb9cad5b1fb79995e211ca19b.png" alt="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/2/image_a84ebebbb9cad5b1fb79995e211ca19b.png"></p>
<h5 id="（4）图形结构"><a href="#（4）图形结构" class="headerlink" title="（4）图形结构"></a>（4）图形结构</h5><p>图形结构：数据元素是多对多的关系。</p>
<p><img src="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/2/image_6a8288c246644054172bc1e5fc718c6b.png" alt="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/2/image_6a8288c246644054172bc1e5fc718c6b.png"></p>
<h4 id="1-2-2-物理结构（存储结构）"><a href="#1-2-2-物理结构（存储结构）" class="headerlink" title="1.2.2 物理结构（存储结构）"></a>1.2.2 物理结构（存储结构）</h4><p>物理结构：<strong>是指数据的逻辑结构在计算机中的存储形式</strong>。就是如何把数据元素存储到计算机的存储器中。存储器主要针对内存而言，数据组织通常用文件结构来描述。</p>
<h5 id="（1）顺序存储结构"><a href="#（1）顺序存储结构" class="headerlink" title="（1）顺序存储结构"></a>（1）顺序存储结构</h5><p>是把数据元素存放在地址连续的存储单元里，数据间的逻辑关系和物理关系是一样的。</p>
<p><img src="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/2/image_5df1901b7d4bcff361718f672714226f.png" alt="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/2/image_5df1901b7d4bcff361718f672714226f.png"></p>
<h5 id="（2）链式存储结构"><a href="#（2）链式存储结构" class="headerlink" title="（2）链式存储结构"></a>（2）链式存储结构</h5><p>是把数据元素存放在任意的存储单元里，这组存储单元是可以连续的，也可以不是连续的。</p>
<p>数据元素的存储关系不能反映逻辑关系，需要一个指针存放数据元素的地址，这一可以通过地址找到数据元素的位置。</p>
<p><strong>逻辑结构是面向问题，物理结构是面向计算机的，基本是讲目标的数据以及逻辑关系存储到计算机的内存中。</strong></p>
<h2 id="1-3-数据类型"><a href="#1-3-数据类型" class="headerlink" title="1.3 数据类型"></a>1.3 数据类型</h2><p>是一组性质相同的值的集合以及定义在此集合上的一些操作的总称。</p>
<h3 id="1-3-1-数据类型定义"><a href="#1-3-1-数据类型定义" class="headerlink" title="1.3.1 数据类型定义"></a>1.3.1 数据类型定义</h3><p>在C语言中，按照取值的不同，数据类型可以分为：</p>
<p><strong>原子类型：不可以再分解的基本类型，包括整形、实型、字符型等</strong></p>
<p><strong>结构类型：若干个类型组合而成，是可以再分解的。例如，整型数组是由若干整型数据组成。</strong></p>
<p>比如，定义int a，b，在给变量a，b赋值的时候不能超过int类型的取值范围。</p>
<h3 id="1-3-2-抽象数据类型"><a href="#1-3-2-抽象数据类型" class="headerlink" title="1.3.2 抽象数据类型"></a>1.3.2 抽象数据类型</h3><p>抽象是<strong>指抽取出事物具有普遍性的本质，对一个具体事务的一个概括。</strong></p>
<p>抽象数据类型：<strong>一个数学模型以及定义在该模型上的一组操作。</strong></p>
<p>抽象数据类型的定义取决于<strong>它的逻辑特性</strong>，而在计算机内部如何表示和实现无关。</p>
<p>抽象数据类型的标准格式：</p>
<p><img src="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/2/image_c03a7894ac53233d5306841b4ca03ec9.png" alt="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/2/image_c03a7894ac53233d5306841b4ca03ec9.png"></p>
<h3 id="1-4-总结"><a href="#1-4-总结" class="headerlink" title="1.4 总结"></a>1.4 总结</h3><p><img src="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/2/image_5caa3b65da33bdbfcb2a9dfd7ff6fe87.png" alt="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/2/image_5caa3b65da33bdbfcb2a9dfd7ff6fe87.png"></p>
<p>数据结构：<strong>是相互之间存在一种或多种特定关系的数据元素的集合。</strong></p>
<p>结构分类：</p>
<p><img src="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/2/image_e2357b668f447cc27f6a96b755a5cfd1.png" alt="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/2/image_e2357b668f447cc27f6a96b755a5cfd1.png"></p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>第一章 计算机系统基础知识</title>
    <url>/2024/02/26/%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h1 id="第一章-计算机系统基础知识"><a href="#第一章-计算机系统基础知识" class="headerlink" title="第一章 计算机系统基础知识"></a>第一章 计算机系统基础知识</h1><h2 id="1-1-嵌入式计算机系统概述"><a href="#1-1-嵌入式计算机系统概述" class="headerlink" title="1.1 嵌入式计算机系统概述"></a>1.1 嵌入式计算机系统概述</h2><p>根据 IEEE 的定义，嵌入式系统是“<strong>控制、监视或者辅助设备、机器和车间运行的配置</strong>“。</p>
<p>国内的系统定义是：以应用为中心、以计算机技术为基础，软件硬件可裁剪，适应应用系统对功能、可靠性、成本、体积、功耗严格要求的专用计算机系统。</p>
<p>可以认为，是一种专用的计算机系统，作为装置或设备的一部分。通常嵌入式系统是一个控制程序存储在 ROM 中的嵌入式处理器控制板。</p>
<h3 id="1-计算机硬件"><a href="#1-计算机硬件" class="headerlink" title="1.计算机硬件"></a>1.计算机硬件</h3><p>计算机硬件系统由<strong>运算器、控制器、存储器、输入设备和输出设备</strong>。通信部件也成为计算机系统基本组件。</p>
<p><strong>中央处理单元：</strong></p>
<p>运算器和控制器和相关部件集成一起，称为中央处理单元（Central Processing Unit，CPU）。用于数据加工、完成算术、逻辑运算以及控制功能。</p>
<p><strong>运算器：</strong></p>
<p>对数据进行加工处理的部件，主要完成算术和逻辑运算。主要功能是从主存中取出指令并进行分析，以控制计算机各个部位完成指令。</p>
<p><strong>存储器：</strong></p>
<p>计算机系统的记忆设备，分为<strong>内部存储器，简称内存、主存</strong>和外部存储器，简称外存或者辅存。</p>
<p>内存速度快、容量小，用于临时存储计算机运行所需要的程序、数据以及运算结果。</p>
<p>外村容量大、速度慢，用于长期存钱信息。</p>
<p><strong>寄存器</strong>：</p>
<p>CPU 存储器件，存放临时少量的数据、运算结果和整在执行的指令，速度快。</p>
<p>主机：</p>
<p>CPU 和主存器的有机组合。</p>
<p><strong>输入&#x2F;输出（I&#x2F;O）：</strong></p>
<p>设备位于主机之外，是计算机系统和外界交换信息的装置。</p>
<p>输入：信息输入计算机中。</p>
<p>输出：运算结果所要求的形式输出到外部设备或存储介质上。</p>
<h3 id="2-计算机软件"><a href="#2-计算机软件" class="headerlink" title="2.计算机软件"></a>2.计算机软件</h3><p>计算机软件指的是管理、运行、维护以及应用计算机所开发的程序和相关文档的集合。</p>
<p>分为系统软件、中间件和应用软件等类型。</p>
<p><strong>系统软件：</strong></p>
<p>管理系统的硬件和软件资源。</p>
<p><strong>应用软件：</strong></p>
<p>解决应用领域的具体问题。</p>
<p><strong>中间件：</strong></p>
<p>一类独立的系统软件或者服务程序，用来管理计算机资源和网络通信，提供通信处理、数据存取、事务处理、Web 服务、安全，跨平台等服务。</p>
<h3 id="3-计算机分类"><a href="#3-计算机分类" class="headerlink" title="3.计算机分类"></a>3.计算机分类</h3><p>（1）个人移动设备：带有多媒体用户界面的无线设备，如手机、平板。</p>
<p>（2）桌面计算机：台式计算机，笔记本等。</p>
<p>（3）服务器：服务器代替传统的大型机，主要提供大规模和可靠文件以及计算服务，强调可用性、可扩展性，和很高的吞吐率。</p>
<p>（4）集群&#x2F;仓库级计算机：一组桌面计算机或者服务器用网络连接起来，类似如大型计算机</p>
<p>（5）超级计算机：规格高，性能强大。</p>
<p>（6）嵌入式计算机：针对某个特定的应用，如网络、通信、音频、视频等，对功能、可靠、成本、体积、功耗有严格要求。</p>
<h2 id="1-2-数据表示"><a href="#1-2-数据表示" class="headerlink" title="1.2 数据表示"></a>1.2 数据表示</h2><p>二进制是计算机采用的一种数制。数值、文字、声音、图形图像等必须经过数值化编码才能被传送、存储和处理。</p>
<h3 id="1-2-1-进位计数制及转换"><a href="#1-2-1-进位计数制及转换" class="headerlink" title="1.2.1 进位计数制及转换"></a>1.2.1 进位计数制及转换</h3><p>如果只用<strong>r个基本符号</strong>表示<strong>数值</strong>，则称其<strong>r进制</strong>（Radix-r Number System），r称为<strong>改数制的基数</strong>（Radix）。</p>
<p>不同数制的共同特点：</p>
<p>（1）有固定的符号集，例如。二进制的基本符号0和1。十进制的基本符号为0-9。</p>
<p>（2）数制都是用位置表示法。不同位置的数符代表的值不同，与所在位置的权值有关。如<strong>十进制数</strong>1234.55表示为：</p>
<p><img src="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/2/image_b50ff6cfb95a61dfe215996203ee8979.png" alt="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/2/image_b50ff6cfb95a61dfe215996203ee8979.png"></p>
<p>常用进位数制有二进制、八进制、十进制、十六进制，如图</p>
<p><img src="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/2/image_73d4a641b1baacb83fe2ffe08fcbecf5.png" alt="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/2/image_73d4a641b1baacb83fe2ffe08fcbecf5.png"></p>
<p>不同数制的相互转换：</p>
<p>（1）十进制与二进制转换</p>
<p>在二进制中，r&#x3D;2，基本符号为0和1。二进制中的一个0或者1称为1位（bit）。</p>
<p>十进制数转换二进制数，整数部分和小数部分<strong>分别转换</strong>，然后<strong>再合并</strong>。</p>
<p>十进制整数转换二进制整数是“<strong>除2取余</strong>”。</p>
<p>十进制小数转换二进制小数是“<strong>乘2取整</strong>”。</p>
<p>例如1：十进制175.71875转换二进制数。</p>
<p><img src="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/2/image_c60529d879368a380c37d8040386230b.png" alt="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/2/image_c60529d879368a380c37d8040386230b.png"></p>
<p>十进制数写成二进制数权的大小展开的多显示，从高到低按照各项的系数。</p>
<p><img src="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/2/image_72972f0515b07707cb1d3bfd8efe40d9.png" alt="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/2/image_72972f0515b07707cb1d3bfd8efe40d9.png"></p>
<p>二进制数转成十进制数的方法是：将二进制数的每一位乘以它的权再相加，可以求得对应的十进制数值。</p>
<p>例如2：将二进制100110.101转换成十进制</p>
<p><img src="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/2/image_70bdc308e8b6121aeb50f09955f48622.png" alt="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/2/image_70bdc308e8b6121aeb50f09955f48622.png"></p>
<p>（2）八进制计数法与十进制、二进制计数法的相互转换</p>
<p>八进制计数制的基本符号是0-7。</p>
<p>十进制转换八进制数的方法：十进制整数采用“<strong>除8取余</strong>”的方法转换八进制整数。</p>
<p>十进制小数采用“<strong>乘8取整</strong>”的方法转成八进制小数</p>
]]></content>
      <categories>
        <category>嵌入式设计</category>
      </categories>
      <tags>
        <tag>软考</tag>
      </tags>
  </entry>
  <entry>
    <title>第一章 C数据类型及语句01</title>
    <url>/2023/08/06/%E7%AC%AC%E4%B8%80%E7%AB%A0-C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8F%8A%E8%AF%AD%E5%8F%A501/</url>
    <content><![CDATA[<h3 id="1-1-C-语言的特点"><a href="#1-1-C-语言的特点" class="headerlink" title="1.1 C 语言的特点"></a>1.1 C 语言的特点</h3><p>1.#include&lt;stdio.h&gt; 头文件包含，一定要有</p>
<p>2.每一个 c 语言的程序有且只有一个 main 函数，这是整个程序的开始位置</p>
<p>3.C 语言中()、[]、{}、“”、’’、都必须成对出现,必须是英文符号</p>
<p>4.C 语言中语句要以分号结束。</p>
<p>5.&#x2F;&#x2F;为注释 &#x2F;* *&#x2F;为多行注释</p>
<h3 id="1-2-关键字"><a href="#1-2-关键字" class="headerlink" title="1.2 关键字"></a>1.2 关键字</h3><p>1、char 字符型</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> ch1 = <span class="string">&#x27;zifu&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>2、short 短整型 占 2 个字节</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">short</span> <span class="type">int</span> a = <span class="number">11</span>; <span class="number">-32768</span> - --<span class="number">-32767</span></span><br></pre></td></tr></table></figure>

<p>3、int 整形，在 32 位占 4 个字节，16 位站 2 个</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">44</span>; <span class="number">-20</span> 亿--<span class="number">-20</span> 亿</span><br></pre></td></tr></table></figure>

<p>4、long 长整型 在 32 位占 4 个字节</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">long</span> <span class="type">int</span> a = <span class="number">66</span>;</span><br></pre></td></tr></table></figure>

<p>5、float 单精度浮点型（实数），占 4 个字节</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">float</span> b = <span class="number">3.8f</span>;</span><br></pre></td></tr></table></figure>

<p>6、 double 双精度浮点型 （实数），占 8 个字节</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">double</span> b=<span class="number">3.8</span>;</span><br></pre></td></tr></table></figure>

<p>7、 struct 这个关键字是与结构体类型相关的关键字，可以用它来定义结构体类型</p>
<p>8、 union 这个关键字是与共用体（联合体）相关的关键字</p>
<p>9、 enum 与枚举类型相关的关键字</p>
<p>10、signed 有符号(正负)的意思</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义cahr，整形数据使用signed修饰，代表数据是有符号的，可以保存整数，复数</span></span><br><span class="line"><span class="type">signed</span> <span class="type">int</span> b = <span class="number">-6</span>;  <span class="comment">//关键字可以省略</span></span><br></pre></td></tr></table></figure>

<p>11、unsigned 无符号的意思</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">int</span> a = <span class="number">101</span>; <span class="comment">//只能保存整数和0</span></span><br></pre></td></tr></table></figure>

<p>12、void 空类型的关键字</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//void 是用来修饰函数的参数或者返回值，代表函数没有参数或没有返回值</span></span><br><span class="line"><span class="comment">//例：</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">fun</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//代表 fun 函数没有返回值，fun 函数没有参数</span></span><br></pre></td></tr></table></figure>

<p>1.1.2 存储相关关键字</p>
<p>1、<strong>register</strong> 是寄存器的意思，用 register 修饰的变量是寄存器变量（尽量分配存储空间在寄存器中）</p>
<p>(1): 定义的变量不一定真的存放在寄存器中。</p>
<p>(2)：cpu 取数据的时候去寄存器中拿数据比去内存中拿数据要快</p>
<p>(3)：因为寄存器比较宝贵，所以不能定义寄存器数组</p>
<p>(4)：register 只能修饰 字符型及整型的，不能修饰浮点型</p>
<p>(5)：因为 register 修饰的变量可能存放在寄存器中不存放在内存中，所以不能对寄存器变量取地址。因为只有存放在内存中的数据才有地址</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">register</span> <span class="type">int</span> a;</span><br><span class="line"><span class="type">int</span> *p;</span><br><span class="line">p = &amp;a; <span class="comment">//错误的，a 可能没有地址</span></span><br></pre></td></tr></table></figure>

<p>2、static 是静态的意思</p>
<p>static 可以修饰全局变量、局部变量、函数</p>
<p>3、const 常量的意思</p>
<p>用 const 修饰的变量是只读的，不能修改它的值（<strong>可以修改指针</strong>）</p>
<p>4、auto int a;和 int a 是等价的，auto 关键字现在基本不用</p>
<p>5、extern 是外部的意思，一般用于函数和全局变量的声明</p>
<h3 id="1-1-3-控制语句相关的关键字"><a href="#1-1-3-控制语句相关的关键字" class="headerlink" title="1.1.3 控制语句相关的关键字"></a>1.1.3 控制语句相关的关键字</h3><p>if 、else 、break、continue、for 、while、do、switch case、goto、default</p>
<h3 id="1-1-4-其他关键字"><a href="#1-1-4-其他关键字" class="headerlink" title="1.1.4 其他关键字"></a>1.1.4 其他关键字</h3><p>1、sizeof</p>
<p>使用来测变量、数组的占用存储空间的大小（字节数）</p>
<p>例 3：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a=<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> num;</span><br><span class="line">num=<span class="keyword">sizeof</span>(a);</span><br></pre></td></tr></table></figure>

<p>2、typedef 重命名相关的关键字</p>
<p>关键字 ，作用是给一个已有的类型，重新起个类型名，并没有创造一个新的类型</p>
<p>以前大家看程序的时候见过类似的变量定义方法</p>
<p>INT16 a;</p>
<p>U8 ch;</p>
<p>INT32 b</p>
<p>3、volatile 易改变的意思</p>
<p>用 volatile 定义的变量，是易改变的，即告诉 cpu 每次用 volatile 变量的时候，重新去内存中取 。保证用的是最新的值,而不是寄存器中的备份。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//volatile 关键字现在较少适用</span></span><br><span class="line"><span class="keyword">volatile</span> <span class="type">int</span> a=<span class="number">10</span>;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>千锋C语言</category>
      </categories>
      <tags>
        <tag>嵌入式C</tag>
      </tags>
  </entry>
  <entry>
    <title>第一章 C数据类型及语句02</title>
    <url>/2023/08/06/%E7%AC%AC%E4%B8%80%E7%AB%A0-C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8F%8A%E8%AF%AD%E5%8F%A502/</url>
    <content><![CDATA[<h3 id="1-2-数据类型"><a href="#1-2-数据类型" class="headerlink" title="1.2 数据类型"></a>1.2 数据类型</h3><p><strong>1.2.1 基本类型</strong></p>
<p>char 、short int 、int、long int、float、double</p>
<p><strong>1.2.2 构造类型</strong></p>
<p>由若干个相同或不同类型数据构成的集合，这种数据类型被称为构造类型</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">10</span>];</span><br></pre></td></tr></table></figure>

<p><strong>格式化输出字符：</strong></p>
<p>%d 十进制有符号整数</p>
<p>%ld 十进制 long 有符号整数</p>
<p>%u 十进制无符号整数</p>
<p>%o 以八进制表示的整数</p>
<p>%x 以十六进制表示的整数</p>
<p>%f float 型浮点数</p>
<p>%lf double 型浮点数</p>
<p>%e 指数形式的浮点数</p>
<p>%c 单个字符</p>
<p>%s 字符串</p>
<p>%p 指针的值</p>
<p><strong>特殊应用：</strong></p>
<p>%3d 要求宽度为 3 位，如果不足 3 位，前面空格补齐;如果足够 3 位，此语句无效</p>
<p>%03d 要求宽度为 3 位，如果不足 3 位，前面 0 补齐;如果足够 3 位，此语句无效</p>
<p>%-3d 要求宽度为 3 位，如果不足 3 位，后面空格补齐;如果足够 3 位，此语句无效</p>
<p>%.2f 小数点后只保留 2 位</p>
<p><strong>1.2.3 类型转换</strong></p>
<p><strong>自动转换:</strong></p>
<p>遵循一定的规则,由编译系统自动完成.</p>
<p><strong>强制类型转换：</strong></p>
<p>把表达式的运算结果强制转换成所需的数据类型</p>
<p><strong>自动转换的原则：</strong></p>
<p>1、 占用内存字节数少(值域小)的类型，向占用内存字节数多(值域大)的类型转换,以保证精度不降低.</p>
<p>2、 转换方向:</p>
<p><img src="/../assets/%E7%AC%AC%E4%B8%80%E7%AB%A0-C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8F%8A%E8%AF%AD%E5%8F%A502/1691332523358.png" alt="1691332523358"></p>
<p><strong>1.2.4</strong> <strong>指针</strong></p>
<h3 id="1-3-运算符"><a href="#1-3-运算符" class="headerlink" title="1.3 运算符"></a><strong>1.3</strong> <strong>运算符</strong></h3><p><strong>1.3.1</strong> <strong>运算符</strong></p>
<p>用运算符将运算对象(也称操作数）连接起来的、符合Ｃ语法规则的式子，称为Ｃ表达式运算对象包括常量、变量、函数等</p>
<p><strong>1.3.2</strong> <strong>运算符的分类：</strong></p>
<p>1、双目运算符：即参加运算的操作数有两个</p>
<p>例： +</p>
<p>​ a+b</p>
<p>2、单目运算符：参加运算的操作数只有一个</p>
<p>​ ++自增运算符 给变量值+1</p>
<p>​ –自减运算符</p>
<p>​ int a&#x3D;10;</p>
<p>​ a++;</p>
<p>3、三目运算符:即参加运算的操作数有 3 个</p>
<p>()?():()</p>
<p><strong>1.3.3</strong> <strong>算数运算符</strong></p>
<p>+ - _ &#x2F; % +&#x3D; -&#x3D; _&#x3D; &#x2F;&#x3D; %&#x3D;</p>
<p><strong>1.3.4</strong> <strong>关系运算符</strong></p>
<p>（＞、＜、&#x3D; &#x3D;、&gt;&#x3D;、&lt;&#x3D;、!&#x3D; ）</p>
<p><strong>1.3.5</strong> <strong>逻辑运算符</strong></p>
<p><strong>1、&amp;&amp; 逻辑与</strong></p>
<p>两个条件都为真，则结果为真</p>
<p>if((a&gt;b) &amp;&amp; (a&lt;c))</p>
<p><strong>2、|| 逻辑或</strong></p>
<p>两个条件至少有一个为真，则结果为真</p>
<p>if((a&gt;b) || (a&lt;c))</p>
<p><strong>3、! 逻辑非</strong></p>
<p>if(!(a&gt;b))</p>
<p>{</p>
<p>}</p>
<p><strong>1.3.6</strong> <strong>位运算符</strong></p>
<p><strong>1、&amp;按位与</strong></p>
<p>任何值与 0 得 0，与 1 保持不变</p>
<p>使某位清 0</p>
<p>0101 1011 &amp;</p>
<p>1011 0100</p>
<p>0001 0000</p>
<p><strong>2、| 按位或</strong></p>
<p>任何值或 1 得 1，或 0 保持不变</p>
<p>0101 0011 |</p>
<p>1011 0100</p>
<p>1111 0111</p>
<p><strong>3、~ 按位取反</strong></p>
<p>1 变 0，0 变 1</p>
<p>0101 1101 ~</p>
<p>1010 0010</p>
<p><strong>4、^ 按位异或</strong></p>
<p>相异得 1，相同得 0</p>
<p>1001 1100 ^</p>
<p>0101 1010</p>
<p>1100 0110</p>
<p><strong>5、位移</strong></p>
<p>&gt;&gt;右移</p>
<p>&lt;&lt; 左移</p>
<p>注意右移分：逻辑右移、算数右移</p>
<p>（1）右移</p>
<p>​ 逻辑右移 高位补 0 低位溢出</p>
<p>​ 算数右移 高位补符号位，低位溢出</p>
<p>（2）、左移*<strong>*&lt;&lt;</strong> <strong>高位溢出，低位补</strong> <strong>0</strong></p>
<p>​ 5&lt;&lt;1</p>
<p><strong>1.3.7</strong> <strong>条件运算符号</strong></p>
<p>()?():()<br>A?B:C;<br>如果？前边的表达式成立，整个表达式的值，是？和：之&#x2F;&#x2F;间的表达式的结果否则是：之后的表达式的结果</p>
<p><strong>1.3.8</strong> <strong>逗号运算符</strong></p>
<p>(… , … , …)</p>
<p>例如：A &#x3D; (B , C , D)</p>
<p><strong>1.3.9</strong> <strong>自增自减运算符</strong></p>
<p>++ ++i 先加 ，后用</p>
<p>--</p>
<p>i++ i–</p>
<p><strong>1.3.10</strong> <strong>运算符优先级表</strong></p>
<p><img src="/../assets/%E7%AC%AC%E4%B8%80%E7%AB%A0-C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8F%8A%E8%AF%AD%E5%8F%A502/1691333205109.png" alt="1691333205109"></p>
<p><strong>1.4</strong> <strong>控制语句相关关键字</strong></p>
<p><strong>1、 if 语句</strong></p>
<p>形式：</p>
<ol>
<li>if(条件表达式)</li>
</ol>
<p>{ &#x2F;&#x2F;复合语句，若干条语句的集合</p>
<p>语句 1;</p>
<p>语句 2；</p>
<p>}</p>
<p>如果条件成立执行大括号里的所有语句，不成立的话大括号里的语句不执行</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> a=<span class="number">10</span>;</span><br><span class="line">	<span class="keyword">if</span>(a&gt;<span class="number">5</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;a&gt;5\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>if(条件表达式)</li>
</ol>
<p>{</p>
<p>语句块 1</p>
<p>}</p>
<p>else</p>
<p>{</p>
<p>语句块 2</p>
<p>}</p>
<p>if else 语句的作用是，如果 if 的条件成立，执行 if 后面{}内的语句，否则执行 else 后的语句</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> a=<span class="number">10</span>;</span><br><span class="line">	<span class="keyword">if</span>(a&gt;<span class="number">5</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;a&gt;5\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;a&lt;=5\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>if(条件表达式)</li>
</ol>
<p>{</p>
<p>}</p>
<p>else if(条件表达式)</p>
<p>{</p>
<p>}</p>
<p>else if(条件表达式)</p>
<p>{</p>
<p>}</p>
<p>else</p>
<p>{</p>
<p>}</p>
<p>在判断的时候，从上往下判断，一旦有成立的表达式，执行对应的复合语句， 下边的就不再判断了，各个条件判断是互斥的</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">char</span> ch;</span><br><span class="line">	<span class="type">float</span> score = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入学生分数:\n&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>,&amp;score);</span><br><span class="line">	<span class="keyword">if</span>(score&lt;<span class="number">0</span> || score &gt;<span class="number">100</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;你所输入的信息有错\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>( score&lt;<span class="number">60</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		ch = <span class="string">&#x27;E&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> ( score &lt; <span class="number">70</span> )</span><br><span class="line">	&#123;</span><br><span class="line">		ch = <span class="string">&#x27;D&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> ( score &lt; <span class="number">80</span> )</span><br><span class="line">	&#123;</span><br><span class="line">		ch = <span class="string">&#x27;C&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> ( score &lt; <span class="number">90</span> )</span><br><span class="line">	&#123;</span><br><span class="line">		ch = <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		ch = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;成绩评定为：%c\n&quot;</span>,ch);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>2、 switch 语句</p>
<p>switch（表达式）&#x2F;&#x2F;表达式只能是字符型或整型的(short int int long int)</p>
<p>{</p>
<p>case 常量表达式 1：</p>
<p>语句 1；</p>
<p>break；</p>
<p>case 常量表达式 2：</p>
<p>语句 2;</p>
<p>break；</p>
<p>default：</p>
<p>语句 3；</p>
<p>break;</p>
<p>}</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入一个 1~7 的数\n&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">	<span class="keyword">switch</span>(n)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;星期一\n&quot;</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;星期二\n&quot;</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;星期三\n&quot;</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;星期四\n&quot;</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;星期五\n&quot;</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;星期六\n&quot;</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;星期天\n&quot;</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;您的输入有误，请输入 1~7 的数\n&quot;</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p><strong>1.4.2</strong> <strong>循环控制语句相关的关键字</strong></p>
<p><strong>1、 for 循环</strong></p>
<p>for(表达式 1;表达式 2;表达式 3)</p>
<p>{&#x2F;&#x2F;复合语句，循环体</p>
<p>}</p>
<p>第一次进入循环的时候执行表达式 1，表达式 1 只干一次，</p>
<p>表达式 2，是循环的条件，只有表达式 2 为真了，才执行循环体，也就是说</p>
<p>每次进入循环体之前要判断表达式 2 是否为真。</p>
<p>每次执行完循环体后，首先执行表达式 3</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> i;</span><br><span class="line">	<span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		sum = sum+i;</span><br><span class="line">	&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;sum=%d\n&quot;</span>,sum);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="comment">//例 26：</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> i,j;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;i++)</span><br><span class="line">	&#123;</span><br><span class="line">	<span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=i;j++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d*%d=%d &quot;</span>,i,j,i*j);</span><br><span class="line">	&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p><strong>2、 while 循环</strong></p>
<ol>
<li>形式 1：</li>
</ol>
<p>while(条件表达式)</p>
<p>{&#x2F;&#x2F;循环体，复合语句</p>
<p>}</p>
<p>进入 while 循环的时候，首先会判断条件表达式是否为真，为真进入循环体，否则退出循环</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 2) 形式 1：</span></span><br><span class="line"><span class="comment">while(条件表达式)</span></span><br><span class="line"><span class="comment">&#123;//循环体，复合语句</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">	<span class="type">int</span> i=<span class="number">1</span>;</span><br><span class="line">	<span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(i&lt;=<span class="number">100</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		sum = sum+i;</span><br><span class="line">		i++;</span><br><span class="line">	&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;sum=%d\n&quot;</span>,sum);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>形式 2 ： do</li>
</ol>
<p>do{&#x2F;&#x2F;循环体</p>
<p>}while(条件表达式);</p>
<p>先执行循环体里的代码，然后去判断条件表达式是否为真，为真再次执行循环体，否则退出循环</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> i=<span class="number">1</span>;</span><br><span class="line">	<span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">do</span></span><br><span class="line">	&#123;</span><br><span class="line">		sum = sum+i;</span><br><span class="line">		i++;</span><br><span class="line">	&#125;<span class="keyword">while</span>(i&lt;=<span class="number">100</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;sum=%d\n&quot;</span>,sum);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>形式 1 和形式 2 的区别是，形式 1 先判断在执行循环体，形式 2 先执行循环体，再判断</p>
<p>break 跳出循环</p>
<p>continue 结束本次循环，进入下一次循环</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> i;</span><br><span class="line">		<span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(i==<span class="number">10</span>)</span><br><span class="line">		<span class="keyword">break</span>;<span class="comment">//将 break 修改成 continue 看效果</span></span><br><span class="line">		sum = sum+i;</span><br><span class="line">	&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;sum=%d\n&quot;</span>,sum);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">//返回函数的意思。结束 return 所在的函数，</span></span><br><span class="line"><span class="comment">//在普通函数中，返回到被调用处，在 main 函数中的话，结束程序</span></span><br></pre></td></tr></table></figure>

<p><strong>3、 goto</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;test000000000000000000\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;test1111111111111111\n&quot;</span>);</span><br><span class="line">	<span class="keyword">goto</span> xiutao;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;test222222222222222222\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;test3333333333333333\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;test444444444444444444444\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;test55555555555555555555\n&quot;</span>);</span><br><span class="line">	xiutao:</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;test66666666666666666\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>千锋C语言</category>
      </categories>
      <tags>
        <tag>嵌入式C</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql数据库</title>
    <url>/2023/08/29/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E4%BA%86%E8%A7%A3%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<h1 id="一、了解-SQL"><a href="#一、了解-SQL" class="headerlink" title="一、了解 SQL"></a>一、了解 SQL</h1><h2 id="1、什么是数据库"><a href="#1、什么是数据库" class="headerlink" title="1、什么是数据库"></a>1、什么是数据库</h2><p>数据库是以某种组织的方式存储的数据集合。</p>
<p>数据库（database）保存有组织的数据的容器（一个文件或者一组文件）</p>
<p><strong>更准确的来说，数据库软件称为数据库管理系统（DBMS）。通过 DBMS 创建和操作的容器</strong></p>
<h2 id="2、什么是表"><a href="#2、什么是表" class="headerlink" title="2、什么是表"></a>2、什么是表</h2><p><strong>表 是一种结构化的文件，用来存储某种特定类型的数据。</strong></p>
<h2 id="3、什么是模式"><a href="#3、什么是模式" class="headerlink" title="3、什么是模式"></a>3、什么是模式</h2><p><strong>模式 关于数据库和表的布局以及特性的信息。</strong></p>
<h2 id="4、列和数据类型"><a href="#4、列和数据类型" class="headerlink" title="4、列和数据类型"></a>4、列和数据类型</h2><p>表是由列组成。列中存储这表中某种部分的信息。</p>
<p><strong>列 表中的一个字段。所有表都是由一个或多个列组成的。</strong></p>
<p><strong>数据类型 所容许的数据的类型。每个字段都有相应的数据类型。</strong></p>
<h2 id="5、行"><a href="#5、行" class="headerlink" title="5、行"></a>5、行</h2><p>表中的数据都是按行存储的，保存的记录存储在自己的行内。</p>
<p><strong>行 表中的一个记录。</strong></p>
<h2 id="6、主键"><a href="#6、主键" class="headerlink" title="6、主键"></a>6、主键</h2><p><strong>主键（又称键码、码） 一列（一组列），其值能够唯一区分表中的每个行。</strong></p>
<p>满足条件：</p>
<p><strong>任意两行都不具有相同的主键值。</strong></p>
<p><strong>每个行都必须具有一个主键值（主键列不允许 null 值）</strong></p>
<h1 id="二、了解-mysql"><a href="#二、了解-mysql" class="headerlink" title="二、了解 mysql"></a>二、了解 mysql</h1><h2 id="一、客户机-服务器软件"><a href="#一、客户机-服务器软件" class="headerlink" title="一、客户机-服务器软件"></a>一、客户机-服务器软件</h2><p>MySQL、Oracle 以及 Microsoft SQL Server 等数据库是基于客户机—服务器的数据库</p>
<p>DBMS（数据库管理系统）可以分为两类：</p>
<p>（1）基于共享文件系统的 DBMS（2）基于客户机-服务器的 DBMS</p>
<ul>
<li><strong>与数据文件打交道的只有服务器软件。关于数据、数据添加、删除和数据更新的所有请求都是由服务器软件完成。</strong></li>
<li><strong>客户机是与用户打交道的软件。例如：请求一个按字母顺序列出的产品表，则客户机软件通过网阔提交该请求给服务器软件。服务器软件处理这个请求，根据需求过滤、丢弃和排序数据，然后送回客户机软件。</strong></li>
</ul>
<h1 id="三、排序索检数据"><a href="#三、排序索检数据" class="headerlink" title="三、排序索检数据"></a>三、排序索检数据</h1><h2 id="一、子句"><a href="#一、子句" class="headerlink" title="一、子句"></a>一、子句</h2><p>有些字句是必需，有一些是可选的。一个子句通常由一个<strong>关键字和所提供的数据</strong>组成。</p>
]]></content>
      <categories>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>第一章-初识STM32</title>
    <url>/2023/08/17/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E5%88%9D%E8%AF%86STM32/</url>
    <content><![CDATA[<h2 id="一、芯片里面有什么"><a href="#一、芯片里面有什么" class="headerlink" title="一、芯片里面有什么"></a>一、芯片里面有什么</h2><p>1.片上外设</p>
<p>内核之外的部件叫<strong>核外外设或片上外设</strong>。GPIO，USART、I2C、SPI 都叫做<strong>片上外设</strong>。</p>
<p><img src="/../assets/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E5%88%9D%E8%AF%86STM32/1692286715541.png" alt="1692286715541"></p>
<p>芯片内核和外设之间，有总线连接，主控总线有 8 条，被控总线有 7 条。</p>
<p>2、寄存器映射</p>
<p>给存储器分配地址的过程称为<strong>存储器映射</strong>。如果是给吹气球再分配一个地址叫<strong>存储器重映射</strong>。</p>
<p>3、存储器区域功能划分</p>
<p><img src="/../assets/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E5%88%9D%E8%AF%86STM32/1692287169333.png" alt="1692287169333"></p>
<p>（1）BLock0 功能划分</p>
<p><img src="/../assets/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E5%88%9D%E8%AF%86STM32/1692287359301.png" alt="1692287359301"></p>
<p>（2）Block1 功能划分</p>
<p><img src="/../assets/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E5%88%9D%E8%AF%86STM32/1692287500692.png" alt="1692287500692"></p>
<p>（3）Block2 功能划分</p>
<p><img src="/../assets/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E5%88%9D%E8%AF%86STM32/1692287707507.png" alt="1692287707507"></p>
<h2 id="二、寄存器"><a href="#二、寄存器" class="headerlink" title="二、寄存器"></a>二、寄存器</h2><p>以<strong>功能为名给这个内存单位取一个别名</strong>，这个别名就是我们经常说的<strong>寄存器</strong>，<strong>分配好地址的特定功能的内存单元</strong>取别名的过程叫做<strong>寄存器映射</strong></p>
<p><strong>如何理解寄存器</strong></p>
<p><img src="/../assets/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E5%88%9D%E8%AF%86STM32/1692288238634.png" alt="1692288238634"></p>
<p>1、名称 (GPIOx_BSRR)(x&#x3D;A…I)</p>
<p>该寄存器名为(GPIOx_BSRR)(x&#x3D;A…I)，其中 x 可以为 A-I，适用于 GPIOA、GPIOB 到 GPIOU</p>
<p>2、偏移地址，寄存器相对这个外设的基地址的编译</p>
<p>寄存器的编译地址是 0x18，可以查到 GPIOA 外设的基地址是 0x4002 0000，GPIOx_BSRR 寄存器地址为，0x4002 0000+0x18</p>
<p>3、寄存器位表</p>
<p>0-31 的名称以及权限。最上方是位编号，中间位名称，最下方是读写权限，w 只写，r 只读，rw 可读写</p>
<p>4、位功能说明</p>
<p>BRy 及 BSy，其中的 y 数值可以是 0-15，这里的 0-15 表示端口的引脚号， 如 BR0、BS0 用于控制 GPIOx 的第 0 个引脚，若 x 表示 GPIOA，那就是控制 GPIOA 的第 0 引脚， 而 BR1、BS1 就是控制 GPIOA 第 1 个引脚。</p>
<p>其中，“复位”是将该位设置为 0 的意思，而“置位”表示将该位设置为 1；如果对 BR0 写入“</p>
<p>1”的话，那么 GPIOx 的第 0 个引脚就会输出“低电平”，但是对</p>
<p>BR0 写入“0”的话，却不会影响 ODR0 位，所以引脚电平不会改变。要想该引脚输出“高电平”， 就需要对“BS0”位写入“1”，寄存器位 BSy 与 BRy 是相反的操作</p>
<h2 id="三、C-语言对寄存器的封装"><a href="#三、C-语言对寄存器的封装" class="headerlink" title="三、C 语言对寄存器的封装"></a>三、C 语言对寄存器的封装</h2><p>总线基地址和外设基地址都以相应的宏定义起来，总线或者外设都以他们的名字作为宏名</p>
<h2 id="四、STM32-分类"><a href="#四、STM32-分类" class="headerlink" title="四、STM32 分类"></a>四、STM32 分类</h2><p><img src="/../assets/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E5%88%9D%E8%AF%86STM32/1692284102687.png" alt="1692284102687"></p>
<h2 id="五、STM32-命名方法"><a href="#五、STM32-命名方法" class="headerlink" title="五、STM32 命名方法"></a>五、STM32 命名方法</h2><p>以 STM32F407ZGT6 来讲解</p>
<p>家族：32bit 的 MCU</p>
<p>产品类型：F 表示基础型</p>
<p>引脚数：Z 表示 144pin，C 为 48，R 为 64，V 为 100，Z 为 144，B 为 208，N216</p>
<p>FLASH：G 表示 1024KB,C 表示 256，E 表示 512，I 表示 2048</p>
<p>封装：T 表示 QFP 封装最常用的封装</p>
<p>温度：6 表示等级为 A：-40~85°</p>
<p><img src="/../assets/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E5%88%9D%E8%AF%86STM32/1692284365745.png" alt="1692284365745"></p>
]]></content>
      <categories>
        <category>野火STM32</category>
      </categories>
      <tags>
        <tag>STM32</tag>
      </tags>
  </entry>
  <entry>
    <title>第一章 电路模型和电路定律</title>
    <url>/2023/09/09/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E7%94%B5%E8%B7%AF%E6%A8%A1%E5%9E%8B%E5%92%8C%E7%94%B5%E8%B7%AF%E5%AE%9A%E5%BE%8B/</url>
    <content><![CDATA[<h2 id="1-1-电路和电路模型"><a href="#1-1-电路和电路模型" class="headerlink" title="1.1 电路和电路模型"></a>1.1 电路和电路模型</h2><p>实际电路：由电工设备和电气器件按预期目的连接构成的电路的通路。</p>
<p>功能：a 能量的传输、分配与转换</p>
<p>​              b 信息的传递、控制与处理</p>
<p>共性：建立在痛一电路理论的基础上。</p>
<h3 id="1-1-1-电路模型"><a href="#1-1-1-电路模型" class="headerlink" title="1.1.1 电路模型"></a>1.1.1 电路模型</h3><p><img src="/../assets/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E7%94%B5%E8%B7%AF%E6%A8%A1%E5%9E%8B%E5%92%8C%E7%94%B5%E8%B7%AF%E5%AE%9A%E5%BE%8B/1694263535061.png" alt="1694263535061"></p>
<p>电路模型：反应实际电路部件的主要电磁性质的<strong>理想电路</strong>元件以及组合</p>
<p>理想电路元件：由某种确定的电磁性能的理想元件。</p>
<p>电阻元件：表示消耗电能的元件<img src="/../assets/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E7%94%B5%E8%B7%AF%E6%A8%A1%E5%9E%8B%E5%92%8C%E7%94%B5%E8%B7%AF%E5%AE%9A%E5%BE%8B/1694263845243.png" alt="1694263845243"></p>
<p>电感元件：表示产生磁场，存储磁场能量的元件</p>
<p>电容元件：表示产生电场，存储电厂能量的元件</p>
<p>电压源与电流源：表示将其它形式的能量转变成电能的元件</p>
<p><strong>注意：</strong></p>
<p><img src="/../assets/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E7%94%B5%E8%B7%AF%E6%A8%A1%E5%9E%8B%E5%92%8C%E7%94%B5%E8%B7%AF%E5%AE%9A%E5%BE%8B/1694263950246.png" alt="1694263950246"></p>
<p><img src="/../assets/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E7%94%B5%E8%B7%AF%E6%A8%A1%E5%9E%8B%E5%92%8C%E7%94%B5%E8%B7%AF%E5%AE%9A%E5%BE%8B/1694263974908.png" alt="1694263974908"></p>
<h2 id="1-2电流和电压的参考方向"><a href="#1-2电流和电压的参考方向" class="headerlink" title="1.2电流和电压的参考方向"></a>1.2电流和电压的参考方向</h2><p>电路中的主要物理量由电压、电流、电荷、磁链、能量、电功率等。在线性电路分析中，主要关心的物理量是<strong>电路、电压和功率</strong>。</p>
<h3 id="1-电流的参考方向"><a href="#1-电流的参考方向" class="headerlink" title="1.电流的参考方向"></a>1.电流的参考方向</h3><p>电流：带电粒子由规则运动的定向运动</p>
<p>电流强度：单位时间内通过导体横截面的电荷量</p>
<p><img src="/../assets/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E7%94%B5%E8%B7%AF%E6%A8%A1%E5%9E%8B%E5%92%8C%E7%94%B5%E8%B7%AF%E5%AE%9A%E5%BE%8B/1694265050074.png" alt="1694265050074"></p>
<p><img src="/../assets/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E7%94%B5%E8%B7%AF%E6%A8%A1%E5%9E%8B%E5%92%8C%E7%94%B5%E8%B7%AF%E5%AE%9A%E5%BE%8B/1694265100359.png" alt="1694265100359"></p>
<p><img src="/../assets/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E7%94%B5%E8%B7%AF%E6%A8%A1%E5%9E%8B%E5%92%8C%E7%94%B5%E8%B7%AF%E5%AE%9A%E5%BE%8B/1694265136194.png" alt="1694265136194"></p>
<p><img src="/../assets/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E7%94%B5%E8%B7%AF%E6%A8%A1%E5%9E%8B%E5%92%8C%E7%94%B5%E8%B7%AF%E5%AE%9A%E5%BE%8B/1694265155728.png" alt="1694265155728"></p>
<p><img src="/../assets/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E7%94%B5%E8%B7%AF%E6%A8%A1%E5%9E%8B%E5%92%8C%E7%94%B5%E8%B7%AF%E5%AE%9A%E5%BE%8B/1694265184041.png" alt="1694265184041"></p>
<p><img src="/../assets/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E7%94%B5%E8%B7%AF%E6%A8%A1%E5%9E%8B%E5%92%8C%E7%94%B5%E8%B7%AF%E5%AE%9A%E5%BE%8B/1694265234540.png" alt="1694265234540"></p>
<p><img src="/../assets/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E7%94%B5%E8%B7%AF%E6%A8%A1%E5%9E%8B%E5%92%8C%E7%94%B5%E8%B7%AF%E5%AE%9A%E5%BE%8B/1694265255827.png" alt="1694265255827"></p>
<p><img src="/../assets/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E7%94%B5%E8%B7%AF%E6%A8%A1%E5%9E%8B%E5%92%8C%E7%94%B5%E8%B7%AF%E5%AE%9A%E5%BE%8B/1694265274036.png" alt="1694265274036"></p>
<p><img src="/../assets/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E7%94%B5%E8%B7%AF%E6%A8%A1%E5%9E%8B%E5%92%8C%E7%94%B5%E8%B7%AF%E5%AE%9A%E5%BE%8B/1694265285159.png" alt="1694265285159"></p>
<p><img src="/../assets/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E7%94%B5%E8%B7%AF%E6%A8%A1%E5%9E%8B%E5%92%8C%E7%94%B5%E8%B7%AF%E5%AE%9A%E5%BE%8B/1694265305717.png" alt="1694265305717"></p>
<p><img src="/../assets/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E7%94%B5%E8%B7%AF%E6%A8%A1%E5%9E%8B%E5%92%8C%E7%94%B5%E8%B7%AF%E5%AE%9A%E5%BE%8B/1694265329854.png" alt="1694265329854"></p>
]]></content>
      <categories>
        <category>电路原理、电工学</category>
      </categories>
      <tags>
        <tag>电路和电路模型</tag>
      </tags>
  </entry>
  <entry>
    <title>第七章 启动文件详解</title>
    <url>/2024/03/03/%E7%AC%AC%E4%B8%83%E7%AB%A0%20%E5%90%AF%E5%8A%A8%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="7-1启动文件介绍"><a href="#7-1启动文件介绍" class="headerlink" title="7.1启动文件介绍"></a>7.1启动文件介绍</h1><p>1、初始化堆栈指针 SP&#x3D;_initial_sp</p>
<p>2、初始化PC指针  &#x3D;Rest_Handler</p>
<p>3、初始化中断向量表</p>
<p>4、配置系统时钟</p>
<p>5、调用C库函数_main初始化用户堆栈，调用main函数</p>
<h1 id="7-2-ARM汇编指令"><a href="#7-2-ARM汇编指令" class="headerlink" title="7.2 ARM汇编指令"></a>7.2 ARM汇编指令</h1><p>EQU：给数字常量去一个富豪们，相当于C语言的define</p>
<p>AREA：汇编一个新的代码段或者数据段</p>
<p>SPACE：分配内存空间</p>
<p>PRE-SERVE8：当前文件堆栈按照8位字节对齐</p>
<p>EX-PORT：声明一个符号具有全局属性，可被外部的文件使用</p>
<p>DCD：字节单位分配，要求4字节对齐，要去初始化这些内存</p>
<p>PROC：定义子程序，与ENDP成对使用，表示子程序结束</p>
<p>WEAK：弱定义，如果外部文件声明了一个标号，则优先使用外部文件定义的标号，如果外部文件没有定义也不出错。要注意的是：这个不是 ARM 的指令，是编译器的，这里放在一起只是为了方便。</p>
<p>IM-PORT：跳转到一个符号</p>
<p>ALIGN：编译器对指令或者数据的存放地址进行对齐，一般需要跟一个立即数，缺省表示 4 字节对齐要注意的是：这个不是 ARM 的指令，是编译器的，这里放在一起只是为了方便。</p>
<p>END：到达文件的末尾，文件结束</p>
<p>IF,ELSE,ENDIF：汇编条件分子语句，跟c语言的if else如此</p>
<h1 id="7-3-启动文件代码讲解"><a href="#7-3-启动文件代码讲解" class="headerlink" title="7.3 启动文件代码讲解"></a>7.3 启动文件代码讲解</h1><h2 id="7-3-1-Stack栈"><a href="#7-3-1-Stack栈" class="headerlink" title="7.3.1 Stack栈"></a>7.3.1 Stack栈</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Stack_Size     EQU <span class="number">0x00000400</span> <span class="comment">//开辟栈的大小为0X00000400（1KB）</span></span><br><span class="line">               AREA STACK, NOINIT, READWRITE, ALIGN=<span class="number">3</span></span><br><span class="line">              <span class="comment">//名字为STACK      可读写       8（2^3）</span></span><br><span class="line">Stack_Mem      SPACE Stack_Size   <span class="comment">//分配内存空间，单位 字节，这里指定大小为Strack_Size</span></span><br><span class="line">__initial_sp  <span class="comment">//栈的结束地址，由高向低生长</span></span><br></pre></td></tr></table></figure>

<p>栈的作用是用于局部变量，函数调用，函数形参等开销，栈的大小不能超过内部SRAM的大小，超过要修改栈的大小。</p>
<h2 id="7-3-2-Heap堆"><a href="#7-3-2-Heap堆" class="headerlink" title="7.3.2 Heap堆"></a>7.3.2 Heap堆</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Heap\_Size EQU <span class="number">0x00000200</span>    <span class="comment">//开辟堆大小0X00000200（512字节）</span></span><br><span class="line">   AREA HEAP, NOINIT, READWRITE, ALIGN=<span class="number">3</span></span><br><span class="line">   <span class="comment">//名字     不初始化，可读写，8（2^3）</span></span><br><span class="line">\_\_heap\_base  <span class="comment">//堆的起始地址</span></span><br><span class="line">          Heap_Mem SPACE Heap_Size</span><br><span class="line">__heap_limit    <span class="comment">//堆的结束地址       堆由低到高生长和栈相反</span></span><br></pre></td></tr></table></figure>

<p>堆用来动态内存的分配，像malloc()函数申请的内存就在堆上面</p>
<h2 id="7-3-3-向量表"><a href="#7-3-3-向量表" class="headerlink" title="7.3.3 向量表"></a>7.3.3 向量表</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">AREA RESET, DATA, READONLY</span><br><span class="line"><span class="comment">//定义数据段为RESET 可读，生命三个标号具有全局属性，可供外部文件调用</span></span><br><span class="line">EXPORT __Vectors</span><br><span class="line">EXPORT __Vectors_End</span><br><span class="line">EXPORT __Vectors_Size</span><br></pre></td></tr></table></figure>

<p>__Vectors 为向量表起始地址，__Vectors_End 为向量表结束地址，两个相减即可算出向量表大小</p>
<h2 id="7-3-4-复位程序"><a href="#7-3-4-复位程序" class="headerlink" title="7.3.4 复位程序"></a>7.3.4 复位程序</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">AREA |.text|, CODE, READONLY</span><br><span class="line"><span class="comment">//定义一个名称为.text 的代码段，可读。</span></span><br><span class="line">.text</span><br><span class="line">Reset_Handler PROC</span><br><span class="line">EXPORT Reset_Handler [WEAK]</span><br><span class="line">IMPORT SystemInit</span><br><span class="line">IMPORT __main</span><br><span class="line">LDR R0, =SystemInit</span><br><span class="line">BLX R0</span><br><span class="line">LDR R0, =__main</span><br><span class="line">BX R0</span><br><span class="line">ENDP</span><br></pre></td></tr></table></figure>

<p>复位子程序是系统上电后第一个执行的程序，调用 SystemInit 函数初始化系统时钟，然后调用 C库函数 _mian，最终调用 main 函数去到 C 的世界。</p>
<p>SystemInit() 是一个标准的库函数，在 system_stm32f103xe.c 这个库文件中定义。主要作用是配置系统时钟，这里调用这个函数之后，单片机的系统时钟配被配置为 72M。</p>
<p>__main 是一个标准的 C 库函数，主要作用是初始化用户堆栈。</p>
<h2 id="7-3-5-中断服务程序"><a href="#7-3-5-中断服务程序" class="headerlink" title="7.3.5 中断服务程序"></a>7.3.5 中断服务程序</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">NMI_Handler PROC ; 系统异常</span><br><span class="line">      EXPORT NMI_Handler [WEAK]</span><br><span class="line">      B .</span><br><span class="line">      ENDP</span><br><span class="line">; 限于篇幅，中间代码省略</span><br><span class="line">SysTick_Handler PROC</span><br><span class="line">      EXPORT SysTick_Handler [WEAK]</span><br><span class="line">      B .</span><br><span class="line">      ENDP</span><br><span class="line">Default_Handler PROC ; 外部中断</span><br><span class="line">      EXPORT WWDG_IRQHandler [WEAK]</span><br><span class="line">      EXPORT PVD_IRQHandler [WEAK]</span><br><span class="line">      EXPORT TAMP_STAMP_IRQHandler [WEAK]</span><br><span class="line">; 限于篇幅，中间代码省略</span><br><span class="line">LTDC_IRQHandler</span><br><span class="line">LTDC_ER_IRQHandler</span><br><span class="line">DMA2D_IRQHandler</span><br><span class="line">      B .</span><br><span class="line">      ENDP</span><br></pre></td></tr></table></figure>

<p>B：跳转到一个标号。这里跳转到一个‘.’，即表示无线循环。</p>
<h2 id="7-3-6-用户堆栈初始化"><a href="#7-3-6-用户堆栈初始化" class="headerlink" title="7.3.6 用户堆栈初始化"></a>7.3.6 用户堆栈初始化</h2><p>ALIGN：对指令或者数据存放的地址进行对齐，后面会跟一个立即数。缺省表示 4 字节对齐。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">; 用户栈和堆初始化, 由 C 库函数_main 来完成</span><br><span class="line">IF : DEF :__MICROLIB ; 这个宏在 KEIL 里面开启</span><br><span class="line">EXPORT __initial_sp</span><br><span class="line">EXPORT __heap_base</span><br><span class="line">EXPORT __heap_limit</span><br><span class="line">ELSE</span><br><span class="line">  IMPORT __use_two_region_memory ; 这个函数由用户自己实现</span><br><span class="line">  EXPORT __user_initial_stackheap</span><br><span class="line">  __user_initial_stackheap</span><br><span class="line">  LDR R0, = Heap_Mem</span><br><span class="line">  LDR R1, =(Stack_Mem + Stack_Size)</span><br><span class="line">  LDR R2, = (Heap_Mem + Heap_Size)</span><br><span class="line">  LDR R3, = Stack_Mem</span><br><span class="line">  BX LR</span><br><span class="line">  ALIGN</span><br><span class="line">  ENDIF</span><br><span class="line">  END</span><br></pre></td></tr></table></figure>


<p>首先判断是否定义了 __MICROLIB，如果定义了这个宏则赋予标号 __initial_sp（栈顶地址）、__heap_base（堆起始地址）、__heap_limit（堆结束地址）全局属性，可供外部文件调用。</p>
]]></content>
      <categories>
        <category>野火 STM32</category>
      </categories>
      <tags>
        <tag>STM32</tag>
      </tags>
  </entry>
  <entry>
    <title>第三章-函数</title>
    <url>/2023/08/10/%E7%AC%AC%E4%B8%89%E7%AB%A0-%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h3 id="一、函数的概念"><a href="#一、函数的概念" class="headerlink" title="一、函数的概念"></a>一、函数的概念</h3><p>函数是 c 语言的功能单位，实现一个功能可以封装一个函数来实现。</p>
<p>定义函数的时候一切以功能为目的，根据功能去定函数的参数和返回值。</p>
<h3 id="二、函数的分类"><a href="#二、函数的分类" class="headerlink" title="二、函数的分类"></a>二、函数的分类</h3><h4 id="1、定义角度分类"><a href="#1、定义角度分类" class="headerlink" title="1、定义角度分类"></a>1、定义角度分类</h4><p>1、库函数 2、自定义函数 3、系统调用</p>
<h4 id="2、参数角度分类"><a href="#2、参数角度分类" class="headerlink" title="2、参数角度分类"></a>2、参数角度分类</h4><p>1、有参函数</p>
<p>​ 函数有形参，可以是一个，也可以是多个，类型随便</p>
<p>例如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fun</span><span class="params">(<span class="type">int</span> a.<span class="type">float</span> b.<span class="type">double</span> c)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、无参函数</p>
<p>函数没有参数，在形参列表的位置写 void 或者不写</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fun</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">fun</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、返回值角度分类</p>
<p>（1）带返回值的函数</p>
<p>在定义函数的时候，必须带有返回值类型，在函数题，必须有 return，没有返回值类型，默认返回值整形</p>
<p>例如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> <span class="title function_">fun</span><span class="params">()</span> <span class="comment">//定义一个返回字符数据的函数</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">char</span> b = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">	<span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">fun()&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（2）没有返回值的函数</p>
<p>在定义函数的时候，函数名字前面加个 void</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">fun</span><span class="params">(形参表)</span>&#123;</span><br><span class="line">	;</span><br><span class="line">	;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">	;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在函数中不需要 return，如果想结束函数，返回到被调用的地方，return ;什么都不返回</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stido.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span>&#123;</span><br><span class="line">    <span class="type">int</span> z;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;y)</span><br><span class="line">        z=x;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        z=y;</span><br><span class="line">    <span class="keyword">return</span> z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">help</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*********************\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;********帮助信息*****\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*********************\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    help();</span><br><span class="line">    num = max(<span class="number">10</span>,<span class="number">10</span>+<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;num=%d\n&quot;</span>,num);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="三、函数的定义"><a href="#三、函数的定义" class="headerlink" title="三、函数的定义"></a>三、函数的定义</h3><p>1、定义方法</p>
<p>返回值类型 函数名字（形参列表）{</p>
<p>​ &#x2F;&#x2F;函数体，函数的功能写在函数体实现</p>
<p>}</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义一个没有参数也没有返回值的函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">myfun1</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hello world\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line"><span class="comment">//定义一个有参数的函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">myfun2</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> sum;</span><br><span class="line">    sum = a + b;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d + %d = %d\n&quot;</span>, a , b , sum);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义一个有返回值的函数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">myfun3</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line">    <span class="type">int</span> sum;</span><br><span class="line">    sum = a + b;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="四、函数的声明"><a href="#四、函数的声明" class="headerlink" title="四、函数的声明"></a>四、函数的声明</h3><p>1、概念</p>
<p>对已经定义的函数，进行声明，可以多次</p>
<p>2、为什么声明</p>
<p>编译器在编译 c 时，上到下编译</p>
<p>3、声明方法</p>
<p>（1）主调函数和被调函数在同一个.c 中</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">fun</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;hello world\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	fun();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//不需要声明</span></span><br></pre></td></tr></table></figure>

<p>（2）被调函数在下，主函数在上</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    fun();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">fun</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hello world\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//需要声明</span></span><br><span class="line"><span class="comment">//1.直接声明</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">myfun1</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">myfun2</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">myfun3</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    myfun1();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">myfun1</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hello world\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">myfun2</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line">    <span class="type">int</span> sum;</span><br><span class="line">    sum = a + b;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d + %d = %d\n&quot;</span>,a,b,sum);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">myfun3</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line">    <span class="type">int</span> sum;</span><br><span class="line">    sum = a + b;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.间接声明</span></span><br><span class="line"><span class="comment">//a.c文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;a.h&quot;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    fun();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">fun</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hellow world&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//a.h文件</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">void</span> <span class="title function_">fun</span><span class="params">(<span class="type">void</span>)</span>;</span><br></pre></td></tr></table></figure>

<p>（2）主调函数和被调函数不在同一个.c 文件</p>
<p>1.直接声明 2.间接声明</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//myfun.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;myfun.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">myfun1</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;hellow world\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//myfun.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> MYFUN_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MYFUN_H</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">myfun1</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//main.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;myfun.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    muyfun1();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="五、函数调用"><a href="#五、函数调用" class="headerlink" title="五、函数调用"></a>五、函数调用</h3><p>变量 &#x3D; 函数名（实参列表）；带返回值</p>
<p>函数名（实参列表）；不带返回值</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">myfun1</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">myfun2</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">myfun</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//没有参数也没有返回值</span></span><br><span class="line">    myfun1();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*******************\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有参数，没有返回值，需要在函数名传入实参</span></span><br><span class="line">    myfun2(<span class="number">100</span>,<span class="number">90</span>);</span><br><span class="line">    <span class="type">int</span> x = <span class="number">10</span>, y=<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//x、y:实参，实际参数，本质就是在被调函数的时候将参数的值传递给形参</span></span><br><span class="line">    myfun2(x,y);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*******************\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有参数也有返回值，可以一个变量接收函数执行结果（返回值），或者直接输出</span></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    n = myfun3(<span class="number">100</span>,<span class="number">90</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;n = %d\n&quot;</span>,n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sum=&amp;d\n&quot;</span>,myfun3(<span class="number">90</span>,<span class="number">66</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">myfun1</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hello world\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//a、b形参，存在实参的值</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">myfun2</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line">    <span class="type">int</span> sum;</span><br><span class="line">    sum = a + b;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d + %d = %d\n&quot;</span>,a,b,sum);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">myfun3</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line">    <span class="type">int</span> sum;</span><br><span class="line">    sum = a + b;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/../assets/%E7%AC%AC%E4%B8%89%E7%AB%A0-%E5%87%BD%E6%95%B0/1691654665160.png" alt="1691654665160"></p>
<h3 id="六、变量的存储类别"><a href="#六、变量的存储类别" class="headerlink" title="六、变量的存储类别"></a>六、变量的存储类别</h3><h4 id="1、内存的分区"><a href="#1、内存的分区" class="headerlink" title="1、内存的分区"></a>1、内存的分区</h4><p>物理内存：存储在存储设备</p>
<p>虚拟内存：操作系统虚拟出来的内存</p>
<p>操作系统会在物理内存和虚拟内存之间叫映射</p>
<h4 id="2、运行程序的时候，操作系统会将虚拟内存进行分区"><a href="#2、运行程序的时候，操作系统会将虚拟内存进行分区" class="headerlink" title="2、运行程序的时候，操作系统会将虚拟内存进行分区"></a>2、运行程序的时候，操作系统会将虚拟内存进行分区</h4><p>（1）堆</p>
<p>在动态申请内存的时候，在堆里开辟内存</p>
<p>（2）栈</p>
<p>存放局部变量</p>
<p>（3）静态全局区</p>
<p>1：未初始化的静态全局区</p>
<p>​ 静态变量（就是在前面添加 statiic），或者全局变量，没有初始化，存储在这里</p>
<p>2：初始化的静态全局区</p>
<p>​ 全局变量，静态变量，赋值初始值的，存储在这里</p>
<p>4、代码区</p>
<p>​ 存储在程序代码</p>
<p>5、文字常量区</p>
<p>​ 存放常量的</p>
<h4 id="3、普通全局变量"><a href="#3、普通全局变量" class="headerlink" title="3、普通全局变量"></a>3、普通全局变量</h4><p>在函数外部定义的变量</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> num =<span class="number">100</span>;<span class="comment">//全局变量,需要声明 extern int num;</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//生命周期：程序运行，整个过程，一直存在，知道程序结束</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个普通全局变量，在main函数外的变量就是全局变量</span></span><br><span class="line"><span class="comment">//没有赋值，系统将赋值初始化0</span></span><br><span class="line"><span class="type">int</span> num;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">myfun</span><span class="params">()</span>&#123;</span><br><span class="line">    num= <span class="number">888</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;num=%d\n&quot;</span>,num);</span><br><span class="line"></span><br><span class="line">    myfun();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;num=%d\n&quot;</span>,num);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/../assets/%E7%AC%AC%E4%B8%89%E7%AB%A0-%E5%87%BD%E6%95%B0/1691658185939.png" alt="1691658185939"></p>
<h4 id="4、静态全局变量"><a href="#4、静态全局变量" class="headerlink" title="4、静态全局变量"></a>4、静态全局变量</h4><p>定义全局变量的时候，用 static</p>
<p>作用范围：限定了静态全局变量的作业范围</p>
<p>生命周期：在程序整个运行中，都一直存在</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"> <span class="comment">//定义一个静态全局变量</span></span><br><span class="line"> <span class="comment">//静态全局变量只能在其定义的.c文件中任意位置使用，不能跨文件使用</span></span><br><span class="line"> <span class="type">static</span> <span class="type">int</span> num;</span><br><span class="line"></span><br><span class="line"> <span class="type">void</span> <span class="title function_">myfun</span><span class="params">()</span></span><br><span class="line"> &#123;</span><br><span class="line"> num++;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line"> &#123;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;num = %d\n&quot;</span>, num);</span><br><span class="line"></span><br><span class="line"> myfun();</span><br><span class="line"></span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;num = %d\n&quot;</span>, num);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/../assets/%E7%AC%AC%E4%B8%89%E7%AB%A0-%E5%87%BD%E6%95%B0/1691658406783.png" alt="1691658406783"></p>
<h4 id="5、局部变量"><a href="#5、局部变量" class="headerlink" title="5、局部变量"></a>5、局部变量</h4><p>在函数内部定义，或者复合语句定义的变量</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> num;<span class="comment">//局部</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a;<span class="comment">//局部</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>作用范围：</p>
<p>在函数中定义的变量，在函数中有效</p>
<p>在复合语句中定义的，在复合语句中有效。</p>
<p>生命周期：</p>
<p>在函数调用之前，局部变量不占用空间，调用函数的时候，</p>
<p>才为局部变量开辟空间，函数结束了，局部变量就释放了。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"> <span class="comment">//定义一个局部变量</span></span><br><span class="line"> <span class="comment">//在函数内部定义的，不加任何修饰的变量都是局部变量</span></span><br><span class="line"> <span class="type">void</span> <span class="title function_">myfun</span><span class="params">()</span></span><br><span class="line"> &#123;</span><br><span class="line"> <span class="type">int</span> num = <span class="number">100</span>;</span><br><span class="line"> num++;</span><br><span class="line"></span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;num = %d\n&quot;</span>, num);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> ;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line"> &#123;</span><br><span class="line"> <span class="comment">//局部变量只能在定义的函数内部使用，声明周期相对较短，函数结束，局部变量就会释</span></span><br><span class="line">放</span><br><span class="line"><span class="comment">//printf(&quot;num = %d\n&quot;, num);</span></span><br><span class="line"> myfun();</span><br><span class="line"> myfun();</span><br><span class="line"> myfun();</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/../assets/%E7%AC%AC%E4%B8%89%E7%AB%A0-%E5%87%BD%E6%95%B0/1691658579818.png" alt="1691658579818"></p>
<h4 id="6、静态的局部变量"><a href="#6、静态的局部变量" class="headerlink" title="6、静态的局部变量"></a>6、静态的局部变量</h4><p>定义局部变量的时候，前面加 static 修饰</p>
<p>作用范围：</p>
<p>在它定义的函数或复合语句中有效。</p>
<p>生命周期：</p>
<p>第一次调用函数的时候，开辟空间赋值，函数结束后，不释放， 以后再调用函数的时候，就不再为其开辟空间，也不赋初值， 用的是以前的那个变量。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个静态局部变量</span></span><br><span class="line"><span class="comment">//在函数内部定义的使用static修饰的变量就是静态局部变量</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">myfun</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//如果普通局部变量不进行初始化，则默认是随机值</span></span><br><span class="line"><span class="comment">//如果静态局部变量不进行初始化，则默认是0</span></span><br><span class="line"> <span class="type">int</span> a; <span class="comment">//普通局部变量</span></span><br><span class="line"> <span class="type">static</span> <span class="type">int</span> num; <span class="comment">//静态局部变量</span></span><br><span class="line"></span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>, a);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;num = %d\n&quot;</span>, num);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="type">void</span> <span class="title function_">myfun1</span><span class="params">()</span></span><br><span class="line"> &#123;</span><br><span class="line"> <span class="comment">//静态局部变量不会随着当前函数执行结束而释放空间，下次使用的函数之前的空间</span></span><br><span class="line"> <span class="comment">//静态局部变量只会初始化一次</span></span><br><span class="line"> <span class="type">static</span> <span class="type">int</span> num1 = <span class="number">100</span>;</span><br><span class="line"> num1++;</span><br><span class="line"></span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;num1 = %d\n&quot;</span>, num1);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line"> &#123;</span><br><span class="line">     myfun();</span><br><span class="line"></span><br><span class="line">     myfun1();</span><br><span class="line">     myfun1();</span><br><span class="line">     myfun1();</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p><img src="/../assets/%E7%AC%AC%E4%B8%89%E7%AB%A0-%E5%87%BD%E6%95%B0/1691658688779.png" alt="1691658688779"></p>
<p>1：定义普通局部变量，如果不赋初值，它的值是随机的。</p>
<p>定义静态局部变量，如果不赋初值，它的值是 0</p>
<p>2：普通全局变量，和静态全局变量如果不赋初值，它的值为 0</p>
<h4 id="7、外部函数"><a href="#7、外部函数" class="headerlink" title="7、外部函数"></a>7、外部函数</h4><p>咱们定义的普通函数，都是外部函数。 即函数可以在程序的任何一个文件中调用。</p>
<p>在分文件编程中，只需要将函数的实现过程写在指定的.c 文件中，然后将其声明写在指定</p>
<p>的.h 文件中，其他文件只要包含了头文件，就可以使用外部函数</p>
<h4 id="8、内部函数"><a href="#8、内部函数" class="headerlink" title="8、内部函数"></a>8、内部函数</h4><p>内部函数也称之为静态函数，就是用 static 修饰的函数</p>
<p>在定义函数的时候，返回值类型前面加 static 修饰。这样的函数被称为内部函数。</p>
<p>static 限定了函数的作用范围，在定义的.c 中有效。</p>
<p>外部函数，在所有地方都可以调用，</p>
<p>内部函数，只能在所定义的.c 中的函数调用</p>
<p>扩展：</p>
<p>在同一作用范围内，不允许变量重名。</p>
<p>作用范围不同的可以重名。</p>
<p>局部范围内，重名的全局变量不起作用。（就近原则）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> num = <span class="number">100</span>; <span class="comment">//全局变量</span></span><br><span class="line"> <span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line"> &#123;</span><br><span class="line"> <span class="comment">//如果出现可以重名的情况，使用的时候满足向上就近原则</span></span><br><span class="line"> <span class="type">int</span> num = <span class="number">999</span>; <span class="comment">//局部变量</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>千锋C语言</category>
      </categories>
      <tags>
        <tag>嵌入式C</tag>
      </tags>
  </entry>
  <entry>
    <title>第三章 寄存器点亮LED</title>
    <url>/2023/09/01/%E7%AC%AC%E4%B8%89%E7%AB%A0-%E5%AF%84%E5%AD%98%E5%99%A8%E7%82%B9%E4%BA%AELED/</url>
    <content><![CDATA[<h2 id="一、GPIO"><a href="#一、GPIO" class="headerlink" title="一、GPIO"></a>一、GPIO</h2><p>GPIO 是通用输入输出端口的简称，就是可控的引脚。</p>
<p><strong>上拉是高电平，下拉是低电平</strong></p>
<p><img src="/../assets/%E7%AC%AC%E4%B8%89%E7%AB%A0-%E5%AF%84%E5%AD%98%E5%99%A8%E7%82%B9%E4%BA%AELED/1693727391280.png" alt="1693727391280"></p>
<h3 id="1、P-MOS-和-N-MOS-管"><a href="#1、P-MOS-和-N-MOS-管" class="headerlink" title="1、P-MOS 和 N-MOS 管"></a>1、P-MOS 和 N-MOS 管</h3><p><strong>推挽输出： 低电平 0v，高电平 3.3v</strong></p>
<p>输出高电平，经过反向后，上方 P-MOS 管导通，下方 N-MOS 管关闭，对外输出高电平。</p>
<p>输入低电平，经过反向后，上方 P-MOS 管关闭，下方 N-MOS 管导通，对外输出低电平。</p>
<p>当高低电平切换时，两个管轮流导通，P 负责电流，N 负责电流。</p>
<p>** 推挽输出一般应用在输出电平为 0，3.3v，需要高速切换开关的状态。</p>
<p><strong>开漏输出：</strong></p>
<p>P-MOS 管不工作。例如，输出 0，低电平，则 P-MOS 关闭，N-MOS 管导通，使输出接地。</p>
<p>输出为 1，P-MOS，N-MOS 都关闭，所以不输出高电平，低电平，为高阻态。</p>
<p>** 开漏输出一般应用在 I2C、SMBUS 通讯，需要“线与”（ *指的是它们任意一开关只要对地导通，这根线就一定是低电平* ）在总线电路上</p>
<h3 id="输出："><a href="#输出：" class="headerlink" title="输出："></a>输出：</h3><h4 id="输出数据寄存器"><a href="#输出数据寄存器" class="headerlink" title="输出数据寄存器"></a>输出数据寄存器</h4><p>MOS 管结构电路的输出信号，由 GPIO“输出数据寄存器”GPIO_ODR 提供</p>
<p>“置位&#x2F;复位寄存器 GPIOx_BSRR”可以通过修改输出数据寄存器的值从而影响电路的输出</p>
<h4 id="复用功能输出"><a href="#复用功能输出" class="headerlink" title="复用功能输出"></a>复用功能输出</h4><p>复用 是指 STM32 其它片上外设对 GPIO 引脚进行控制，此时 GPIO 引脚用作改外设功能的一部分。</p>
<p><strong>例如我们使用 USART 串口通讯时，需要用到某个 GPIO 引脚作为通讯发送引脚，这个时候就可以把该 GPIO 引脚配置成 USART 串口复用功能，由串口外设控制该引脚，发送数据。</strong></p>
<h3 id="输入："><a href="#输入：" class="headerlink" title="输入："></a>输入：</h3><p><strong>输出数据寄存器</strong></p>
<p>连接到施密特触发器，模拟信号转换 0&#x2F;1 数字信号，最好存储在“输出数据寄存器 GPIOx_IDR”中</p>
<p><strong>复用功能输出</strong></p>
<p>GPIO 引脚将信号传输到 stm32 其他片上外设，由该外设读取引脚状态</p>
<p><strong>如我们使用 USART 串口通讯时，需要用到某个 GPIO 引脚作为通讯接收引脚，这个时候就可以把该 GPIO 引脚配置成 USART 串口复用功能，使 USART 可以通过该通讯引脚的接收远端数据。</strong></p>
]]></content>
      <categories>
        <category>野火STM32</category>
      </categories>
      <tags>
        <tag>STM32</tag>
      </tags>
  </entry>
  <entry>
    <title>第九章 STM32中断应用</title>
    <url>/2024/05/09/%E7%AC%AC%E4%B9%9D%E7%AB%A0%20STM32%E4%B8%AD%E6%96%AD%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<h1 id="一、中断概述"><a href="#一、中断概述" class="headerlink" title="一、中断概述"></a>一、中断概述</h1><p>中断时出现某些意外需要主机干预，机器能自动停止运行的程序，转入新的处理的程序，处理完之后返回程序被暂停的程序，继续运行。</p>
<p><strong>异常就是中断，中断就是异常。</strong></p>
<p>异常分为：系统异常和外部中断。</p>
<h1 id="二、NVIC介绍"><a href="#二、NVIC介绍" class="headerlink" title="二、NVIC介绍"></a>二、NVIC介绍</h1><p>NVIC是嵌套向量中断控制器，控制芯片中断的功能。</p>
<p>一般来说，使用ISER（使能中断）、ICER（失能中断）和IP（设置中断优先级）寄存器。</p>
<p>（不常用）</p>
<p><img src="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/5/image_a55375ca0cca80086903ef6aa7ee9e07.png" alt="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/5/image_a55375ca0cca80086903ef6aa7ee9e07.png"></p>
<h1 id="三、优先级"><a href="#三、优先级" class="headerlink" title="三、优先级"></a>三、优先级</h1><p>中断优先级寄存器NVIC_IPRx，用来配置外部中断的优先级。如果抢占优先级相同，九比较子优先级，如果都相同，比较硬件中断编号，编号越小，优先级越高</p>
<p><img src="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/5/image_de37c45ad3b6423601d0f44213e25f99.png" alt="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/5/image_de37c45ad3b6423601d0f44213e25f99.png"></p>
<h1 id="四、优先级分组"><a href="#四、优先级分组" class="headerlink" title="四、优先级分组"></a>四、优先级分组</h1><p>优先级分组由外设SCB的应用程序中断和复位控制寄存器AIRCR的PRIGROUP[10:8]决定，主优先级&#x3D;抢占优先级</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 配置中断优先级分组：抢占优先级和子优先级</span></span><br><span class="line"><span class="comment">* 形参如下：</span></span><br><span class="line"><span class="comment">* @arg NVIC_PriorityGroup_0: 0bit for 抢占优先级</span></span><br><span class="line"><span class="comment">* 4 bits for 子优先级</span></span><br><span class="line"><span class="comment">* @arg NVIC_PriorityGroup_1: 1 bit for 抢占优先级</span></span><br><span class="line"><span class="comment">* 3 bits for 子优先级</span></span><br><span class="line"><span class="comment">* @arg NVIC_PriorityGroup_2: 2 bit for 抢占优先级</span></span><br><span class="line"><span class="comment">* 2 bits for 子优先级</span></span><br><span class="line"><span class="comment">* @arg NVIC_PriorityGroup_3: 3 bit for 抢占优先级</span></span><br><span class="line"><span class="comment">* 1 bits for 子优先级</span></span><br><span class="line"><span class="comment">* @arg NVIC_PriorityGroup_4: 4 bit for 抢占优先级</span></span><br><span class="line"><span class="comment">* 0 bits for 子优先级</span></span><br><span class="line"><span class="comment">* @ 注意 如果优先级分组为 0，则抢占优先级就不存在，优先级就全部由子优先级控制</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">NVIC_PriorityGroupConfig</span><span class="params">(<span class="type">uint32_t</span> PriorityGroup)</span></span><br><span class="line">&#123;</span><br><span class="line">     <span class="comment">// 检查参数</span></span><br><span class="line">     assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));</span><br><span class="line">     <span class="comment">// 设置优先级分组</span></span><br><span class="line">     NVIC_SetPriorityGrouping(PriorityGroup);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/5/image_0779d2ab9fa55ff33a7b9526a2fe24db.png" alt="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/5/image_0779d2ab9fa55ff33a7b9526a2fe24db.png"></p>
<h1 id="五、中断编程"><a href="#五、中断编程" class="headerlink" title="五、中断编程"></a>五、中断编程</h1><p>配置中断一般使用三个：</p>
<p>1、使用 HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup) 函数配置中断优先级分组。一般默认是 NVIC_PRIORITYGROUP_4 分组 4。</p>
<p>2、使用 HAL_NVIC_SetPriority (IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority) 函数配置具体外设中断通道的抢占优先级和子优先级。</p>
<p>3、使用 HAL_NVIC_EnableIRQ 函数使能中断请求。</p>
]]></content>
      <categories>
        <category>野火 STM32</category>
      </categories>
      <tags>
        <tag>STM32</tag>
      </tags>
  </entry>
  <entry>
    <title>第二章-寄存器</title>
    <url>/2023/08/17/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E5%AF%84%E5%AD%98%E5%99%A8/</url>
    <content><![CDATA[<h2 id="一、芯片组成"><a href="#一、芯片组成" class="headerlink" title="一、芯片组成"></a>一、芯片组成</h2><p>负责在 内核之外设计部件并生产整个芯片，这些内核之外的部件被称为核外外设或片上外设。如 GPIO、 USART（串口）、I2C、SPI 等都叫做片上外设</p>
<p><img src="/../assets/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E5%AF%84%E5%AD%98%E5%99%A8/1692290301872.png" alt="1692290301872"></p>
<p>芯片内核和外设之间通过各种总线连接，其中主控总线有 8 条，被控总线有 7 条</p>
<h2 id="二、存储器映射"><a href="#二、存储器映射" class="headerlink" title="二、存储器映射"></a>二、<strong>存储器映射</strong></h2><p>给存储器分配地址的过程就称为存储器映射，具体见图 。给存储器再分配一个地址就叫存储器重映射</p>
<h2 id="三、寄存器"><a href="#三、寄存器" class="headerlink" title="三、寄存器"></a>三、寄存器</h2><p>以功能为名给这个</p>
<p>内存单元取一个别名，这个别名就是我们经常说的寄存器，这个给已经分配好地址的有特定功能的内存单元取别名的过程就叫寄存器映射</p>
<p><strong>寄存器的说明</strong></p>
<p><img src="/../assets/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E5%AF%84%E5%AD%98%E5%99%A8/1692290420600.png" alt="1692290420600"></p>
<p>① 名称</p>
<p>(GPIOx_BSRR)(x&#x3D;A…I)”是该寄存器名为“GPIOx_BSRR”其中的“x”可以为 A-I，也就是说这个寄存器说明适用于 GPIOA、GPIOB 至 GPIOI，这些 GPIO 端口都有这样的一个寄存器</p>
<p>② 偏移地址</p>
<p>偏移地址是指本寄存器相对于这个外设的基地址的偏移。查到 GPIOA 外设的基地址为 0x4002 0000 ，就可以算出 GPIOA 的这个 GPIOA_BSRR 寄存器的地址为：0x4002 0000+0x18</p>
<p>③ 寄存器位表</p>
<p>为读写权限，其中 w 表示只写，r 表示只读，rw 表示可读写</p>
<p>④ 位功能说明</p>
<p>本寄存器中有</p>
<p>两种寄存器位，分别为 BRy 及 BSy，其中的 y 数值可以是 0-15，这里的 0-15 表示端口的引脚号，如 BR0、BS0 用于控制 GPIOx 的第 0 个引脚，若 x 表示 GPIOA，那就是控制 GPIOA 的第 0 引脚，而 BR1、BS1 就是控制 GPIOA 第 1 个引脚。</p>
<p>这里的“复位”是将该位设置为 0 的意思，而“置位”表示将该位设置为 1；</p>
<h2 id="四、GPIO-输出初始化顺序"><a href="#四、GPIO-输出初始化顺序" class="headerlink" title="四、GPIO 输出初始化顺序"></a>四、GPIO 输出初始化顺序</h2><p>1、确定 GPIO 是输入、通用输出、复用功能还是模拟输入（MODER）</p>
<p>2、如果是输出还要确定推挽输出还是开漏输出（OTYPER）</p>
<p>3、配置输出的速度（OSPEEDR）</p>
<p>4、输出的时候内部是上&#x2F;下拉电阻要不要开启（PUPDR）</p>
<p>5、具体输出的内容（BSSR 和数据输出 ODR）</p>
]]></content>
      <categories>
        <category>野火STM32</category>
      </categories>
      <tags>
        <tag>STM32</tag>
      </tags>
  </entry>
  <entry>
    <title>第二章 数组</title>
    <url>/2023/08/06/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<h3 id="一、数组的概念"><a href="#一、数组的概念" class="headerlink" title="一、数组的概念"></a>一、数组的概念</h3><p>数组是若干个相同类型的变量在内存中有序存储的集合。</p>
<p>概念理解：</p>
<p>数组用于存储一组数据</p>
<p>数组里面存储的数据类型必须是相同的</p>
<p>数组在内存中会开辟一块连续的空间</p>
<p>int a[10];&#x2F;&#x2F;定义了一个整型的数组 a，a 是数组的名字，数组中有 10 个元素，每个元素的类型都是 int 类型，而且在内存中连续存储。</p>
<p>这十个元素分别是 a[0] a[1] …. a[9]</p>
<p>a[0]~a[9]在内存中连续的顺序存储</p>
<h3 id="二、数组的分类"><a href="#二、数组的分类" class="headerlink" title="二、数组的分类"></a>二、数组的分类</h3><p><strong>1）字符数组</strong></p>
<p>即若干个字符变量的集合，数组中的每个元素都是字符型的变量</p>
<p>char s[10]; s[0],s[1]….s[9];</p>
<p><strong>2）短整型的数组</strong></p>
<p>short int a[10]; a[0] ,a[9]; a[0]&#x3D;4;a[9]&#x3D;8;</p>
<p><strong>3）整型的数组</strong></p>
<p>int a[10]; a[0] a[9]; a[0]&#x3D;3;a[0]&#x3D;6;</p>
<p><strong>4) 长整型的数组</strong></p>
<p>lont int a[5];</p>
<p><strong>5）浮点型的数组（单、双）</strong></p>
<p>float a[6]; a[4]&#x3D;3.14f;</p>
<p>double a[8]; a[7]&#x3D;3.115926;</p>
<p><strong>6）指针数组</strong></p>
<p>char *a[10]</p>
<p>int *a[10];</p>
<p><strong>7）结构体数组</strong></p>
<p>struct stu boy[10];</p>
<p><strong>2.2 按维数分类</strong></p>
<p><strong>一维数组</strong></p>
<p>int a[30];</p>
<p>类似于一排平房</p>
<p><strong>二维数组</strong></p>
<p>int a[2] [30] ;</p>
<p>可以看成一栋楼房 有多层，每层有多个房间，也类似于数学中的矩阵</p>
<p>二维数组可以看成由多个一维数组构成的。</p>
<p>有行，有列，</p>
<p><strong>多维数组</strong></p>
<p>int a[4] [2] [10];</p>
<p>三维数组是由多个相同的二维数组构成的</p>
<p>int a[5] [4] [ 2] [10];</p>
<p><strong>三、数组的定义</strong></p>
<p><strong>3.1 一维数组的定义</strong></p>
<p>格式：</p>
<p>数据类型 数组名[数组元素个数];</p>
<p>例如：</p>
<p>int a[10]; &#x2F;&#x2F;定义了一个名为 a 的数组，数组中每一个元素都是 int 类型，一共有 10 个元素</p>
<p>&#x2F;&#x2F;每一个元素都保存在一个变量中，每一个变量都是有数组名和数组下标组成的</p>
<p>&#x2F;&#x2F;并且是从 0 开始的，分别是 a[0] a[1] a[2]… a[9]</p>
<p>注意：数组元素的个数在定义的时候也可以不写，但是如果不写，必须初始化（定义的时候赋值）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//定义一个一维数组</span></span><br><span class="line"><span class="type">int</span> a[<span class="number">10</span>];</span><br><span class="line"><span class="comment">//通过sizeof关键字可以获取数组的大小</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sizeof(a) = %d %d\n&quot;</span>, <span class="keyword">sizeof</span>(a), <span class="number">10</span> * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line"></span><br><span class="line"> <span class="comment">//如果定义数组的同时赋值（初始化），可以不指定数组元素的个数，系统会根据初始化</span></span><br><span class="line">元素的个数自动指定数组元素的个数</span><br><span class="line"> <span class="type">int</span> b[] = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>&#125;;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;sizeof(b) = %d\n&quot;</span>, <span class="keyword">sizeof</span>(b));</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-2-二维数组的定义"><a href="#3-2-二维数组的定义" class="headerlink" title="3.2 二维数组的定义"></a><strong>3.2 二维数组的定义</strong></h3><p>格式:</p>
<p>数据类型 数组名[行的个数][列的个数];</p>
<p>例如：</p>
<p>int a[2][4];</p>
<p>解释：</p>
<p>定义一个名为 a 的二维数组，每一个元素都是 int 类型</p>
<p>这个二维数组中包含两行四列的元素，一共有 8 个元素</p>
<p>二维数组也是连续开辟空间，访问元素是行和列都是从 0 开始，分别是 a[0] [0] a[0] [1] a[0] [2] a[0] [3] a[1] [0] a[1] [1] a[1] [2] a[1] [3]</p>
<p>注意：二维数组的下标也是可以省略的，但是有条件，在初始化时行数可以省略，但是列数不能省略</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义一个二维数组</span></span><br><span class="line"> <span class="type">int</span> c[<span class="number">2</span>][<span class="number">4</span>];</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;sizeof(c) = %d %d\n&quot;</span>, <span class="keyword">sizeof</span>(c), <span class="number">2</span> * <span class="number">4</span> * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line"></span><br><span class="line"> <span class="comment">//二维数组的行数可以省略，但是列数不能省略，在初始化时可以这样操作</span></span><br><span class="line"> <span class="comment">//系统会根据列数自动指定行数，最终得到的函数所得到得元素个数移动是列的整数倍</span></span><br><span class="line"> <span class="type">int</span> d[][<span class="number">4</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;sizeof(d) = %d\n&quot;</span>, <span class="keyword">sizeof</span>(d));</span><br></pre></td></tr></table></figure>

<h3 id="四、定义并初始化"><a href="#四、定义并初始化" class="headerlink" title="四、定义并初始化"></a><strong>四、定义并初始化</strong></h3><p><strong>4.1 一维数组的初始化</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"> <span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line"> &#123;</span><br><span class="line"> <span class="comment">//以一维数组的初始化</span></span><br><span class="line"> <span class="comment">//如果不初始化，直接使用会是随机值</span></span><br><span class="line"> <span class="comment">//int a[4];</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化方式1：全部初始化</span></span><br><span class="line"> <span class="comment">//int a[4] = &#123;123, 78, 666, 476&#125;;</span></span><br><span class="line"> <span class="comment">//如果是全部 初始化，可以不指定数组元素的个数，系统会自动分配</span></span><br><span class="line"> <span class="comment">//int a[] = &#123;10, 20, 30, 40&#125;;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">//初始化方式2：局部初始化</span></span><br><span class="line"> <span class="comment">//未初始化的位置的元素自动赋值为0</span></span><br><span class="line"> <span class="type">int</span> a[<span class="number">4</span>] = &#123;<span class="number">10</span>, <span class="number">20</span>&#125;;</span><br><span class="line"></span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a[<span class="number">0</span>]);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a[<span class="number">1</span>]);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a[<span class="number">2</span>]);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p><strong>4.2 二维数组的初始化</strong></p>
<p><strong>按行初始化：</strong></p>
<p>a、全部初始化</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">2</span>][<span class="number">2</span>]=&#123;&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line">a[<span class="number">0</span>][<span class="number">0</span>] =<span class="number">1</span>; a[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">a[<span class="number">1</span>][<span class="number">0</span>] =<span class="number">4</span>, a[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">5</span>;</span><br></pre></td></tr></table></figure>

<p>b、部分初始化</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">3</span>][<span class="number">3</span>]=&#123;&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">1</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line">a[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;a[<span class="number">0</span>][<span class="number">2</span>] =<span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<p><strong>逐个初始化：</strong></p>
<p>全部初始化：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a [<span class="number">2</span>][<span class="number">3</span>]=&#123;<span class="number">2</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br></pre></td></tr></table></figure>

<p>部分初始化：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">2</span>][<span class="number">3</span>]=&#123;<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//二维数组的初始化</span></span><br><span class="line"><span class="comment">//int a[2][3];</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化方式1：按行初始化</span></span><br><span class="line"><span class="comment">//全部初始化</span></span><br><span class="line"> <span class="comment">//int a[2][3] = &#123;&#123;10, 20, 30&#125;, &#123;666, 777, 888&#125;&#125;;</span></span><br><span class="line"> <span class="comment">//局部初始化</span></span><br><span class="line"> <span class="comment">//没有赋值的位置的元素自动为0</span></span><br><span class="line"> <span class="comment">//int a[2][3] = &#123;&#123;10, 20&#125;, &#123;666&#125;&#125;;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">//初始化方式2：逐个初始化</span></span><br><span class="line"> <span class="comment">//全部初始化</span></span><br><span class="line"> <span class="comment">//int a[2][3] = &#123;1, 2, 3, 4, 5, 6&#125;;</span></span><br><span class="line"> <span class="comment">//局部初始化</span></span><br><span class="line"> <span class="comment">//没有赋值的位置的元素自动为0</span></span><br><span class="line"> <span class="type">int</span> a[<span class="number">2</span>][<span class="number">3</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"></span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a[<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a[<span class="number">0</span>][<span class="number">1</span>]);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a[<span class="number">0</span>][<span class="number">2</span>]);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a[<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a[<span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a[<span class="number">1</span>][<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h3 id="五、数组元素的引用方法"><a href="#五、数组元素的引用方法" class="headerlink" title="五、数组元素的引用方法"></a><strong>五、数组元素的引用方法</strong></h3><p>一维数组元素的引用方法</p>
<p>数组名[下标]；</p>
<p>&#x2F;&#x2F;下标代表数组元素在数组中的位置，注意从 0 开始</p>
<p>int a[10];a[2];</p>
<p>二维数组元素的引用方法</p>
<p>数组名[行下标] [列下标];</p>
<p>int a[3] [4];</p>
<p>a[1] [2]</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//一维数组的引用以及一维数组的遍历</span></span><br><span class="line"><span class="type">int</span> a[<span class="number">6</span>] = &#123;<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>, <span class="number">444</span>, <span class="number">555</span>, <span class="number">666</span>&#125;;</span><br><span class="line"></span><br><span class="line"> a[<span class="number">3</span>] = <span class="number">10000</span>;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//一维数组的遍历</span></span><br><span class="line"> <span class="type">int</span> i;</span><br><span class="line"> <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(a) / <span class="keyword">sizeof</span>(<span class="type">int</span>); i++)</span><br><span class="line"> &#123;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;a[%d] = %d\n&quot;</span>, i, a[i]);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;**********************\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"> <span class="comment">//二维数组的引用以及二维数组的遍历</span></span><br><span class="line"> <span class="type">int</span> b[<span class="number">3</span>][<span class="number">4</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>,</span><br><span class="line"> <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>,</span><br><span class="line"> <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>&#125;;</span><br><span class="line"></span><br><span class="line"> b[<span class="number">2</span>][<span class="number">0</span>] = <span class="number">666</span>;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//二维数组的遍历</span></span><br><span class="line"> <span class="type">int</span> m, n;</span><br><span class="line"> <span class="comment">//外层循环控制行数</span></span><br><span class="line"> <span class="keyword">for</span>(m = <span class="number">0</span>; m &lt; <span class="number">3</span>; m++)</span><br><span class="line"> &#123;</span><br><span class="line"> <span class="comment">//内层循环控制列数</span></span><br><span class="line"> <span class="keyword">for</span>(n = <span class="number">0</span>; n &lt; <span class="number">4</span>; n++)</span><br><span class="line"> &#123;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;%‐4d&quot;</span>, b[m][n]);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h3 id="六、字符数组的定义和初始化问题"><a href="#六、字符数组的定义和初始化问题" class="headerlink" title="六、字符数组的定义和初始化问题"></a><strong>六、字符数组的定义和初始化问题</strong></h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> c1[] =&#123;‘c’,’ ’,’p’,’r’,’o’,’g’&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> c2[] = “c prog”;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> a[][<span class="number">5</span>] = &#123;</span><br><span class="line"></span><br><span class="line">&#123;‘B’,’A’,’S’,’I’,’C’&#125;,</span><br><span class="line"></span><br><span class="line">&#123;‘d’,’B’,’A’,’S’,’E’&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">char</span> a[][<span class="number">6</span>] = &#123;“hello”,“world”&#125;</span><br></pre></td></tr></table></figure>

<p><strong>字符数组的引用</strong></p>
<p>1.用字符串方式赋值比用字符逐个赋值要多占 1</p>
<p>个字节,用于存放字符串结束标志‘</p>
<p>\0’;</p>
<p>2.上面的数组 c2 在内存中的实际存放情况为：</p>
<p><img src="/../assets/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E6%95%B0%E7%BB%84/1691335523766.png" alt="1691335523766"></p>
<p>3.由于采用了’\0’标志，字符数组的输入输出将变得简单方便</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//定义一个字符数组，通过scanf函数输入字符串并输出结果</span></span><br><span class="line"><span class="comment">//通过赋值&quot;&quot;这样的方式可以清除字符数组中的垃圾字符，让每一个元素都是\0</span></span><br><span class="line"><span class="type">char</span> ch[<span class="number">32</span>] = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//数组名就是当前数组的首地址，所以scanf的第二个参数直接传数组名即可</span></span><br><span class="line"> <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, ch);</span><br><span class="line"></span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;ch = %s\n&quot;</span>, ch);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>千锋C语言</category>
      </categories>
      <tags>
        <tag>嵌入式C</tag>
      </tags>
  </entry>
  <entry>
    <title>第五章-初始HAL库</title>
    <url>/2024/02/06/%E7%AC%AC%E4%BA%94%E7%AB%A0-%E5%88%9D%E5%A7%8BHAL%E5%BA%93/</url>
    <content><![CDATA[<p><img src="/../assets/%E7%AC%AC%E4%BA%94%E7%AB%A0-%E5%88%9D%E5%A7%8BHAL%E5%BA%93/1707232401368.png" alt="1707232401368"></p>
<h2 id="一、库目录、文件介绍"><a href="#一、库目录、文件介绍" class="headerlink" title="一、库目录、文件介绍"></a>一、库目录、文件介绍</h2><p><img src="/../assets/%E7%AC%AC%E4%BA%94%E7%AB%A0-%E5%88%9D%E5%A7%8BHAL%E5%BA%93/1707232814478.png" alt="1707232814478"></p>
<p><strong>Documentation：如何使用驱动库来编写自己的应用程序</strong></p>
<p><strong>Drivers：文件夹下是官方的 CMSISI 库，HAL 库，板载外设驱动。</strong></p>
<p><strong>Middlewares：中间件，包含 ST 官方的 STemWin、STM32_Audio、STM32_USB_Device_Library、STM32_USB_Host_Library；也有第三方的 fatfs 文件系统等等。</strong></p>
<p><strong><em>Project</em> ：文件夹下是用驱动库写的针对官方发行 demo 板的例子和工程模板。</strong></p>
<p><strong>Utilities：实用的公用组件比如 LCD_LOG 实用液晶打印调试信息。</strong></p>
<p><strong>Release_Note.html:：库的版本更新说明。</strong></p>
<h2 id="2、CMSIS-文件"><a href="#2、CMSIS-文件" class="headerlink" title="2、CMSIS 文件"></a>2、CMSIS 文件</h2><p><img src="/../assets/%E7%AC%AC%E4%BA%94%E7%AB%A0-%E5%88%9D%E5%A7%8BHAL%E5%BA%93/1707233331041.png" alt="1707233331041"></p>
]]></content>
      <categories>
        <category>野火STM32</category>
      </categories>
      <tags>
        <tag>STM32</tag>
      </tags>
  </entry>
  <entry>
    <title>第五章-指针</title>
    <url>/2023/08/14/%E7%AC%AC%E4%BA%94%E7%AB%A0-%E6%8C%87%E9%92%88/</url>
    <content><![CDATA[<h3 id="一、指针的概念"><a href="#一、指针的概念" class="headerlink" title="一、指针的概念"></a>一、指针的概念</h3><p>操作系统给每个存储单元分配了一个编号，从 0x00 00 00 00 00 ~0xff ff ff ff 称之为内存</p>
<p>指针变量：是变量也是指针变量，这个变量用来存放一个地址编号。在 32 位系统下，有 4 个字节</p>
<p>注：</p>
<p>​ 1、无论声明类型的地址，都有存储单元的编号，在 32 位下都是 4 个总控二。所以 任何类型的指针变量都是 4 个字节</p>
<p>​ 2、对应类型的指针变量，只能存放对应类型的变量地址</p>
<p>​ 比如：整形的指针变量，就是存放整型变量的地址</p>
<p>扩展：</p>
<p>字符变量 char ch; ch 占一个字节，它有一个地址编号，这个地址编号就是 ch 的地址整型变量 int a； a 占四个字节，占有四个字节的存储单位，有四个地址编号</p>
<p><img src="/../assets/%E7%AC%AC%E4%BA%94%E7%AB%A0-%E6%8C%87%E9%92%88/1692111175278.png" alt="1692111175278"></p>
<h3 id="二、指针的定义方法"><a href="#二、指针的定义方法" class="headerlink" title="二、指针的定义方法"></a>二、指针的定义方法</h3><p>1、简单指针</p>
<p>数据类型 * 指针变量名</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> * P;</span><br><span class="line"><span class="comment">//定义一个指针变量P</span></span><br></pre></td></tr></table></figure>

<p>2、指针的运算符</p>
<p>&amp; 取地址 ：获取一个变量的地址</p>
<p>*取值：标识作用</p>
<p><img src="/../assets/%E7%AC%AC%E4%BA%94%E7%AB%A0-%E6%8C%87%E9%92%88/1692111376174.png" alt="1692111376174"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">100</span>;</span><br><span class="line">    <span class="type">int</span> * p;<span class="comment">//指针变量</span></span><br><span class="line">    p = &amp;a;<span class="comment">//a的地址保存在p中</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a = %d %d\n&quot;</span>,a,*p);</span><br><span class="line">    ptintf(<span class="string">&quot;&amp;a = %p %p\n&quot;</span>,&amp;a,p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/../assets/%E7%AC%AC%E4%BA%94%E7%AB%A0-%E6%8C%87%E9%92%88/1692111480916.png" alt="1692111480916"></p>
<p>3、指针大小</p>
<p>在 32 位系统下，所以类型的指针都是 4 个字节</p>
<h3 id="三、指针的分类"><a href="#三、指针的分类" class="headerlink" title="三、指针的分类"></a>三、指针的分类</h3><p>1、字符指针</p>
<p>​ char *p;&#x2F;&#x2F;只能存放字符串类型的地址编号</p>
<p>​ char ch;</p>
<p>​ p &#x3D; &ch;</p>
<p>2、短整型指针</p>
<p>​ short int *p;</p>
<p>​ short int a;</p>
<p>​ p &#x3D;&a;</p>
<p>3、整形指针</p>
<p>​ int *p;</p>
<p>​ int a;</p>
<p>​ p &#x3D;&a;</p>
<p>4：长整型指针</p>
<p>long int *p;</p>
<p>long int a;</p>
<p>p &#x3D;&a;</p>
<p>5：float 型的指针</p>
<p>float *p;</p>
<p>float a;</p>
<p>p &#x3D;&a;</p>
<p>6：double 型的指针</p>
<p>​ double *p;</p>
<p>​ double a;</p>
<p>​ p &#x3D;&a;</p>
<p>7：函数指针</p>
<p>8、结构体指针</p>
<p>9、指针的指针</p>
<p>10、数组指针</p>
<h3 id="四、指针和变量的关系"><a href="#四、指针和变量的关系" class="headerlink" title="四、指针和变量的关系"></a>四、指针和变量的关系</h3><p><strong>指针可以存放变量地址编号</strong></p>
<p>1、变量的名称引用变量</p>
<p>​ int a;</p>
<p>​ a&#x3D;100;</p>
<p>2、通过指针变量引来变量</p>
<p>​ int *p;</p>
<p>​ p &#x3D;&a;&#x2F;&#x2F;p 保存了 a 的地址，也可以说 p 指向了 a</p>
<p>​ *p&#x3D;100;</p>
<p>注意：指针变量的定义可以初始化</p>
<p>int a;</p>
<p>int *p&#x3D;&a;&#x2F;&#x2F;指针就是存放变量地址的</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> *p1,*p2,temp,a,b;</span><br><span class="line">    p1=&amp;a;</span><br><span class="line">    p2=&amp;b;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入a b的值：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,p1,p2);<span class="comment">//70 90</span></span><br><span class="line">    temp = *p1;<span class="comment">//p1指向a的值给temp赋值 70</span></span><br><span class="line">    *p1 = *p2;<span class="comment">//p2指向b的值给p1的变量a赋值 90</span></span><br><span class="line">    *p2 = temp;<span class="comment">//temp给p2指向的变量b赋值 70</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a=%d b=%d\n&quot;</span>,a,b);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;*p1=%d *p2=%d\n&quot;</span>,*p1,*p2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/../assets/%E7%AC%AC%E4%BA%94%E7%AB%A0-%E6%8C%87%E9%92%88/1692112482696.png" alt="1692112482696"></p>
<p>扩展：</p>
<p>对应类型的指针，只能保存对应类型数据的地址</p>
<p>如果想让不同类型的指针互相赋值，需要强制类型转换</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> a=<span class="number">0x1234</span>,b=<span class="number">5678</span>;</span><br><span class="line">    <span class="type">char</span> *p1,*p2;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%#x %#x\n&quot;</span>,a,b);</span><br><span class="line">    p1=(<span class="type">char</span> *)&amp;a;</span><br><span class="line">    p2=(<span class="type">char</span> *)&amp;b;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%#x %#x\n&quot;</span>,*p1,*p2);</span><br><span class="line">    p1++;</span><br><span class="line">    p2++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%#x %#x\n&quot;</span>,*p1,*p2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/../assets/%E7%AC%AC%E4%BA%94%E7%AB%A0-%E6%8C%87%E9%92%88/1692113002001.png" alt="1692113002001"></p>
<p><img src="/../assets/%E7%AC%AC%E4%BA%94%E7%AB%A0-%E6%8C%87%E9%92%88/1692113028355.png" alt="1692113028355"></p>
<h3 id="五、指针和数组元素之间的关系"><a href="#五、指针和数组元素之间的关系" class="headerlink" title="五、指针和数组元素之间的关系"></a>五、指针和数组元素之间的关系</h3><p>1、数组元素和指针的基本关系</p>
<p>变量存放在内存中，有地址编号，定义的数组，是的哟个相同类型的变量的集合。每个变量都占内存空间，都有地址编号。指针变量可以存放数组元素的地址（数组首元素）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">10</span>];</span><br><span class="line"><span class="comment">//int *p =&amp;a[0];</span></span><br><span class="line"><span class="type">int</span> *p;</span><br><span class="line">p=&amp;a[<span class="number">0</span>]; <span class="comment">//指针变量p保存了数组a中第0个元素的地址，即a[0]的地址</span></span><br></pre></td></tr></table></figure>

<p>2、数组元素的引用方式</p>
<p>（1）数组名[下标]</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">10</span>];</span><br><span class="line">a[<span class="number">2</span>]=<span class="number">100</span>;</span><br></pre></td></tr></table></figure>

<p>（2）指针名加下标</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int a[10];</span><br><span class="line">int *p;</span><br><span class="line">p=a;</span><br><span class="line">p[2]=100;</span><br></pre></td></tr></table></figure>

<p>（3）指针运算加取值</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">10</span>];</span><br><span class="line"><span class="type">int</span> *p;</span><br><span class="line">p = a;</span><br><span class="line">*(p+<span class="number">2</span>)=<span class="number">100</span>;<span class="comment">//a[2]=100</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">5</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">    <span class="type">int</span> *p;</span><br><span class="line">    p=a;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a[2]=%d\n&quot;</span>,a[<span class="number">2</span>]);<span class="comment">//2</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;p[2]=%d\n&quot;</span>,p[<span class="number">2</span>]);<span class="comment">//2</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*(p+2) = %d\n&quot;</span>,*(p+<span class="number">2</span>));<span class="comment">//2</span></span><br><span class="line"> 	<span class="built_in">printf</span>(<span class="string">&quot;*(a+2) = %d\n&quot;</span>,*(a+<span class="number">2</span>));<span class="comment">//2</span></span><br><span class="line"></span><br><span class="line"> 	<span class="built_in">printf</span>(<span class="string">&quot;p=%p\n&quot;</span>,p);</span><br><span class="line"> 	<span class="built_in">printf</span>(<span class="string">&quot;p+2=%p\n&quot;</span>,p+<span class="number">2</span>);</span><br><span class="line"> 	<span class="built_in">printf</span>(<span class="string">&quot;&amp;a[0] = %p\n&quot;</span>, &amp;a[<span class="number">0</span>]);</span><br><span class="line"> 	<span class="built_in">printf</span>(<span class="string">&quot;&amp;a[2] = %p\n&quot;</span>, &amp;a[<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/../assets/%E7%AC%AC%E4%BA%94%E7%AB%A0-%E6%8C%87%E9%92%88/1692113975759.png" alt="1692113975759"></p>
]]></content>
      <categories>
        <category>千锋C语言</category>
      </categories>
      <tags>
        <tag>嵌入式C</tag>
      </tags>
  </entry>
  <entry>
    <title>第四章-自己创建函数库</title>
    <url>/2024/02/02/%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E8%87%AA%E5%B7%B1%E5%88%9B%E5%BB%BA%E5%87%BD%E6%95%B0%E5%BA%93/</url>
    <content><![CDATA[<p><img src="/../assets/%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E8%87%AA%E5%B7%B1%E5%88%9B%E5%BB%BA%E5%87%BD%E6%95%B0%E5%BA%93/1706848296026.png" alt="1706848296026"></p>
<p><img src="/../assets/%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E8%87%AA%E5%B7%B1%E5%88%9B%E5%BB%BA%E5%87%BD%E6%95%B0%E5%BA%93/1707148103038.png" alt="1707148103038"></p>
<h2 id="1、片上外设基地址"><a href="#1、片上外设基地址" class="headerlink" title="1、片上外设基地址"></a>1、片上外设基地址</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#define PERIPH_BASE           ((unsigned int)0x40000000)</span><br></pre></td></tr></table></figure>

<h2 id="2、总线基地址"><a href="#2、总线基地址" class="headerlink" title="2、总线基地址"></a>2、总线基地址</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#define AHB1PERIPH_BASE       (PERIPH_BASE + 0x00020000)</span><br></pre></td></tr></table></figure>

<h2 id="3、GPIO-外设基地址"><a href="#3、GPIO-外设基地址" class="headerlink" title="3、GPIO 外设基地址"></a>3、GPIO 外设基地址</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#define GPIOH_BASE            (AHB1PERIPH_BASE + 0x1C00)</span><br></pre></td></tr></table></figure>

<p><img src="/../assets/%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E8%87%AA%E5%B7%B1%E5%88%9B%E5%BB%BA%E5%87%BD%E6%95%B0%E5%BA%93/1706889171120.png" alt="1706889171120"></p>
<p>&#x2F;&#x2F;H 高十位，L 低十位</p>
<p><img src="/../assets/%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E8%87%AA%E5%B7%B1%E5%88%9B%E5%BB%BA%E5%87%BD%E6%95%B0%E5%BA%93/1707231761899.png" alt="1707231761899"></p>
]]></content>
      <categories>
        <category>野火STM32</category>
      </categories>
      <tags>
        <tag>STM32</tag>
      </tags>
  </entry>
  <entry>
    <title>第四章-预处理</title>
    <url>/2023/08/14/%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E9%A2%84%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h3 id="一、C-语言编译过程"><a href="#一、C-语言编译过程" class="headerlink" title="一、C 语言编译过程"></a>一、C 语言编译过程</h3><p>预处理、编译、汇编链接</p>
<p>gcc -E hello.c -o hello.i 1、预处理</p>
<p>gcc -S hello.i –o hello.s 2、编译</p>
<p>gcc -c hello.s -o hello.o 3、汇编</p>
<p>gcc hello.o -o hello_elf 4、链接</p>
<p>1、预编译</p>
<p>​ 将.c 的头文件、宏展开</p>
<p>​ 生成.i 文件</p>
<p>2、编译</p>
<p>​ 将预处理的.i 文件生成 .s 汇编文件</p>
<p>3、汇编</p>
<p>​ 将.s 汇编文件生成.o 目标文件</p>
<p>4、链接</p>
<p>​ .o 文件链接成目标文件</p>
<h3 id="二、include"><a href="#二、include" class="headerlink" title="二、include"></a>二、include</h3><p>#include&lt;&gt; 用尖括号包括头文件，在系统指定的路径找到头文件</p>
<p>#include”” 用双引号包括头文件，先在当前目录下找到头文件，找不到再系统指定的路径下找</p>
<h3 id="三、define"><a href="#三、define" class="headerlink" title="三、define"></a>三、define</h3><p>定义 宏用 define</p>
<h4 id="1、不带参数的宏"><a href="#1、不带参数的宏" class="headerlink" title="1、不带参数的宏"></a>1、不带参数的宏</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> PI 3.14</span></span><br><span class="line"><span class="comment">//终止宏的定义 定义</span></span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> PI</span></span><br></pre></td></tr></table></figure>

<h4 id="2、带参宏"><a href="#2、带参宏" class="headerlink" title="2、带参宏"></a>2、带参宏</h4><p>#define S(a,b) a*b</p>
<p>注意带参宏的形参 ab 没有类名</p>
<p>S(2,4)在预处理代替成字符串的形参 2 * 4</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> S(a,b) ((a)*(b))</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,S(<span class="number">2</span>,<span class="number">4</span>));</span><br><span class="line">    <span class="comment">//((2+8))*(4))=40</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,S(<span class="number">2</span> + <span class="number">8</span>,<span class="number">4</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3、带参宏和代餐函数的区"><a href="#3、带参宏和代餐函数的区" class="headerlink" title="3、带参宏和代餐函数的区"></a>3、带参宏和代餐函数的区</h4><p>​ 带参宏被<strong>调用</strong>多少次就会<strong>展开多少次</strong>，执行代码的时候没有函数调用的过程，不需要压栈弹栈。带参宏，浪费空间</p>
<p>​ 带参函数，代码只有一份，存放在代码段，调用的时候去代码段指令，调用的时候要压栈弹栈。带参函数浪费了时间，节省了空间</p>
<h3 id="四、选择性编译"><a href="#四、选择性编译" class="headerlink" title="四、选择性编译"></a>四、选择性编译</h3><p>1、</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> AAA</span></span><br><span class="line">	代码段一</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">	代码段二</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果在当前.c ifdef上边定义AAA，就编译代码段一，否则编译代码段二</span></span><br><span class="line"> <span class="meta">#<span class="keyword">include</span> AAA</span></span><br><span class="line"></span><br><span class="line"> <span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="meta">#<span class="keyword">ifdef</span> AAA</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;hello kitty\n&quot;</span>);</span><br><span class="line">        <span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;hello ddd&quot;</span>);</span><br><span class="line">        <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>2、</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> AAA</span></span><br><span class="line">	代码段一</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">	代码段二</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"> <span class="comment">//和第一种互补，用在防止头文件重复包含，用于多文件编程中.h的第一行就是#indef #endif结尾</span></span><br></pre></td></tr></table></figure>

<p>3、</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> 表达式</span></span><br><span class="line">	代码块一</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">	代码块二</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="comment">//如果表达式为真，编译第一段，否则第二段</span></span><br><span class="line"><span class="comment">//多用于注释多行代码</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>千锋C语言</category>
      </categories>
      <tags>
        <tag>嵌入式C</tag>
      </tags>
  </entry>
  <entry>
    <title>项目测试</title>
    <url>/2024/02/18/%E9%A1%B9%E7%9B%AE%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>项目</category>
      </categories>
  </entry>
  <entry>
    <title>第八章 RCC使用HES/HSI</title>
    <url>/2024/03/21/%E7%AC%AC%E5%85%AB%E7%AB%A0%20RCC%E4%BD%BF%E7%94%A8HES/HSI/</url>
    <content><![CDATA[<h1 id="1、RCC主要作用-时钟部分"><a href="#1、RCC主要作用-时钟部分" class="headerlink" title="1、RCC主要作用 时钟部分"></a>1、RCC主要作用 时钟部分</h1><p>设置系统时钟SYSCLK、设置AHB分频因子（决定HCLK等于多少）、设置APB2分频因子（决定PLCLK2等于多少）、设置APB1分频因子（决定PLK1等于多少）、设置各个外设的分配因子。控制 AHB、APB2 和 APB1 这三条总线时钟的开启、控制每个外设的时钟的开启。对于 SYSCLK、HCLK、PCLK2、PCLK1 这四个时钟的配置一般是：HCLK &#x3D; SYSCLK&#x3D;PLLCLK ，PCLK1&#x3D;HCLK&#x2F;2，PCLK1&#x3D;HCLK&#x2F;4 。</p>
<h1 id="2、RCC时钟树"><a href="#2、RCC时钟树" class="headerlink" title="2、RCC时钟树"></a>2、RCC时钟树</h1><p>库函数时钟系统始终函数：SetSysClock()。</p>
<p>HSE时钟树设置为：</p>
<p>HCLK&#x3D;SYSCLK&#x3D;PLLCLK&#x3D;180M（F429）</p>
<p>PCLK1&#x3D;HCLK&#x2F;2&#x3D;90M(F429)</p>
<p>PLCK1&#x3D;HCLK&#x2F;4&#x3D;45M(F429)</p>
<p><img src="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/3/image_f4eb27007cd32cb5a5c1b1e612c5066f.png" alt="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/3/image_f4eb27007cd32cb5a5c1b1e612c5066f.png"></p>
<h2 id="2-1系统时钟"><a href="#2-1系统时钟" class="headerlink" title="2.1系统时钟"></a>2.1系统时钟</h2><h3 id="2-1-1"><a href="#2-1-1" class="headerlink" title="2.1.1"></a>2.1.1</h3><p>HSE是高速的外部时钟信号，有无源&#x2F;有源晶振提供，频率4-26MHZ。</p>
<p>有源晶振，时钟从OSC_IN引脚进入，OSC_OUT引脚悬空。</p>
<p>无源晶振，时钟从OSC_IN,OSC_OUT进入，配合谐振电容。</p>
<h3 id="2-1-2-锁相环PLL"><a href="#2-1-2-锁相环PLL" class="headerlink" title="2.1.2 锁相环PLL"></a>2.1.2 锁相环PLL</h3><p>PLL的主要作用是对时钟进行倍频，然后将时钟输出到各个功能部分。</p>
<p>PLL和PLLI2S，他们由HSE或者HSI提供时钟输入信号。</p>
<p>主PLL有两路时钟输出，第一个输出时钟是PLLCLK用于系统时钟，F429最高时180M，第一个时用于USB OTG FS的时钟（48M）、RNG和SDIO时钟（&lt;&#x3D;48M）专门用于PLLI2S生成精准时钟，给I2S提供时钟。</p>
<p>HSE或者HSI经过PLL时钟输出分频因子M（2~63）分频后，称为VCO的时钟输入，VCO的时钟必须在1 ~2M，选择HSE&#x3D;25M作为PLL的时钟输入，M设置25，VCO输入时钟必须等于1M。</p>
<h3 id="2-1-3-系统时钟SYSCLK"><a href="#2-1-3-系统时钟SYSCLK" class="headerlink" title="2.1.3 系统时钟SYSCLK"></a>2.1.3 系统时钟SYSCLK</h3><p>系统时钟来源可以时HSI、PLLCLK、HSE，具体由时钟配置寄存器RCC_CFGR的SW位配置。SYSCLK&#x3D;PLLCLK&#x3D;180M。</p>
<p>如果系统时钟是由HSE经过PLL倍频之后的PLLCLK得到，当HSE出现故障的时候，系统时钟会切换HSI&#x3D;16M，知道HSE恢复正常。</p>
<h3 id="2-1-4-AHB总线时钟HCLK"><a href="#2-1-4-AHB总线时钟HCLK" class="headerlink" title="2.1.4 AHB总线时钟HCLK"></a>2.1.4 AHB总线时钟HCLK</h3><p>系统时钟经过AHB预分频器分频之后得到的时钟是叫AHB总线时钟，就是HCLK，分频因子可以是[1,2,4,16,64,128,256,512]，具体由时钟配置寄存器RCC_CFGR的HPRE</p>
<p>位设置。片上大部分外设时钟都是HCLK分频德奥，AHB总线的外设设置时使用外设的时候设置。</p>
<h3 id="2-1-5-APB2总线时钟PCLK2"><a href="#2-1-5-APB2总线时钟PCLK2" class="headerlink" title="2.1.5 APB2总线时钟PCLK2"></a>2.1.5 APB2总线时钟PCLK2</h3><p>AHB2总线是由PCLK2由HCLK经过高速APB2预分频器得到，分频因子可以是[1,2,4,16]，由时钟配置寄存器RCC_CFGR的PRPE2位设置。PCLK2属于高速的总线时钟，片上高速的外设就挂载到这条总线，比如全部的GPIO、USART1、SPI1等。</p>
<h3 id="2-1-6-APB1-总线时钟PCLK1"><a href="#2-1-6-APB1-总线时钟PCLK1" class="headerlink" title="2.1.6 APB1 总线时钟PCLK1"></a>2.1.6 APB1 总线时钟PCLK1</h3><p>APB1总线时钟PCLK1由HCLK经过低速APB预分频器得到，分频因子可以是[1,2,4,16]，由RCC_CFGR的PPRE2位设置。PCLK2属于低速的总线时钟，最高为45M（F429），片上低速的外设挂载到这条总线上，比如USART2&#x2F;4&#x2F;5，SPI2&#x2F;3，I2C1&#x2F;2。</p>
]]></content>
      <categories>
        <category>野火STM32</category>
      </categories>
      <tags>
        <tag>STM32</tag>
      </tags>
  </entry>
  <entry>
    <title>第十章 EXTI-外部中断/事件控制器</title>
    <url>/2024/05/09/%E7%AC%AC%E5%8D%81%E7%AB%A0%20EXTI-%E5%A4%96%E9%83%A8%E4%B8%AD%E6%96%AD/%E4%BA%8B%E4%BB%B6%E6%8E%A7%E5%88%B6%E5%99%A8/</url>
    <content><![CDATA[<h1 id="一、EXTI介绍"><a href="#一、EXTI介绍" class="headerlink" title="一、EXTI介绍"></a>一、EXTI介绍</h1><p>外部中断&#x2F;事件控制器（EXTI）管理控制器的23个中断&#x2F;时间线，都有一个对应的一个边沿检测器，实现输入信号的上升沿和下降沿检测，都可以实现对每个中断&#x2F;事件进行单独配置，可以单独配置中断或事件和触发事件的属性。</p>
<p><img src="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/5/image_3aeaa4380ab343e39c3a79a69a049055.png" alt="https://cdn.jsdelivr.net/gh/weixuna/MyPic/24/5/image_3aeaa4380ab343e39c3a79a69a049055.png"></p>
<p><strong>（EXTI是在APB2总线上的）</strong></p>
<p>1、红色虚线和绿色虚线分别是 产生中断的线路，信号流入到NVIC控制器。</p>
<p>2、绿色虚线是产生事件的线路，输出一个脉冲信号。</p>
<p>3、输入线，EXTI有23个中断&#x2F;事件输入先，可以为任意一个GPIO，也可以是外设的事件。</p>
<p>4、边沿检测电路，根据上升沿触发寄存器（EXTI_RTSR）和下降沿触发选择寄存器（EXTI_FTSR）对应位控制信号触发。</p>
<p>5、软件中事件寄存器（EXTI_SWIER），允许程序控制可以启动中断&#x2F;时间线。</p>
<p>6、中断屏蔽寄存器（EXTI_IMR），可以简单控制EXTI_IMR来实现产生中断的目的。</p>
<p>7、挂起寄存器（EXTI_PR），内容输出到NVIC，实现系统中断事件中断控制。</p>
<p>8、事件屏蔽寄存器（EXTI_EMR），控制它来实现是否产生事件的目的。</p>
<h1 id="二、编程要点"><a href="#二、编程要点" class="headerlink" title="二、编程要点"></a>二、编程要点</h1><p>1、初始化RGB</p>
<p>2、开启按键GPIO和SYSCFG时钟</p>
<p>3、配置NVIC</p>
<p>4、配置按键GPIO为输入</p>
<p>5、按键连接到EXTI源输入</p>
<p>6、配置按键EXTI中断&#x2F;事件线</p>
<p>7、编写EXTI中断服务函数</p>
]]></content>
      <categories>
        <category>野火 STM32</category>
      </categories>
      <tags>
        <tag>STM32</tag>
      </tags>
  </entry>
</search>
